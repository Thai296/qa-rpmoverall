package com.pfEngines.tests;

import com.mbasys.mars.ejb.entity.docStore.DocStore;
import com.overall.fileMaintenance.sysMgt.DocumentUploadAndStorage;
import com.overall.menu.MenuNavigation;
import com.xifin.qa.dao.exception.XifinDataAccessException;
import com.xifin.utils.SeleniumBaseTest;
import com.xifin.xap.utils.XifinAdminUtils;
import org.apache.commons.lang3.StringUtils;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.sql.Timestamp;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static com.overall.fileMaintenance.sysMgt.DocumentUploadAndStorage.PAGE_TITLE;

public class MalwareScanEngineTest extends SeleniumBaseTest {
    XifinAdminUtils xifinAdminUtils;


    @BeforeMethod(alwaysRun = true)
    @Parameters({"platform", "browser", "version", "port", "hub", "timeout", "orgAlias", "ssoUsername", "ssoPassword", "disableBrowserPlugins"})
    public void beforeMethod(String platform, String browser, String version, int port, String hub, int timeout, String orgAlias, String ssoUsername, String ssoPassword, String disableBrowserPlugins) {
        try {
            logger.info("Running Before Method");
            logIntoSso(ssoUsername, ssoPassword);
            MenuNavigation navigation = new MenuNavigation(driver, config);
            navigation.navigateToDocUploadStoragePage();
        } catch (Exception e) {
            Assert.fail("Error running Before Method", e);
        }
    }

    @Test(priority = 1, description = "Upload Document through DocStore and Run MalwareScan Engine ")

    @Parameters({"ssoUsername", "ssoPassword","fileName", "category", "categoryId", "documentType"})
    public void uploadDocumentThroughDocStoreAndRunMalwareScanEngine(String ssoUsername, String ssoPassword,String fileName, String category, String categoryId, String documentType
                         ) throws Exception {

        logger.info("===== Testing - Malware Scan Engine =====");

        xifinAdminUtils = new XifinAdminUtils(driver, config);


        logger.info("Clean DocStore records, filename=" + fileName);
        deleteDocStoreItem(fileName);

        logger.info("*** Step 1 Actions: Upload document  through Doc Upload and Storage through XP ");

        DocumentUploadAndStorage documentUploadAndStorage = new DocumentUploadAndStorage(driver, wait);
        logger.info("message=Verify FM Document Upload And Storage page is displayed");
        verifyPageTitle(documentUploadAndStorage);

        logger.info("Click on Upload Document button");
        documentUploadAndStorage.uploadDocumentButton().click();

        logger.info("Upload document, filename=" + fileName);
        uploadFile(documentUploadAndStorage.xfnUploaderFile(), fileName);
        logger.info("Set Category dropdown, value=" + category);
        selectItem(documentUploadAndStorage.categoryDropdown(), category);
        logger.info("Set Category ID, value=" + categoryId);
        documentUploadAndStorage.setCategoryId(categoryId);
        logger.info("Set Document Type, value=" + documentType);
        documentUploadAndStorage.setDocumentType(documentType);
        logger.info("Click Upload button");
        documentUploadAndStorage.clickUploadButton();

        logger.info("*** Step 1 Expected Results: - Verify  new document is in the uploads grid");
        documentUploadAndStorage.document(fileName);

        logger.info( "Click Save button");
        documentUploadAndStorage.clickSaveDocumentsButton();

        Timestamp uploadDate = new Timestamp(System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(1));

        logger.info("Verify document is stored in DB");
        List <DocStore> docStoreList = docStoreDao.getDocStoreList(fileName, uploadDate);

        Assert.assertEquals(docStoreList.size(), 1);

        logger.info("*** Step 2 Actions: Set the fk_scan_status_typ_id to 0 and clear scanning_data_id ");

        docStoreDao.updateScanStatusTypIdAndScanningDataIdByFilename(fileName);


        logger.info("*** Step 2 Expected Results: - Verify  that fk_scan_status_typ_id is 0 and scanning_data_id is null ");
        DocStore docStore = docStoreDao.getDocStoreByFilename(fileName);
        Assert.assertEquals(docStore.getScanStatusTypId(),0);
        Assert.assertEquals(docStore.getScanningDataId(),null);

        logger.info("*** Step 3 Actions: Run the Malwarescan engine and verify that FK_SCAN_STATUS_TYP_ID is updated to 4 and value got populated in scanning_data_id ");

        xifinAdminUtils.runPFEngine(this, ssoUsername, ssoPassword, null, "MalwareScanEngine", "SSO_APP_STAGING", true);

        logger.info("*** Rerunning  the Malwarescan engine to make sure scan status is 4 completed rather than in progress ");
        if(docStoreDao.getDocStoreByFilename(fileName).getScanStatusTypId()!=4){
            xifinAdminUtils.runPFEngine(this, ssoUsername, ssoPassword, null, "MalwareScanEngine", "SSO_APP_STAGING", true);

        }
        Thread.sleep(6000);
        logger.info("*** Step 3 Expected Results: - Verify  that fk_scan_status_typ_id is 4  and scanning_data_id is not null ");
        docStore = docStoreDao.getDocStoreByFilename(fileName);
        Assert.assertEquals(docStore.getScanStatusTypId(),4);
        Assert.assertNotNull(docStore.getScanningDataId());
    }

    private static void verifyPageTitle(DocumentUploadAndStorage documentUploadAndStorage)
    {
        Assert.assertTrue(StringUtils.containsIgnoreCase(documentUploadAndStorage.pageTitle().getText(), PAGE_TITLE));
    }


    private void deleteDocStoreItem(String filename) throws XifinDataAccessException
    {
        docStoreDao.deleteDocStoreAudit(filename);
        docStoreDao.deleteDocStoreIndexByFileName(filename);
        docStoreDao.deleteDocStore(filename);
    }

}

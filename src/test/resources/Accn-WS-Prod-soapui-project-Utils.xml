<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Accession WS_Prodv7_Utils" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" id="bee9a15a-ffe6-4997-89d5-b05637ca9900" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="accessionSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/accession}accessionSoap11" soapVersion="1_1" anonymous="optional" definition="file:/C:/GIT/workspace/SOAPUI/accession.wsdl.xml" id="bef9e591-1058-434f-9213-ccd6291f147b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/GIT/workspace/SOAPUI/accession.wsdl.xml"><con:part><con:url>file:/C:/GIT/workspace/SOAPUI/accession.wsdl.xml</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/accession" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/accession" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/accession">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/accession" xmlns="http://www.xifin.com/schema/accession" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="GetAccessionRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AccessionId" type="types:AccessionIdType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="GetAccessionResponseMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAccessionResponseMessage">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element minOccurs="0" name="LinkedAccessions" type="types:NoteType">
              <xs:annotation>
                <xs:documentation>Comma delimited list of linked accessions</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="DateOfService" type="xs:date"/>
            <xs:element minOccurs="0" name="TimeOfService" type="types:TimeOfService"/>
            <xs:element minOccurs="0" name="ReceiptDate" type="xs:date"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="ClientName" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="RequisitionId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="AccessionStatus" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="StatementStatus" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="FinalReportDate" type="xs:date"/>
            <xs:element minOccurs="0" name="PricedDate" type="xs:date"/>
            <xs:element minOccurs="0" name="AccountingDate" type="xs:date"/>
            <xs:element minOccurs="0" name="OriginalAccountingDate" type="xs:date"/>
            <xs:element minOccurs="0" name="ClientStatementDate" type="xs:date"/>
            <xs:element minOccurs="0" name="ExpectPrice" type="types:AmountType"/>
            <xs:element minOccurs="0" name="GrossPrice" type="types:AmountType"/>
            <xs:element minOccurs="0" name="BilledPrice" type="types:AmountType"/>
            <xs:element minOccurs="0" name="BalanceDue" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientDueAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientInfo" type="PatientInfoType"/>
            <xs:element minOccurs="0" name="ClientProductId" type="types:ClientProductType"/>
            <xs:element minOccurs="0" name="NoCharge" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PatientSignatureOnFile" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PhysicianSignatureOnFile" type="xs:boolean"/>
            <xs:element minOccurs="0" name="Physicians" type="Physicians"/>
            <xs:element minOccurs="0" name="PhlebotomistUserId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="PhlebotomistName" type="xs:string"/>
            <xs:element minOccurs="0" name="PscLocationId" type="xs:string"/>
            <xs:element minOccurs="0" name="PscLocationName" type="xs:string"/>
            <xs:element minOccurs="0" name="CallBack" type="xs:boolean"/>
            <xs:element minOccurs="0" name="CallBackPhone" type="types:PhoneNumberType"/>
            <xs:element minOccurs="0" name="STAT" type="xs:boolean"/>
            <xs:element minOccurs="0" name="AdmitDate" type="xs:date"/>
            <xs:element minOccurs="0" name="AdmissionTime" type="types:TimeType"/>
            <xs:element minOccurs="0" name="DischargeDate" type="xs:date"/>
            <xs:element minOccurs="0" name="DischargeTime" type="types:TimeType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="InsuranceInfo" type="GetInsuranceInfoType"/>
            <xs:element minOccurs="0" name="PaidInFull" type="xs:boolean"/>
            <xs:element minOccurs="0" name="TravelFee" type="TravelFeeType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionLevelDiagnosisCodes" type="DiagnosisCode"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ClientQuestions" type="ClientQuestion"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="OrderedTests" type="GetOrderedTest"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="BillableProcedureCodes" type="BillableProcedureCode"/>
            <xs:element minOccurs="0" name="BulkPaymentAndDenials" type="BulkPaymentAndDenials"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AdditionalReportCopy" type="AdditionalReportCopyType"/>
            <xs:element minOccurs="0" name="ClinicalTrial" type="ClinicalTrial"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PromisedPayments" type="PromisedPayments"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionContactInfo" type="AccessionContactInfo"/>
            <xs:element minOccurs="0" name="ChainOfCustody" type="ChainOfCustody"/>
            <xs:element minOccurs="0" name="DialysisInfo" type="DialysisInfoType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ValueCodes" type="ValueCodeType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="OccurrenceCodes" type="OccurrenceCodeType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="SpecimenInfo" type="SpecimenInformationType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="DeletedPayorInfo" type="GetInsuranceInfoType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionLevelDeletedDiagnosisCodes" type="DeletedDiagnosisCode"/>
            <xs:element minOccurs="0" name="MspForm" type="xs:boolean"/>
            <xs:element minOccurs="0" name="OriginalSubmissionDate" type="xs:date"/>
            <xs:element minOccurs="0" name="ClientBillingCategory" type="types:DescriptionType"/>
            <xs:element name="OEPerformed" type="xs:boolean"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PatientEstimation" type="PatientEstimationType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CreateAccessionRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="CreateAccession" type="AccessionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CreateAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="BusinessObject">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionPayorErrors" type="AccessionPayorErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionTestErrors" type="AccessionTestErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="LisInterfaceErrors" type="ErrorType"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PerformBillingRulesRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:annotation>
                  <xs:documentation>The value to be sent in the Billing Rules Type field is one of the following "PAYOR", "CLIENT" or "ALL". When the value of "ALL" is passed in, payor billing rules are
                                performed first followed by the Client Billing Rules and the response is returned. The data is not persisted for this request.</xs:documentation>
                </xs:annotation>
                <xs:sequence>
                  <xs:element name="BillingRulesAccession" type="AccessionType"/>
                  <xs:element name="BillingRulesType" type="BillingRulesTypeEnum"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PerformBillingRulesResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="BillingRulesResponse" type="BillingRulesResponseType"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="BillingRulesResponseType">
        <xs:sequence>
          <xs:element name="AccessionId" type="xs:string"/>
          <xs:element name="ClientId" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="OrderedTests" type="GetOrderedTest"/>
          <xs:element maxOccurs="unbounded" name="InsuranceInfo" type="GetInsuranceInfoType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionPayorErrors" type="AccessionPayorErrorType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionTestErrors" type="AccessionTestErrorType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UpdateEPAccessionRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateAccession" type="AccessionType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="ManualErrorFixes" type="ManualErrorFixType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdateAccessionRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateAccession" type="AccessionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdateAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="BusinessObject">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionPayorErrors" type="AccessionPayorErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionTestErrors" type="AccessionTestErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="LisInterfaceErrors" type="ErrorType"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ValidateAccessionRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure for validate Accession</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="ValidateAccession" type="AccessionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ValidateAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="BusinessObject">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionPayorErrors" type="AccessionPayorErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionTestErrors" type="AccessionTestErrorType"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="LisInterfaceErrors" type="ErrorType"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetEPAccessionRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="GetEPAccessionRequestMessage" type="GetEPAccessionRequestMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetEPAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="GetEPAccessionResponseMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="GetEPAccessionRequestMessage">
        <xs:sequence>
          <xs:element name="AccessionId" type="types:AccessionIdType"/>
          <xs:element name="CorrespondanceType" type="types:DescriptionType"/>
          <xs:element default="false" minOccurs="0" name="IncludeAccessionDetails" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="IncludeLimitedCoveragePolicyDetails" type="xs:boolean"/>
          <xs:element default="true" minOccurs="0" name="IncludeAccessionError" type="xs:boolean"/>
          <xs:element default="true" minOccurs="0" name="IncludeAccessionTestError" type="xs:boolean"/>
          <xs:element default="true" minOccurs="0" name="IncludeAccessionProcedureError" type="xs:boolean"/>
          <xs:element default="true" minOccurs="0" name="IncludeAccessionPayorError" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="IncludeBillOtherPartyDetails" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="GetEPAccessionResponseMessage">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionErrors" type="ErrorType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionTestErrors" type="AccessionTestErrorType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionPayorErrors" type="AccessionPayorErrorType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionProcedureErrors" type="AccessionProcedureErrorType"/>
            <xs:element minOccurs="0" ref="GetAccessionResponseMessage"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="LimitedCoveragePolicyDetails" type="LimitedCoveragePolicyDetails"/>
            <xs:element default="false" minOccurs="0" name="BillAccnToClientPermitted" type="xs:boolean"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ManualErrorFixType">
        <xs:sequence>
          <xs:element name="ReasonCode" type="types:IdType"/>
          <xs:element name="ErrorType" type="ErrorTypeEnum"/>
          <xs:choice>
            <xs:annotation>
              <xs:documentation>Depending on the ErrorType chosen, additional information can be provided to
                        constrain the errors to specific references.</xs:documentation>
            </xs:annotation>
            <xs:element minOccurs="0" name="AccessionPayorErrorReference" type="AccessionPayorErrorReferenceType"/>
            <xs:element minOccurs="0" name="AccessionProcedureErrorReference" type="AccessionProcedureErrorReferenceType"/>
            <xs:element minOccurs="0" name="AccessionTestErrorReference" type="AccessionTestErrorReferenceType"/>
          </xs:choice>
          <xs:element default="false" minOccurs="0" name="FixErrorByDocumentUpload" type="xs:boolean"/>
          <xs:element minOccurs="0" name="FixNote" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionPayorErrorReferenceType">
        <xs:sequence>
          <xs:element minOccurs="0" name="payorPriority" type="types:PayorPriorityType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionProcedureErrorReferenceType">
        <xs:sequence>
          <xs:element name="procedureId" type="types:IdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionTestErrorReferenceType">
        <xs:sequence>
          <xs:element name="testId" type="TestCodeIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="ErrorTypeEnum">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACCESSION"/>
          <xs:enumeration value="PAYOR"/>
          <xs:enumeration value="PROCEDURE"/>
          <xs:enumeration value="TEST"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="BillingRulesTypeEnum">
        <xs:restriction base="xs:string">
          <xs:enumeration value="PAYOR"/>
          <xs:enumeration value="CLIENT"/>
          <xs:enumeration value="ALL"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="AccessionType">
        <xs:sequence>
          <xs:element name="AccessionId" type="types:AccessionIdType"/>
          <xs:element name="IgnoreErrors" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="ReturnErrors" type="xs:boolean"/>
          <xs:element minOccurs="0" name="RequisitionId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ReceiptDate" type="xs:date"/>
          <xs:element name="DateOfService" type="xs:date"/>
          <xs:element minOccurs="0" name="TimeOfService" type="types:TimeOfService"/>
          <xs:element minOccurs="0" name="AdmitDate" type="xs:date"/>
          <xs:element minOccurs="0" name="DischargeDate" type="xs:date"/>
          <xs:element minOccurs="0" name="LowConfidence" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Low Confidence flag and Low Confidence Reason are optional fields
                        used only in the update Accession request. These fields are used specifically by XIFIN partners when
                        updating insurance and patient address data that does not meet threshold levels for posting information directly to the accession.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="LowConfidenceReason" type="types:NoteType"/>
          <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PatientInfo" type="PatientInfoType"/>
          <xs:element minOccurs="0" name="PatientDemoEffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="FinalReportedDate" type="xs:date"/>
          <xs:element minOccurs="0" name="Physicians" type="Physicians"/>
          <xs:element minOccurs="0" name="PatientSignatureOnFile" type="xs:boolean"/>
          <xs:element minOccurs="0" name="PhysicianSignatureOnFile" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ReportCopyToPatient" type="xs:boolean"/>
          <xs:element minOccurs="0" name="CallBack" type="xs:boolean"/>
          <xs:element minOccurs="0" name="CallBackPhone" type="types:PhoneNumberType"/>
          <xs:element minOccurs="0" name="STAT" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionContactInfo" type="AccessionContactInfo"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AdditionalReportCopy" type="AdditionalReportCopyType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ClientQuestions" type="ClientQuestion"/>
          <xs:element minOccurs="0" name="ClinicalTrial" type="ClinicalTrial"/>
          <xs:element minOccurs="0" name="ChainOfCustody" type="ChainOfCustody"/>
          <xs:element minOccurs="0" name="DialysisInfo" type="DialysisInfoType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="OrderedTests" type="CreateOrUpdateOrderedTest"/>
          <xs:element minOccurs="0" name="TravelFee" type="TravelFeeType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionLevelDiagnosisCodes" type="DiagnosisCode"/>
          <xs:element minOccurs="0" name="PhlebotomistUserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PscLocationId" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SpecimenInfo" type="SpecimenInformationType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="InsuranceInfo" type="CreateOrUpdateInsuranceInfoType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="OccurrenceCode" type="OccurrenceCodeType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ValueCode" type="ValueCodeType"/>
          <xs:element minOccurs="0" name="CheckClientBillingRules" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ClientProductId" type="types:ClientProductType">
            <xs:annotation>
              <xs:documentation>The available ClientProductIds can be obtained using typetables
                        webservice where tablename =ClientProductType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="NoCharge" type="xs:boolean"/>
          <xs:element minOccurs="0" name="PaidInFull" type="xs:boolean"/>
          <xs:element minOccurs="0" name="CreateOrUpdatePatientDemo" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If CreateOrUpdatePatientDemo flag is true
                        If patient Demo graphic record exists,
                        update the existing patient demographic record
                        else
                        create permanent patient Demo graphic record</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="MspForm" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ForceToEPHoldQueueNote" type="types:NoteType"/>
          <xs:element minOccurs="0" name="ClientBillingCategory" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmployerInfoType">
        <xs:sequence>
          <xs:element name="EmployerName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="EmployerId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Address" type="types:AddressType"/>
          <xs:element minOccurs="0" name="Status" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available EmploymentStatTyps can be obtained using typetables
                        webservice where tablename =EmploymentStatTyp.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="EmployerContact" type="types:Contact"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetInsuranceInfoType">
        <xs:sequence>
          <xs:element name="PayorPriority" type="types:PayorPriorityType"/>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PayorName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="xs:string"/>
          <xs:element minOccurs="0" name="InsuredRelationship" type="xs:string"/>
          <xs:element minOccurs="0" name="GroupId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PlanId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="InsuredName" type="types:NameType"/>
          <xs:element minOccurs="0" name="Address" type="types:AddressType"/>
          <xs:element minOccurs="0" name="Phone" type="types:PhoneType"/>
          <xs:element minOccurs="0" name="InsuredSSN" type="types:SSNType"/>
          <xs:element minOccurs="0" name="AuthorizationNumber" type="types:AuthorizationNumberType"/>
          <xs:element minOccurs="0" name="ClaimNotes" type="types:NoteType"/>
          <xs:element minOccurs="0" name="Comments" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo1" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo2" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo3" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo4" type="types:NoteType"/>
          <xs:element minOccurs="0" name="GroupName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="CaseId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DelayReasonCode" type="types:DelayReasonCodeType"/>
          <xs:element minOccurs="0" name="EmployerInfo" type="EmployerInfoType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EligibilityInfo" type="EligibilityInfo"/>
          <xs:element minOccurs="0" name="PaidInFull" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorErrors" type="ErrorType"/>
          <xs:element minOccurs="0" name="Jurisdiction" type="xs:boolean"/>
          <xs:element minOccurs="0" name="DemonstrationProjectId" type="types:DemonstrationProjectIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateOrUpdateInsuranceInfoType">
        <xs:sequence>
          <xs:element name="PayorPriority" type="types:PayorPriorityType"/>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PayorName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="xs:string">
            <xs:annotation>
              <xs:documentation>Use typetables webservice to get available Ids use for this type .Use Gender as
                        tablename</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="InsuredRelationship" type="xs:string">
            <xs:annotation>
              <xs:documentation>The available InsuredRelationships can be obtained using typetables
                        webservice where tablename =InsuredRelationship.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="GroupId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PlanId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="InsuredName" type="types:NameType"/>
          <xs:element minOccurs="0" name="Address" type="types:AddressType"/>
          <xs:element minOccurs="0" name="Phone" type="types:PhoneType"/>
          <xs:element minOccurs="0" name="InsuredSSN" type="types:SSNType"/>
          <xs:element minOccurs="0" name="AuthorizationNumber" type="types:AuthorizationNumberType"/>
          <xs:element minOccurs="0" name="ClaimNotes" type="types:NoteType"/>
          <xs:element minOccurs="0" name="Comments" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo1" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo2" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo3" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo4" type="types:NoteType"/>
          <xs:element minOccurs="0" name="GroupName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="CaseId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DelayReasonCode" type="types:DelayReasonCodeType">
            <xs:annotation>
              <xs:documentation>The available DelayReasonCodes can be obtained using typetables webservice
                        where tablename =DelayReasonCode.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="EmployerInfo" type="EmployerInfoType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EligibilityInfo" type="EligibilityInfo"/>
          <xs:element minOccurs="0" name="DemonstrationProjectId" type="types:DemonstrationProjectIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatientInfoType">
        <xs:sequence>
          <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
          <xs:element default="false" minOccurs="0" name="CreateBadAddress" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Create Bad Address flag is optional field used only in the Update Accession request.
                    Note this functionality is not available for Accessions with Client Payors.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Person" type="types:PersonType"/>
          <xs:element minOccurs="0" name="PatientType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available PatientTypes can be obtained using typetables webservice
                        where tablename =PatientType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Fasting" type="PatientFastingType">
            <xs:annotation>
              <xs:documentation>The available Fastings can be obtained using typetables webservice
                        where tablename =Fasting.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="PatientLocation" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available PatientLocations can be obtained using typetables webservice
                        where tablename =PatientLocation.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="IndigentPercent" type="types:AmountType"/>
          <xs:element minOccurs="0" name="OnsetDate" type="xs:date"/>
          <xs:element minOccurs="0" name="OnsetType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available OnsetTypes can be obtained using typetables webservice
                        where tablename =OnsetType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="AdmissionSource" type="types:ShortStrType">
            <xs:annotation>
              <xs:documentation>The available AdmissionSources can be obtained using typetables webservice
                        where tablename =AdmissionSource.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="AdmissionType" type="types:ShortStrType">
            <xs:annotation>
              <xs:documentation>The available AdmissionTypes can be obtained using typetables webservice
                        where tablename =AdmissionType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="AccidentCause" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available AccidentCauses can be obtained using typetables webservice
                        where tablename =AccidentCause.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="AccidentState" type="xs:string"/>
          <xs:element default="false" minOccurs="0" name="EmergencyIndicator" type="xs:boolean"/>
          <xs:element minOccurs="0" name="GravidaNumber" type="types:SmallInt"/>
          <xs:element minOccurs="0" name="Pregnancy" type="xs:boolean"/>
          <xs:element minOccurs="0" name="MaritalStatus" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available MaritalStatuses can be obtained using typetables webservice
                        where tablename =MaritalStatus.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Comments" type="types:CommentsType"/>
          <xs:element minOccurs="0" name="PatientStatusType" type="types:PatientStatusType">
            <xs:annotation>
              <xs:documentation>The available PatientStatusTypes can be obtained using typetables webservice
                        where tablename =PatientStatusType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="ClientSpecificPatientId" type="types:PatientIdType"/>
          <xs:element minOccurs="0" name="FacilitySpecificPatientId" type="types:PatientIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DialysisInfoType">
        <xs:sequence>
          <xs:element minOccurs="0" name="DialysisType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available DialysisTypes can be obtained using typetables webservice
                        where tablename =DialysisType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Medication" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available Medications can be obtained using typetables webservice
                        where  tablename =Medication.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EligibilityInfo">
        <xs:sequence>
          <xs:element name="EligibilityStatus" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available EligibilityStatuss can be obtained using typetables webservice
                        where tablename =EligibilityStatus.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="EligibilityService" type="types:DescriptionType"/>
          <xs:element name="EligibilityCheckedDate" type="xs:date"/>
          <xs:element minOccurs="0" name="EligibilityTransactionId" type="xs:positiveInteger">
            <xs:annotation>
              <xs:documentation>EligibilityTransactionId is the unique transaction Id and can be used to get 271
                        eligibility data for more details
                        using eligibility webservice</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ClinicalTrial">
        <xs:sequence>
          <xs:element name="TrialName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="EncounterName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="EncounterDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ModsTyp">
        <xs:sequence>
          <xs:element minOccurs="0" name="Mod1" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Mod2" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Mod3" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Mod4" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ChainOfCustody">
        <xs:sequence>
          <xs:element minOccurs="0" name="MroName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="MroAddress" type="types:AddressType"/>
          <xs:element minOccurs="0" name="MroContact" type="types:Contact"/>
          <xs:element minOccurs="0" name="EmployerInfo" type="EmployerInfoType"/>
          <xs:element minOccurs="0" name="ChainOfCustodyReasonType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available ChainOfCustodyReasonTypes can be obtained using typetables
                        webservice where tablename =ChainOfCustodyReasonType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="SpecimenTemp" type="xs:nonNegativeInteger">
            <xs:annotation>
              <xs:documentation>The available SpecimenTemps can be obtained using typetables webservice
                        where tablename =SpecimenTemp.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="SplitSpecimenCollection" type="xs:boolean"/>
          <xs:element minOccurs="0" name="SpecimenCollector" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="SpecimenCollectorSignatureOnFile" type="xs:boolean"/>
          <xs:element minOccurs="0" name="SpecimenTemperatureInRange" type="xs:boolean"/>
          <xs:element minOccurs="0" name="SpecimenTemperatureNotInRange" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionContactInfo">
        <xs:annotation>
          <xs:documentation>User Id is not required for creating and updating accession.User Id in MessageHeader will
                be used as accession contacts userId</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="UserId" type="types:DescriptionType"/>
          <xs:element name="ContactDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ContactInfo" type="types:NoteType"/>
          <xs:element minOccurs="0" name="FollowUpDate" type="xs:date"/>
          <xs:element minOccurs="0" name="FollowUpUserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PrintableNotes" type="types:NoteType"/>
          <xs:element minOccurs="0" name="PrintOnStatement" type="xs:boolean"/>
          <xs:element minOccurs="0" name="FollowUpComplete" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Voided" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PromisedPayments">
        <xs:sequence>
          <xs:element name="UserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ContactDate" type="xs:date"/>
          <xs:element minOccurs="0" name="DunningCycle" type="xs:positiveInteger"/>
          <xs:element minOccurs="0" name="DunningCycleAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="Note" type="types:NoteType"/>
          <xs:element minOccurs="0" name="PrintOnStatement" type="xs:boolean"/>
          <xs:element minOccurs="0" name="FollowUpComplete" type="xs:boolean"/>
          <xs:element minOccurs="0" name="PlanStatus" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="VoidUserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ReasonSystemEnded" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestQuestions">
        <xs:sequence>
          <xs:element name="Question" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available Questions can be obtained using typetables
                        webservice where tablename =Question.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Response" type="types:NoteType"/>
          <xs:element minOccurs="0" name="ContactMethod" type="types:NoteType">
            <xs:annotation>
              <xs:documentation>The available ContactMethodTypes can be obtained using typetables
                        webservice where tablename =ContactMethodType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetOrderedTest">
        <xs:sequence>
          <xs:element name="TestId" type="TestCodeIdType"/>
          <xs:element minOccurs="0" name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="AternativeTestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="Profile" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Modifiers" type="ModsTyp"/>
          <xs:element minOccurs="0" name="ManualPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ClientBilled" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LabMessages" type="GetLabMessage"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="DiagnosisCodes" type="DiagnosisCode"/>
          <xs:element minOccurs="0" name="Note" type="types:NoteType"/>
          <xs:element minOccurs="0" name="PlaceOfService" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="FinalReportDate" type="xs:date"/>
          <xs:element minOccurs="0" name="RenderingPhysician" type="Physician"/>
          <xs:element minOccurs="0" name="AbnReceived" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AbnRequired" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AbnReason" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AbnComment" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Units" type="types:UnitsType"/>
          <xs:element minOccurs="0" name="ProfileId" type="TestCodeIdType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TestQuestions" type="TestQuestions"/>
          <xs:element minOccurs="0" name="Result" type="types:NoteType"/>
          <xs:element minOccurs="0" name="ProcedureCode" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ProcedureName" type="types:ProcedureNameType"/>
          <xs:element name="BilledPrice" type="types:AmountType"/>
          <xs:element name="GrossPrice" type="types:AmountType"/>
          <xs:element name="ExpectedPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="PriceMethodType" type="types:DescriptionType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TestErrors" type="ErrorType"/>
          <xs:element minOccurs="0" name="StandingOrderId" type="types:NoteType"/>
          <xs:element minOccurs="0" name="RetroBilPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="TradeDiscAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="RetroTradeDiscAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ComponentBillPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ComponentGrossPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="AmbigDate" type="xs:date"/>
          <xs:element minOccurs="0" name="AmbigUser" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AmbigClientContact" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="NwaDocumentReceived" type="xs:boolean"/>
          <xs:element minOccurs="0" name="NwaClientAuth" type="xs:boolean"/>
          <xs:element minOccurs="0" name="NwaAuthDate" type="xs:date"/>
          <xs:element minOccurs="0" name="PayorPriority" type="PayorPriorityType"/>
          <xs:element minOccurs="0" name="AuthorizationNumber" type="types:AuthorizationNumberType"/>
          <xs:element minOccurs="0" name="Renal" type="types:RenalType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="DeletedDiagnosisCodes" type="DeletedDiagnosisCode"/>
          <xs:element minOccurs="0" name="LISTestTraceId" type="xs:positiveInteger"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TestRemarks" type="GetTestRemark"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateOrUpdateOrderedTest">
        <xs:sequence>
          <xs:element name="TestSequenceNumber" type="xs:positiveInteger">
            <xs:annotation>
              <xs:documentation>Unique number of each test on the accession.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="TransactionType" type="types:ShortStrType">
            <xs:annotation>
              <xs:documentation>Transaction type defined in XIFIN , this is used to find whether the test is
                        credit or debit , Use D/+ for debit, C/- for credit tests.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="TestId" type="TestCodeIdType"/>
          <xs:element minOccurs="0" name="AlternativeTestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="Modifiers" type="ModsTyp"/>
          <xs:element minOccurs="0" name="ManualPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ClientBilled" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LabMessages" type="CreateOrUpdateLabMessage"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="DiagnosisCodes" type="DiagnosisCode"/>
          <xs:element minOccurs="0" name="Note" type="types:NoteType"/>
          <xs:element minOccurs="0" name="PlaceOfService" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="FinalReportDate" type="xs:date"/>
          <xs:element minOccurs="0" name="RenderingPhysician" type="Physician"/>
          <xs:element minOccurs="0" name="StandingOrderId" type="types:NoteType"/>
          <xs:element minOccurs="0" name="AbnReceived" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AbnReason" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AbnComment" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Units" type="types:UnitsType"/>
          <xs:element minOccurs="0" name="ProfileId" type="TestCodeIdType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TestQuestions" type="TestQuestions"/>
          <xs:element minOccurs="0" name="Result" type="types:NoteType"/>
          <xs:element minOccurs="0" name="SplitPayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="AuthorizationNumber" type="types:AuthorizationNumberType"/>
          <xs:element minOccurs="0" name="Renal" type="types:RenalType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BillableProcedureCode">
        <xs:sequence>
          <xs:element name="ProcedureCode" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AccnProcSeqId" type="types:SeqIdType"/>
          <xs:element minOccurs="0" name="PlaceOfService" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Modifiers" type="ModsTyp"/>
          <xs:element minOccurs="0" name="UnitsBilled" type="types:UnitsType"/>
          <xs:element minOccurs="0" name="UnitsPaid" type="types:UnitsType"/>
          <xs:element minOccurs="0" name="BilledPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ExpectedPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="LabCost" type="types:AmountType"/>
          <xs:element minOccurs="0" name="RetroBillPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="RetroTradeDiscountAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="TradeDiscountAmount" type="types:AmountType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PaymentAndAdjustment" type="PaymentAndAdjustment"/>
          <xs:element minOccurs="0" name="PriceMethodType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DueAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="ExpectDueAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="SubmissionDate" type="xs:date"/>
          <xs:element minOccurs="0" name="DiagnosisCode1" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DiagnosisCode2" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DiagnosisCode3" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DiagnosisCode4" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AbnReceived" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Status" type="types:DescriptionType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProcedureErrors" type="ErrorType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BulkPaymentAndDenial">
        <xs:sequence>
          <xs:element minOccurs="0" name="ProcedureCode" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PaymentAndAdjustment" type="PaymentAndAdjustment"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BulkPaymentAndDenials">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="BulkPaymentAndDenial" type="BulkPaymentAndDenial"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="BulkDenials" type="ErrorType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateOrUpdateLabMessage">
        <xs:sequence>
          <xs:element name="Code" type="types:IdType">
            <xs:annotation>
              <xs:documentation>The available Codes can be obtained using typetables
                        webservice where tablename =TestMsg.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetLabMessage">
        <xs:sequence>
          <xs:element name="Code" type="types:IdType"/>
          <xs:element name="Description" type="types:DescriptionType"/>
          <xs:element name="MessageNote" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetTestRemark">
        <xs:sequence>
          <xs:element name="Code" type="types:IdType"/>
          <xs:element name="Description" type="types:DescriptionType"/>
          <xs:element name="MessageNote" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PaymentAndAdjustment">
        <xs:sequence>
          <xs:element name="Copay" type="types:AmountType"/>
          <xs:element name="CoInsurance" type="types:AmountType"/>
          <xs:element name="Deductible" type="types:AmountType"/>
          <xs:element name="PatientResponsibility" type="types:AmountType"/>
          <xs:element name="PaymentAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="PaymentComment" type="types:NoteType"/>
          <xs:element minOccurs="0" name="PaymentDate" type="xs:date"/>
          <xs:element minOccurs="0" name="PaymentType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AllowAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="BillAmountFromEob" type="types:AmountType"/>
          <xs:element minOccurs="0" name="UnitsPaid" type="types:UnitsType"/>
          <xs:element minOccurs="0" name="PayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PayorName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ReceiptId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DepositId" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="DepositBatchId" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="DepositBatchSeqId" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="CheckNumber" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ICN" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="UserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="BatchPosted" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ElectronicCardTransactionId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ElectronicCardType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ElectronicTransactionType" type="types:DescriptionType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Adjustment" type="Adjustment"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Denials" type="ErrorType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Adjustment">
        <xs:sequence>
          <xs:element name="AdjustmentCode" type="types:DescriptionType"/>
          <xs:element name="BillAdjustmentAmount" type="types:AmountType"/>
          <xs:element name="ExpectAdjustmentAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="AdjustmentComment" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="UserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AdjustmentDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Physicians">
        <xs:sequence>
          <xs:element minOccurs="0" name="Ordering" type="Physician"/>
          <xs:element minOccurs="0" name="Referring" type="Physician"/>
          <xs:element minOccurs="0" name="Primary" type="Physician"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="Physician">
        <xs:sequence>
          <xs:element minOccurs="0" name="NPI" type="types:NPIType"/>
          <xs:element minOccurs="0" name="Name" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="UPIN" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ErrorType">
        <xs:sequence>
          <xs:element name="ErrorCode" type="xs:int"/>
          <xs:element name="ReasonCode" type="types:IdType"/>
          <xs:element minOccurs="0" name="ErrorNote" type="types:NoteType"/>
          <xs:element name="Description" type="types:LongDescriptionType"/>
          <xs:element name="ErrorGroup" type="types:DescriptionType"/>
          <xs:element name="ErrorLevelType" type="types:DescriptionType"/>
          <xs:element name="ErrorDate" type="xs:date"/>
          <xs:element minOccurs="0" name="FixedDate" type="xs:date"/>
          <xs:element minOccurs="0" name="FieldName" type="xs:string"/>
          <xs:element minOccurs="0" name="FieldPattern" type="xs:string"/>
          <xs:element minOccurs="0" name="FiledErrorMessage" type="xs:string"/>
          <xs:element default="false" name="AccessionPayorField" type="xs:boolean"/>
          <xs:element minOccurs="0" name="DetailDescription" type="types:LongDescriptionType"/>
          <xs:element minOccurs="0" name="LetterText" type="types:NoteType"/>
          <xs:element minOccurs="0" name="FieldCurrentValue" type="xs:string"/>
          <xs:element minOccurs="0" name="UserFixableWithAcknowledgement" type="xs:boolean"/>
          <xs:element minOccurs="0" name="UserFixableByDocumentUpload" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionPayorErrorType">
        <xs:sequence>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element name="PayorPriority" type="types:PayorPriorityType"/>
          <xs:element maxOccurs="unbounded" name="Error" type="ErrorType"/>
          <xs:element minOccurs="0" name="ErrSeqId" type="types:SeqIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionTestErrorType">
        <xs:sequence>
          <xs:element name="TestId" type="TestCodeIdType"/>
          <xs:element minOccurs="0" name="TestSequenceNumber" type="xs:positiveInteger">
            <xs:annotation>
              <xs:documentation>The sequence number that was sent in create accession.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" name="Error" type="ErrorType"/>
          <xs:element default="false" minOccurs="0" name="BillToClientPermitted" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionProcedureErrorType">
        <xs:annotation>
          <xs:documentation>This section describes Accession Procedure Errors.It could have Zero or more repetitions.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="ProcedureCode" type="types:IdType"/>
          <xs:element name="PayorPriority" type="types:PayorPriorityType"/>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="DepositId" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="DepositBatchId" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="DepositBatchSeqId" type="xs:nonNegativeInteger"/>
          <xs:element maxOccurs="unbounded" name="Error" type="ErrorType"/>
          <xs:element default="false" minOccurs="0" name="BillToClientPermitted" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ErrSeqId" type="types:SeqIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DiagnosisCode">
        <xs:annotation>
          <xs:documentation>User Id is not required for creating and updating accession.User Id in MessageHeader will
                be used as accession diagnosis userId</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="DiagnosisCode" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="NarrativeDiag" type="types:NarrativeDiagTyp"/>
          <xs:element minOccurs="0" name="UserId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ClientContact" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ClientContactDate" type="xs:date"/>
          <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
          <xs:element minOccurs="0" name="DiagnosisCodeOrder" type="xs:positiveInteger"/>
          <xs:element minOccurs="0" name="Deleted" type="xs:boolean"/>
          <xs:element minOccurs="0" name="DocumentId" type="xs:string"/>
          <xs:element minOccurs="0" name="VoidType" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeletedDiagnosisCode">
        <xs:sequence>
          <xs:element name="DiagnosisCode" type="DiagnosisCode"/>
          <xs:element minOccurs="0" name="DiagnosisDescription" type="types:NarrativeDiagTyp"/>
          <xs:element name="DeletedDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ClientQuestion">
        <xs:sequence>
          <xs:element name="Question" type="QuestionType">
            <xs:annotation>
              <xs:documentation>The available Questions can be obtained using typetables
                        webservice where tablename =Question.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Response" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="QuestionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="AdditionalReportCopyType">
        <xs:sequence>
          <xs:element name="ClientId" type="types:IdType"/>
          <xs:element name="ContactMethodType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available ContactMethodTypes can be obtained using typetables
                        webservice where tablename =ContactMethodType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Name" type="types:NameIdType"/>
          <xs:element minOccurs="0" name="Address" type="types:AddressType"/>
          <xs:element minOccurs="0" name="Phone" type="types:PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="types:PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="types:EmailType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SpecimenInformationType">
        <xs:sequence>
          <xs:element minOccurs="0" name="Count" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="SpecimenContainerCode" type="types:IdType">
            <xs:annotation>
              <xs:documentation>The available SpecimenContainerCodes can be obtained using typetables
                        webservice where tablename =SpecimenContainerCode.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="SpecimenSourceDescription" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="SpecimenTempType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available SpecimenTempTypes can be obtained using typetables
                        webservice where tablename =SpecimenTempType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SpecimenQuestion" type="SpecimenQuestionsTyp"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PatientFastingType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="SpecimenQuestionsTyp">
        <xs:sequence>
          <xs:element name="QuestionId" type="QuestionType">
            <xs:annotation>
              <xs:documentation>The available QuestionIds can be obtained using typetables
                        webservice where tablename =Question.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Response" type="types:DescriptionType"/>
          <xs:element name="SpecimenType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>The available SpecimenTypes can be obtained using typetables
                        webservice where tablename =SpecimenType.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="OccurrenceCodeType">
        <xs:sequence>
          <xs:element name="OccurrenceCode" type="types:IdType">
            <xs:annotation>
              <xs:documentation>The available OccurrenceCodes can be obtained using typetables
                        webservice where ablename =OccurrenceCode.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="OccurrenceDate" type="xs:date"/>
          <xs:element minOccurs="0" name="SpecificPyrId" type="types:IdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ValueCodeType">
        <xs:sequence>
          <xs:element name="ValueCode" type="types:IdType">
            <xs:annotation>
              <xs:documentation>The available ValueCodes can be obtained using typetables
                        webservice where tablename =ValueCode.
                        The typetable webservice response returns the Id and description. In this webservice request
                        send the Id.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="ValueAmt" type="types:ShortStrType"/>
          <xs:element minOccurs="0" name="SpecificPyrId" type="types:IdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TravelFeeType">
        <xs:sequence>
          <xs:element minOccurs="0" name="RoundTripFromLab" type="xs:boolean"/>
          <xs:element minOccurs="0" name="TripMiles" type="types:AmountType"/>
          <xs:element minOccurs="0" name="TripStops" type="xs:nonNegativeInteger"/>
          <xs:element minOccurs="0" name="TripPatientCount" type="xs:nonNegativeInteger"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="LimitedCoveragePolicyDetails">
        <xs:sequence>
          <xs:element minOccurs="0" name="PolicyHeader" type="xs:string"/>
          <xs:element minOccurs="0" name="CoveredDiagnoses" type="xs:string"/>
          <xs:element minOccurs="0" name="NonCoveredDiagnoses" type="xs:string"/>
          <xs:element minOccurs="0" name="ExcludedDiagnoses" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="TestCodeIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:element name="ApplyEligibilityLogicRequest">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="ApplyEligibilityLogicRequestMessage" type="ApplyEligibilityLogicRequestMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ApplyEligibilityLogicRequestMessage">
        <xs:sequence>
          <xs:element name="AccessionId" type="types:AccessionIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="ApplyEligibilityLogicResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="ApplyEligibilityLogicResponseMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ApplyEligibilityLogicResponseMessage">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="EligibilityStatus" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="EligibilityStatusMessage" type="types:NoteType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CreateAccessionAdjustmentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="CreateAccessionAdjustment" type="AccessionAdjustmentType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CreateAccessionAdjustmentResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="BusinessObject">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessionAdjustmentErrors" type="AccessionAdjustmentErrorType"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddOverrideErrorRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AccessionId" type="types:AccessionIdType"/>
                  <xs:element name="PayorId" type="types:IdType"/>
                  <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
                  <xs:element minOccurs="0" name="AccnProcSeqId" type="types:SeqIdType"/>
                  <xs:element name="OverrideReasonCode" type="types:IdType"/>
                  <xs:element minOccurs="0" name="ErrorNote" type="types:NoteType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddOverrideErrorResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="Errors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddBadAddressErrorRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AccessionId" type="types:AccessionIdType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddBadAddressErrorResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="Errors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AccessionAdjustmentType">
        <xs:sequence>
          <xs:element name="AccessionId" type="types:AccessionIdType"/>
          <xs:element name="AdjustmentCodeId" type="types:AdjustmentCodeType"/>
          <xs:element name="AdustmentAmount" type="types:AmountType"/>
          <xs:element name="AdjustmentPyrAbbrev" type="types:AbbrevType"/>
          <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="AccnProcSeqId" type="types:SeqIdType"/>
          <xs:element minOccurs="0" name="AdjustmentNote" type="types:NoteType"/>
          <xs:element default="false" name="AdjustmentPrintNote" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccessionAdjustmentErrorType">
        <xs:sequence>
          <xs:element name="ReasonCode" type="xs:int"/>
          <xs:element minOccurs="0" name="ErrorMsg" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatientEstimationType">
        <xs:sequence>
          <xs:element name="EstimationId" type="xs:integer"/>
          <xs:element name="EstimationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="OrderId" type="types:OrderIdType"/>
          <xs:element minOccurs="0" name="EligTransId" type="types:EligTransIdType"/>
          <xs:element name="PayorId" type="types:PayorIdType"/>
          <xs:element name="PayorName" type="types:PayorNameType"/>
          <xs:element name="PatientResponsibility" type="types:AmountType"/>
          <xs:element name="PatientBillAmt" type="types:AmountType"/>
          <xs:element name="PatientExpAmt" type="types:AmountType"/>
          <xs:element maxOccurs="unbounded" name="PatientEstimationDetail" type="PatientEstimationDetailType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatientEstimationDetailType">
        <xs:sequence>
          <xs:element name="ProcCode" type="types:ProcCodeType"/>
          <xs:element name="Units" type="types:UnitsType"/>
          <xs:element name="BillAmt" type="types:AmountType"/>
          <xs:element name="ExpAmt" type="types:AmountType"/>
          <xs:element minOccurs="0" name="Mod1" type="xs:string"/>
          <xs:element minOccurs="0" name="ServiceType" type="xs:string"/>
          <xs:element minOccurs="0" name="CopayAmt" type="types:AmountType"/>
          <xs:element minOccurs="0" name="CoinsuranceAmt" type="types:AmountType"/>
          <xs:element minOccurs="0" name="CoinsuranceRate" type="xs:integer"/>
          <xs:element minOccurs="0" name="DeductibleAmt" type="types:AmountType"/>
          <xs:element minOccurs="0" name="RemainingAmt" type="types:AmountType"/>
          <xs:element minOccurs="0" name="AnnualAmt" type="types:AmountType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="Region">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:maxLength value="256"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SeqIdType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="28"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="256"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="EmailType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="EmailType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="RenalType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(Y|N)?"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AdjustmentCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="OrderIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EligTransIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="RequiredErrorType">
        <xs:sequence>
          <xs:element name="RequiredErrorCode" type="RequiredErrorCodeType"/>
          <xs:element name="RequiredErrorMessage" type="RequiredErrorMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="RequiredErrorCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999999999"/>
          <xs:minExclusive value="-9999999999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="RequiredErrorMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="500"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="UpdateEPAccessionRequest">
    <wsdl:part element="tns:UpdateEPAccessionRequest" name="UpdateEPAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAccessionResponse">
    <wsdl:part element="tns:CreateAccessionResponse" name="CreateAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ApplyEligibilityLogicRequest">
    <wsdl:part element="tns:ApplyEligibilityLogicRequest" name="ApplyEligibilityLogicRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAccessionResponse">
    <wsdl:part element="tns:GetAccessionResponse" name="GetAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="PerformBillingRulesRequest">
    <wsdl:part element="tns:PerformBillingRulesRequest" name="PerformBillingRulesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAccessionAdjustmentResponse">
    <wsdl:part element="tns:CreateAccessionAdjustmentResponse" name="CreateAccessionAdjustmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddOverrideErrorResponse">
    <wsdl:part element="tns:AddOverrideErrorResponse" name="AddOverrideErrorResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAccessionRequest">
    <wsdl:part element="tns:UpdateAccessionRequest" name="UpdateAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddOverrideErrorRequest">
    <wsdl:part element="tns:AddOverrideErrorRequest" name="AddOverrideErrorRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="PerformBillingRulesResponse">
    <wsdl:part element="tns:PerformBillingRulesResponse" name="PerformBillingRulesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAccessionResponse">
    <wsdl:part element="tns:UpdateAccessionResponse" name="UpdateAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAccessionAdjustmentRequest">
    <wsdl:part element="tns:CreateAccessionAdjustmentRequest" name="CreateAccessionAdjustmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAccessionRequest">
    <wsdl:part element="tns:CreateAccessionRequest" name="CreateAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ApplyEligibilityLogicResponse">
    <wsdl:part element="tns:ApplyEligibilityLogicResponse" name="ApplyEligibilityLogicResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddBadAddressErrorRequest">
    <wsdl:part element="tns:AddBadAddressErrorRequest" name="AddBadAddressErrorRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAccessionRequest">
    <wsdl:part element="tns:GetAccessionRequest" name="GetAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEPAccessionResponse">
    <wsdl:part element="tns:GetEPAccessionResponse" name="GetEPAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddBadAddressErrorResponse">
    <wsdl:part element="tns:AddBadAddressErrorResponse" name="AddBadAddressErrorResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEPAccessionRequest">
    <wsdl:part element="tns:GetEPAccessionRequest" name="GetEPAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ValidateAccessionRequest">
    <wsdl:part element="tns:ValidateAccessionRequest" name="ValidateAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ValidateAccessionResponse">
    <wsdl:part element="tns:ValidateAccessionResponse" name="ValidateAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="accession">
    <wsdl:operation name="UpdateEPAccession">
      <wsdl:input message="tns:UpdateEPAccessionRequest" name="UpdateEPAccessionRequest"></wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="CreateAccession">
      <wsdl:input message="tns:CreateAccessionRequest" name="CreateAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAccessionResponse" name="CreateAccessionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ApplyEligibilityLogic">
      <wsdl:input message="tns:ApplyEligibilityLogicRequest" name="ApplyEligibilityLogicRequest"></wsdl:input>
      <wsdl:output message="tns:ApplyEligibilityLogicResponse" name="ApplyEligibilityLogicResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAccession">
      <wsdl:input message="tns:GetAccessionRequest" name="GetAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:GetAccessionResponse" name="GetAccessionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="PerformBillingRules">
      <wsdl:input message="tns:PerformBillingRulesRequest" name="PerformBillingRulesRequest"></wsdl:input>
      <wsdl:output message="tns:PerformBillingRulesResponse" name="PerformBillingRulesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAccessionAdjustment">
      <wsdl:input message="tns:CreateAccessionAdjustmentRequest" name="CreateAccessionAdjustmentRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAccessionAdjustmentResponse" name="CreateAccessionAdjustmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddOverrideError">
      <wsdl:input message="tns:AddOverrideErrorRequest" name="AddOverrideErrorRequest"></wsdl:input>
      <wsdl:output message="tns:AddOverrideErrorResponse" name="AddOverrideErrorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAccession">
      <wsdl:input message="tns:UpdateAccessionRequest" name="UpdateAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAccessionResponse" name="UpdateAccessionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddBadAddressError">
      <wsdl:input message="tns:AddBadAddressErrorRequest" name="AddBadAddressErrorRequest"></wsdl:input>
      <wsdl:output message="tns:AddBadAddressErrorResponse" name="AddBadAddressErrorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEPAccession">
      <wsdl:input message="tns:GetEPAccessionRequest" name="GetEPAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:GetEPAccessionResponse" name="GetEPAccessionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ValidateAccession">
      <wsdl:input message="tns:ValidateAccessionRequest" name="ValidateAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:ValidateAccessionResponse" name="ValidateAccessionResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="accessionSoap11" type="tns:accession">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="UpdateEPAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateEPAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="CreateAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ApplyEligibilityLogic">
      <soap:operation soapAction=""/>
      <wsdl:input name="ApplyEligibilityLogicRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ApplyEligibilityLogicResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="PerformBillingRules">
      <soap:operation soapAction=""/>
      <wsdl:input name="PerformBillingRulesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="PerformBillingRulesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAccessionAdjustment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAccessionAdjustmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAccessionAdjustmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddOverrideError">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddOverrideErrorRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddOverrideErrorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddBadAddressError">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddBadAddressErrorRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddBadAddressErrorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEPAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEPAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEPAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ValidateAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="ValidateAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ValidateAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="accessionService">
    <wsdl:port binding="tns:accessionSoap11" name="accessionSoap11">
      <soap:address location="https://www.xifinqa.com/prod/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="CreateAccession" bindingOperationName="CreateAccession" type="Request-Response" outputName="CreateAccessionResponse" inputName="CreateAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f2df4e7e-d4d0-4ae9-8889-a011410a8336"><con:settings/><con:call name="Request 1" id="91aa5b4f-8fd5-407e-9ffa-6f85b30af9b8"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="CreateANewAccn" wssPasswordType="PasswordDigest" id="864be3c4-e79c-41e5-b797-90f55e9c2f6b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>AccnWSSmokeTest003</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>2014-01-01</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>100</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>PTFNAME</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>PTLNAME</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>1990-01-01</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PT ADDR1</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PT ADDR2</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>92127</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>2014-02-02</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>1386622462</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>219</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>ACME</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>2014-03-03</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>250.00</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>ACME</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>MCRR</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>A123456</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="08e0ce5d-7747-4906-90e6-ef3d9c931d75"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>d</acc:TransactionType>
                  <acc:TestId>3000</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>ACME</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>2017-02-01</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4" id="db4f5bd7-a67a-4ed4-912b-8461fd27ce14"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <!--type: string-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <!--type: positiveInteger-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <!--anonymous type-->
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <!--type: string-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <!--type: string-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <!--type: AccessionIdType-->
               <acc:AccessionId>?</acc:AccessionId>
               <!--type: boolean-->
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <!--type: DescriptionType-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <!--type: date-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <!--type: date-->
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <!--type: TimeOfService-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <!--type: date-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <!--type: date-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <!--type: IdType-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <!--type: NameIdType-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <!--type: date-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <!--type: SSNType-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <!--type: PatientFastingType-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <!--type: SmallInt-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <!--type: CommentsType-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <!--type: PatientStatusType-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <!--type: PatientIdType-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <!--type: PatientIdType-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <!--type: date-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <!--type: date-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <!--type: PhoneNumberType-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:UserId>?</acc:UserId>
                  <!--type: date-->
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <!--type: IdType-->
                  <acc:ClientId>?</acc:ClientId>
                  <!--type: DescriptionType-->
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <!--type: NameIdType-->
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <!--type: PhoneNumberType-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <!--type: PhoneNumberType-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <!--type: QuestionType-->
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <!--type: DescriptionType-->
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <!--type: string-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <!--type: DescriptionType-->
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <!--type: DescriptionType-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <!--type: string-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <!--type: positiveInteger-->
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <!--type: ShortStrType-->
                  <acc:TransactionType>?</acc:TransactionType>
                  <!--type: IdType-->
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <!--type: TestNameType-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <!--type: IdType-->
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <!--type: NarrativeDiagTyp-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <!--type: date-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <!--type: positiveInteger-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <!--type: boolean-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <!--type: UnitsType-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <!--type: DescriptionType-->
                     <acc:Question>?</acc:Question>
                     <!--type: NoteType-->
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <!--type: NoteType-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <!--type: AuthorizationNumberType-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <!--type: NarrativeDiagTyp-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <!--type: positiveInteger-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <!--type: DescriptionType-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <!--type: string-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <!--type: QuestionType-->
                     <acc:QuestionId>?</acc:QuestionId>
                     <!--type: DescriptionType-->
                     <acc:Response>?</acc:Response>
                     <!--type: DescriptionType-->
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <!--type: PayorPriorityType-->
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <!--type: IdType-->
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <!--type: SSNType-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <!--type: DelayReasonCodeType-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <!--type: DescriptionType-->
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <!--type: DescriptionType-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <!--type: string-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <!--type: DescriptionType-->
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <!--type: DescriptionType-->
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <!--type: date-->
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <!--type: positiveInteger-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <!--type: DemonstrationProjectIdType-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <!--type: IdType-->
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <!--type: IdType-->
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <!--type: ClientProductType-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="cb83277b-b559-47d9-8970-0455d86ef391" name="Request 5"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <!--type: string-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <!--type: positiveInteger-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <!--anonymous type-->
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <!--type: string-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <!--type: string-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <!--type: AccessionIdType-->
               <acc:AccessionId>?</acc:AccessionId>
               <!--type: boolean-->
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <!--type: DescriptionType-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <!--type: date-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <!--type: date-->
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <!--type: TimeOfService-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <!--type: date-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <!--type: date-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <!--type: IdType-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <!--type: NameIdType-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <!--type: NameIdType-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <!--type: date-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <!--type: SSNType-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <!--type: PatientFastingType-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <!--type: SmallInt-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <!--type: CommentsType-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <!--type: PatientStatusType-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <!--type: PatientIdType-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <!--type: PatientIdType-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <!--type: date-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <!--type: date-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <!--type: PhoneNumberType-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:UserId>?</acc:UserId>
                  <!--type: date-->
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <!--type: IdType-->
                  <acc:ClientId>?</acc:ClientId>
                  <!--type: DescriptionType-->
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <!--type: NameIdType-->
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <!--type: PhoneNumberType-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <!--type: PhoneNumberType-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <!--type: QuestionType-->
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <!--type: DescriptionType-->
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <!--type: string-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <!--type: DescriptionType-->
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <!--type: DescriptionType-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <!--type: string-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <!--type: positiveInteger-->
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <!--type: ShortStrType-->
                  <acc:TransactionType>?</acc:TransactionType>
                  <!--type: IdType-->
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <!--type: TestNameType-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <!--type: IdType-->
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <!--type: NarrativeDiagTyp-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <!--type: date-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <!--type: positiveInteger-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <!--type: boolean-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <!--type: NPIType-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <!--type: string-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <!--type: UnitsType-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <!--type: DescriptionType-->
                     <acc:Question>?</acc:Question>
                     <!--type: NoteType-->
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <!--type: NoteType-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <!--type: AuthorizationNumberType-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <!--type: AmountType-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <!--type: NarrativeDiagTyp-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <!--type: positiveInteger-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <!--type: boolean-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <!--type: DescriptionType-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <!--type: string-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <!--type: nonNegativeInteger-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <!--type: QuestionType-->
                     <acc:QuestionId>?</acc:QuestionId>
                     <!--type: DescriptionType-->
                     <acc:Response>?</acc:Response>
                     <!--type: DescriptionType-->
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <!--type: PayorPriorityType-->
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <!--type: IdType-->
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <!--type: string-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <!--type: SSNType-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <!--type: NoteType-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <!--type: DescriptionType-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <!--type: DelayReasonCodeType-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <!--type: DescriptionType-->
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <!--type: DescriptionType-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <!--type: DescriptionType-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <!--type: PhoneNumberType-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <!--type: string-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <!--type: DescriptionType-->
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <!--type: DescriptionType-->
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <!--type: date-->
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <!--type: positiveInteger-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <!--type: DemonstrationProjectIdType-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <!--type: IdType-->
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <!--type: date-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <!--type: IdType-->
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <!--type: ShortStrType-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <!--type: IdType-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <!--type: ClientProductType-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <!--type: boolean-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="b4127468-dbfe-4e6e-914a-376e415c6435" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:CreateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:CreateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:CreateAccession>\r
         </acc:Payload>\r
      </acc:CreateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/></con:call><con:call id="70d54f48-4665-4092-b83a-231dc983a66b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:CreateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:CreateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:CreateAccession>\r
         </acc:Payload>\r
      </acc:CreateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAccession" bindingOperationName="GetAccession" type="Request-Response" outputName="GetAccessionResponse" inputName="GetAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="736540c8-b1a3-4b3a-a9a0-ca5ad877ca89"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="3d44f4e0-41b1-4a0e-9575-5b39a63d45b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:GetAccessionRequest>
         <msg:MessageHeader>
         <!--Optional:-->
           

            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:AccessionId>A201202190203042</acc:AccessionId>
         </acc:Payload>
      </acc:GetAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="c23a895d-8a75-47f4-90a0-60bd096104d3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:GetAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
         </acc:Payload>\r
      </acc:GetAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetAccessionRequest"/></con:call><con:call id="71427698-ade6-401c-b9ae-398927537428" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:GetAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
         </acc:Payload>\r
      </acc:GetAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetAccessionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEPAccession" bindingOperationName="GetEPAccession" type="Request-Response" outputName="GetEPAccessionResponse" inputName="GetEPAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4f31d05b-55a1-460a-85a5-45648710b76b"><con:settings/><con:call name="Request 1_AMS" wssPasswordType="PasswordDigest" id="c16404e5-d18e-49ad-86c8-323b27d55d53"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:GetEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>654</msg:SequenceNumber>
             <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:GetEPAccessionRequestMessage>
               <acc:AccessionId>100001540044</acc:AccessionId>
               <acc:CorrespondanceType>Client</acc:CorrespondanceType>
               <!--Optional:-->
               <acc:IncludeAccessionDetails>true</acc:IncludeAccessionDetails>
               <!--Optional:-->
               <acc:IncludeLimitedCoveragePolicyDetails>false</acc:IncludeLimitedCoveragePolicyDetails>
            </acc:GetEPAccessionRequestMessage>
         </acc:Payload>
      </acc:GetEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>webservicetest</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="38b0c66f-1bc5-48e3-91aa-b9dd8f9ac328"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:GetEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:GetEPAccessionRequestMessage>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:CorrespondanceType>?</acc:CorrespondanceType>
               <!--Optional:-->
               <acc:IncludeAccessionDetails>false</acc:IncludeAccessionDetails>
               <!--Optional:-->
               <acc:IncludeLimitedCoveragePolicyDetails>false</acc:IncludeLimitedCoveragePolicyDetails>
            </acc:GetEPAccessionRequestMessage>
         </acc:Payload>
      </acc:GetEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 1_Clndoc" wssPasswordType="PasswordDigest" id="ac347836-c6ff-4532-9fe1-eec9fa7237f4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:GetEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>654</msg:SequenceNumber>
             <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:GetEPAccessionRequestMessage>
               <acc:AccessionId>2014104855</acc:AccessionId>
               <acc:CorrespondanceType>Client</acc:CorrespondanceType>
               <!--Optional:-->
               <acc:IncludeAccessionDetails>true</acc:IncludeAccessionDetails>
               <!--Optional:-->
               <acc:IncludeLimitedCoveragePolicyDetails>false</acc:IncludeLimitedCoveragePolicyDetails>
            </acc:GetEPAccessionRequestMessage>
         </acc:Payload>
      </acc:GetEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="041e9d47-5fa5-4db5-9a2c-8371ab316dc5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:GetEPAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:GetEPAccessionRequestMessage>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:CorrespondanceType>?</acc:CorrespondanceType>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionDetails>false</acc:IncludeAccessionDetails>\r
               <!--Optional:-->\r
               <acc:IncludeLimitedCoveragePolicyDetails>false</acc:IncludeLimitedCoveragePolicyDetails>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionError>true</acc:IncludeAccessionError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionTestError>true</acc:IncludeAccessionTestError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionProcedureError>true</acc:IncludeAccessionProcedureError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionPayorError>true</acc:IncludeAccessionPayorError>\r
               <!--Optional:-->\r
               <acc:IncludeBillOtherPartyDetails>false</acc:IncludeBillOtherPartyDetails>\r
            </acc:GetEPAccessionRequestMessage>\r
         </acc:Payload>\r
      </acc:GetEPAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetEPAccessionRequest"/></con:call><con:call id="0f7d63c3-7f5a-47aa-8600-08ad0e6fee87" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:GetEPAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:GetEPAccessionRequestMessage>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:CorrespondanceType>?</acc:CorrespondanceType>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionDetails>false</acc:IncludeAccessionDetails>\r
               <!--Optional:-->\r
               <acc:IncludeLimitedCoveragePolicyDetails>false</acc:IncludeLimitedCoveragePolicyDetails>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionError>true</acc:IncludeAccessionError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionTestError>true</acc:IncludeAccessionTestError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionProcedureError>true</acc:IncludeAccessionProcedureError>\r
               <!--Optional:-->\r
               <acc:IncludeAccessionPayorError>true</acc:IncludeAccessionPayorError>\r
               <!--Optional:-->\r
               <acc:IncludeBillOtherPartyDetails>false</acc:IncludeBillOtherPartyDetails>\r
            </acc:GetEPAccessionRequestMessage>\r
         </acc:Payload>\r
      </acc:GetEPAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/GetEPAccessionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAccession" bindingOperationName="UpdateAccession" type="Request-Response" outputName="UpdateAccessionResponse" inputName="UpdateAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="a5af008b-8714-4cb5-b3f4-b37038a25a5f"><con:settings/><con:call name="Request 1" id="e044fbd1-929e-4195-a6b5-ff7b4a0898b0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:UpdateAccession>
         </acc:Payload>
      </acc:UpdateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="be091ac1-fe0b-494c-a964-129a21da467f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:UpdateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:UpdateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:UpdateAccession>\r
         </acc:Payload>\r
      </acc:UpdateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateAccessionRequest"/></con:call><con:call id="38d33e97-b771-4e76-9e2a-ca83b78e358c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:UpdateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:UpdateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:UpdateAccession>\r
         </acc:Payload>\r
      </acc:UpdateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateAccessionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateEPAccession" bindingOperationName="UpdateEPAccession" type="One-Way" inputName="UpdateEPAccessionRequest" sendsAttachments="false" anonymous="optional" id="7a0cbcf4-3845-40a3-9f10-a097f8551e9b"><con:settings/><con:call name="FixAccnProcErr" wssPasswordType="PasswordDigest" id="07cfa318-926b-4ed7-840e-3b4db850af0a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>888999000</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>A201108250203060</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>2011-08-25</acc:DateOfService>
               <!--Optional:-->
               <acc:AdmitDate>2011-08-25</acc:AdmitDate>

            </acc:UpdateAccession>
            <!--Zero or more repetitions:-->
            <acc:ManualErrorFixes>
               <acc:ReasonCode>PROCAUTH</acc:ReasonCode>
               <acc:ErrorType>PROCEDURE</acc:ErrorType>
               <!--You have a CHOICE of the next 3 items at this level-->
               <!--Optional:-->
               <!--Optional:-->
               <acc:AccessionProcedureErrorReference>
                  <acc:procedureId>82465</acc:procedureId>
               </acc:AccessionProcedureErrorReference>
               <!--Optional:-->
               <acc:FixNote>yli test</acc:FixNote>
            </acc:ManualErrorFixes>
         </acc:Payload>
      </acc:UpdateEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="9573674d-8ebf-46ef-ae43-1c292572fc6e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  
                  <!--Optional:-->
                  <acc:Person>
                     
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
               </acc:Person>
      
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:UpdateAccession>
            <!--Zero or more repetitions:-->
            <acc:ManualErrorFixes>
               <acc:ReasonCode>?</acc:ReasonCode>
               <acc:ErrorType>?</acc:ErrorType>
               <!--You have a CHOICE of the next 3 items at this level-->
               <!--Optional:-->
               <acc:AccessionPayorErrorReference>
                  <!--Optional:-->
                  <acc:payorPriority>?</acc:payorPriority>
               </acc:AccessionPayorErrorReference>
               <!--Optional:-->
               <acc:AccessionProcedureErrorReference>
                  <acc:procedureId>?</acc:procedureId>
               </acc:AccessionProcedureErrorReference>
               <!--Optional:-->
               <acc:AccessionTestErrorReference>
                  <acc:testId>?</acc:testId>
               </acc:AccessionTestErrorReference>
               <!--Optional:-->
               <acc:FixNote>?</acc:FixNote>
            </acc:ManualErrorFixes>
         </acc:Payload>
      </acc:UpdateEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="FixAccnPyrErr" wssPasswordType="PasswordDigest" id="4d6592b3-96da-4cbe-a9ee-19845650071c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>888999000</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>A2011122502030224</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>2011-12-25</acc:DateOfService>
               <!--Optional:-->
               <acc:AdmitDate>2011-12-25</acc:AdmitDate>

            </acc:UpdateAccession>
            <!--Zero or more repetitions:-->
            <acc:ManualErrorFixes>
               <acc:ReasonCode>PLANNAME</acc:ReasonCode>
               <acc:ErrorType>PROCEDURE</acc:ErrorType>
               <!--You have a CHOICE of the next 3 items at this level-->
               <!--Optional:-->
               <!--Optional:-->
               <acc:AccessionPayorErrorReference>
                  <!--Optional:-->
                  <acc:payorPriority>?</acc:payorPriority>
               </acc:AccessionPayorErrorReference>
               <!--Optional:-->
               <acc:FixNote>yli test</acc:FixNote>
            </acc:ManualErrorFixes>
         </acc:Payload>
      </acc:UpdateEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4" id="8a999db7-ebfe-4c5b-9afe-311161cc709d"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateEPAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:UpdateAccession>
            <!--Zero or more repetitions:-->
            <acc:ManualErrorFixes>
               <acc:ReasonCode>?</acc:ReasonCode>
               <acc:ErrorType>?</acc:ErrorType>
               <!--You have a CHOICE of the next 3 items at this level-->
               <!--Optional:-->
               <acc:AccessionPayorErrorReference>
                  <!--Optional:-->
                  <acc:payorPriority>?</acc:payorPriority>
               </acc:AccessionPayorErrorReference>
               <!--Optional:-->
               <acc:AccessionProcedureErrorReference>
                  <acc:procedureId>?</acc:procedureId>
               </acc:AccessionProcedureErrorReference>
               <!--Optional:-->
               <acc:AccessionTestErrorReference>
                  <acc:testId>?</acc:testId>
               </acc:AccessionTestErrorReference>
               <!--Optional:-->
               <acc:FixNote>?</acc:FixNote>
            </acc:ManualErrorFixes>
         </acc:Payload>
      </acc:UpdateEPAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="cb06471e-8aed-41b2-be53-0d8e3dbb245b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:UpdateEPAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:UpdateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:UpdateAccession>\r
            <!--Zero or more repetitions:-->\r
            <acc:ManualErrorFixes>\r
               <acc:ReasonCode>?</acc:ReasonCode>\r
               <acc:ErrorType>?</acc:ErrorType>\r
               <!--You have a CHOICE of the next 3 items at this level-->\r
               <!--Optional:-->\r
               <acc:AccessionPayorErrorReference>\r
                  <!--Optional:-->\r
                  <acc:payorPriority>?</acc:payorPriority>\r
               </acc:AccessionPayorErrorReference>\r
               <!--Optional:-->\r
               <acc:AccessionProcedureErrorReference>\r
                  <acc:procedureId>?</acc:procedureId>\r
               </acc:AccessionProcedureErrorReference>\r
               <!--Optional:-->\r
               <acc:AccessionTestErrorReference>\r
                  <acc:testId>?</acc:testId>\r
               </acc:AccessionTestErrorReference>\r
               <!--Optional:-->\r
               <acc:FixErrorByDocumentUpload>false</acc:FixErrorByDocumentUpload>\r
               <!--Optional:-->\r
               <acc:FixNote>?</acc:FixNote>\r
            </acc:ManualErrorFixes>\r
         </acc:Payload>\r
      </acc:UpdateEPAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/></con:call><con:call id="07e9f35e-64cd-49b1-b8ea-96c6926ce24b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:UpdateEPAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:UpdateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:UpdateAccession>\r
            <!--Zero or more repetitions:-->\r
            <acc:ManualErrorFixes>\r
               <acc:ReasonCode>?</acc:ReasonCode>\r
               <acc:ErrorType>?</acc:ErrorType>\r
               <!--You have a CHOICE of the next 3 items at this level-->\r
               <!--Optional:-->\r
               <acc:AccessionPayorErrorReference>\r
                  <!--Optional:-->\r
                  <acc:payorPriority>?</acc:payorPriority>\r
               </acc:AccessionPayorErrorReference>\r
               <!--Optional:-->\r
               <acc:AccessionProcedureErrorReference>\r
                  <acc:procedureId>?</acc:procedureId>\r
               </acc:AccessionProcedureErrorReference>\r
               <!--Optional:-->\r
               <acc:AccessionTestErrorReference>\r
                  <acc:testId>?</acc:testId>\r
               </acc:AccessionTestErrorReference>\r
               <!--Optional:-->\r
               <acc:FixErrorByDocumentUpload>false</acc:FixErrorByDocumentUpload>\r
               <!--Optional:-->\r
               <acc:FixNote>?</acc:FixNote>\r
            </acc:ManualErrorFixes>\r
         </acc:Payload>\r
      </acc:UpdateEPAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/UpdateEPAccessionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ValidateAccession" bindingOperationName="ValidateAccession" type="Request-Response" outputName="ValidateAccessionResponse" inputName="ValidateAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="82382b13-215b-41f1-b371-fc913134fe86"><con:settings/><con:call name="Request 1" id="04d8d7a8-7576-4187-8260-8d889f3bf02b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:ValidateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:ValidateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:ValidateAccession>
         </acc:Payload>
      </acc:ValidateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ValidateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" wssPasswordType="" id="4a5f5ea3-6109-4ded-a444-96881dce8dd3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:ValidateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:ValidateAccession>
               <acc:AccessionId>QATESTER20141205122635816</acc:AccessionId>
               <acc:IgnoreErrors>false</acc:IgnoreErrors>
               <acc:DateOfService>2014-12-05</acc:DateOfService>
            </acc:ValidateAccession>
         </acc:Payload>
      </acc:ValidateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ValidateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="ce158a17-d5dd-45af-b211-87c33aeb925c"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://www.xifinqa.com/prod/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:ValidateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:ValidateAccession>
               <acc:AccessionId>?</acc:AccessionId>
               <acc:IgnoreErrors>?</acc:IgnoreErrors>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:ReceiptDate>?</acc:ReceiptDate>
               <acc:DateOfService>?</acc:DateOfService>
               <!--Optional:-->
               <acc:TimeOfService>?</acc:TimeOfService>
               <!--Optional:-->
               <acc:AdmitDate>?</acc:AdmitDate>
               <!--Optional:-->
               <acc:DischargeDate>?</acc:DischargeDate>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--Optional:-->
                  <acc:PatientId>?</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>?</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>?</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>?</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>?</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>?</typ:Gender>
                     <!--Optional:-->
                     <typ:SSN>?</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </typ:Address>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:Person>
                  <!--Optional:-->
                  <acc:PatientType>?</acc:PatientType>
                  <!--Optional:-->
                  <acc:Fasting>?</acc:Fasting>
                  <!--Optional:-->
                  <acc:PatientLocation>?</acc:PatientLocation>
                  <!--Optional:-->
                  <acc:IndigentPercent>?</acc:IndigentPercent>
                  <!--Optional:-->
                  <acc:OnsetDate>?</acc:OnsetDate>
                  <!--Optional:-->
                  <acc:OnsetType>?</acc:OnsetType>
                  <!--Optional:-->
                  <acc:AdmissionSource>?</acc:AdmissionSource>
                  <!--Optional:-->
                  <acc:AdmissionType>?</acc:AdmissionType>
                  <!--Optional:-->
                  <acc:AccidentCause>?</acc:AccidentCause>
                  <!--Optional:-->
                  <acc:AccidentState>?</acc:AccidentState>
                  <!--Optional:-->
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>
                  <!--Optional:-->
                  <acc:GravidaNumber>?</acc:GravidaNumber>
                  <!--Optional:-->
                  <acc:Pregnancy>?</acc:Pregnancy>
                  <!--Optional:-->
                  <acc:MaritalStatus>?</acc:MaritalStatus>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:PatientStatusType>?</acc:PatientStatusType>
                  <!--Optional:-->
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>
                  <!--Optional:-->
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>
               <!--Optional:-->
               <acc:FinalReportedDate>?</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Ordering>
                  <!--Optional:-->
                  <acc:Referring>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Referring>
                  <!--Optional:-->
                  <acc:Primary>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:Primary>
               </acc:Physicians>
               <!--Optional:-->
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>
               <!--Optional:-->
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>
               <!--Optional:-->
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>
               <!--Optional:-->
               <acc:CallBack>?</acc:CallBack>
               <!--Optional:-->
               <acc:CallBackPhone>?</acc:CallBackPhone>
               <!--Optional:-->
               <acc:STAT>?</acc:STAT>
               <!--Zero or more repetitions:-->
               <acc:AccessionContactInfo>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <acc:ContactDate>?</acc:ContactDate>
                  <!--Optional:-->
                  <acc:ContactInfo>?</acc:ContactInfo>
                  <!--Optional:-->
                  <acc:FollowUpDate>?</acc:FollowUpDate>
                  <!--Optional:-->
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>
                  <!--Optional:-->
                  <acc:PrintableNotes>?</acc:PrintableNotes>
                  <!--Optional:-->
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>
                  <!--Optional:-->
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>
                  <!--Optional:-->
                  <acc:Voided>?</acc:Voided>
               </acc:AccessionContactInfo>
               <!--Zero or more repetitions:-->
               <acc:AdditionalReportCopy>
                  <acc:ClientId>?</acc:ClientId>
                  <acc:ContactMethodType>?</acc:ContactMethodType>
                  <acc:Name>?</acc:Name>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>?</acc:Phone>
                  <!--Optional:-->
                  <acc:Fax>?</acc:Fax>
                  <!--Optional:-->
                  <acc:Email>?</acc:Email>
               </acc:AdditionalReportCopy>
               <!--Zero or more repetitions:-->
               <acc:ClientQuestions>
                  <acc:Question>?</acc:Question>
                  <!--Optional:-->
                  <acc:Response>?</acc:Response>
               </acc:ClientQuestions>
               <!--Optional:-->
               <acc:ClinicalTrial>
                  <acc:TrialName>?</acc:TrialName>
                  <!--Optional:-->
                  <acc:EncounterName>?</acc:EncounterName>
                  <!--Optional:-->
                  <acc:EncounterDate>?</acc:EncounterDate>
               </acc:ClinicalTrial>
               <!--Optional:-->
               <acc:ChainOfCustody>
                  <!--Optional:-->
                  <acc:MroName>?</acc:MroName>
                  <!--Optional:-->
                  <acc:MroAddress>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:MroAddress>
                  <!--Optional:-->
                  <acc:MroContact>
                     <!--Optional:-->
                     <typ:ContactName>?</typ:ContactName>
                     <!--Optional:-->
                     <typ:Phone>?</typ:Phone>
                     <!--Optional:-->
                     <typ:Fax>?</typ:Fax>
                     <!--Optional:-->
                     <typ:Email>?</typ:Email>
                  </acc:MroContact>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Optional:-->
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>
                  <!--Optional:-->
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>
                  <!--Optional:-->
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>
                  <!--Optional:-->
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>
                  <!--Optional:-->
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>
                  <!--Optional:-->
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>
               </acc:ChainOfCustody>
               <!--Optional:-->
               <acc:DialysisInfo>
                  <!--Optional:-->
                  <acc:DialysisType>?</acc:DialysisType>
                  <!--Optional:-->
                  <acc:Medication>?</acc:Medication>
               </acc:DialysisInfo>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>
                  <acc:TransactionType>?</acc:TransactionType>
                  <acc:TestId>?</acc:TestId>
                  <!--Optional:-->
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
                     <acc:Mod1>?</acc:Mod1>
                     <!--Optional:-->
                     <acc:Mod2>?</acc:Mod2>
                     <!--Optional:-->
                     <acc:Mod3>?</acc:Mod3>
                     <!--Optional:-->
                     <acc:Mod4>?</acc:Mod4>
                  </acc:Modifiers>
                  <!--Optional:-->
                  <acc:ManualPrice>?</acc:ManualPrice>
                  <!--Optional:-->
                  <acc:ClientBilled>?</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>?</acc:Code>
                  </acc:LabMessages>
                  <!--Zero or more repetitions:-->
                  <acc:DiagnosisCodes>
                     <!--Optional:-->
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>
                     <!--Optional:-->
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>
                     <!--Optional:-->
                     <acc:UserId>?</acc:UserId>
                     <!--Optional:-->
                     <acc:ClientContact>?</acc:ClientContact>
                     <!--Optional:-->
                     <acc:ClientContactDate>?</acc:ClientContactDate>
                     <!--Optional:-->
                     <acc:Comment>?</acc:Comment>
                     <!--Optional:-->
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                     <!--Optional:-->
                     <acc:Deleted>?</acc:Deleted>
                  </acc:DiagnosisCodes>
                  <!--Optional:-->
                  <acc:Note>?</acc:Note>
                  <!--Optional:-->
                  <acc:PlaceOfService>?</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>?</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:RenderingPhysician>
                     <!--Optional:-->
                     <acc:NPI>?</acc:NPI>
                     <!--Optional:-->
                     <acc:Name>?</acc:Name>
                     <!--Optional:-->
                     <acc:UPIN>?</acc:UPIN>
                  </acc:RenderingPhysician>
                  <!--Optional:-->
                  <acc:StandingOrderId>?</acc:StandingOrderId>
                  <!--Optional:-->
                  <acc:AbnReceived>?</acc:AbnReceived>
                  <!--Optional:-->
                  <acc:AbnReason>?</acc:AbnReason>
                  <!--Optional:-->
                  <acc:AbnComment>?</acc:AbnComment>
                  <!--Optional:-->
                  <acc:Units>?</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>?</acc:ProfileId>
                  <!--Zero or more repetitions:-->
                  <acc:TestQuestions>
                     <acc:Question>?</acc:Question>
                     <acc:Response>?</acc:Response>
                     <!--Optional:-->
                     <acc:ContactMethod>?</acc:ContactMethod>
                  </acc:TestQuestions>
                  <!--Optional:-->
                  <acc:Result>?</acc:Result>
                  <!--Optional:-->
                  <acc:SplitPayorId>?</acc:SplitPayorId>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Optional:-->
               <acc:TravelFee>
                  <!--Optional:-->
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>
                  <!--Optional:-->
                  <acc:TripMiles>?</acc:TripMiles>
                  <!--Optional:-->
                  <acc:TripStops>?</acc:TripStops>
                  <!--Optional:-->
                  <acc:TripPatientCount>?</acc:TripPatientCount>
               </acc:TravelFee>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>
                  <!--Optional:-->
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>
                  <!--Optional:-->
                  <acc:UserId>?</acc:UserId>
                  <!--Optional:-->
                  <acc:ClientContact>?</acc:ClientContact>
                  <!--Optional:-->
                  <acc:ClientContactDate>?</acc:ClientContactDate>
                  <!--Optional:-->
                  <acc:Comment>?</acc:Comment>
                  <!--Optional:-->
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>
                  <!--Optional:-->
                  <acc:Deleted>?</acc:Deleted>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>
               <!--Optional:-->
               <acc:PscLocationId>?</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:SpecimenInfo>
                  <!--Optional:-->
                  <acc:Count>?</acc:Count>
                  <!--Optional:-->
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>
                  <!--Optional:-->
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>
                  <!--Optional:-->
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>
                  <!--Zero or more repetitions:-->
                  <acc:SpecimenQuestion>
                     <acc:QuestionId>?</acc:QuestionId>
                     <acc:Response>?</acc:Response>
                     <acc:SpecimenType>?</acc:SpecimenType>
                  </acc:SpecimenQuestion>
               </acc:SpecimenInfo>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>?</acc:PayorPriority>
                  <acc:PayorId>?</acc:PayorId>
                  <!--Optional:-->
                  <acc:PayorName>?</acc:PayorName>
                  <!--Optional:-->
                  <acc:SubscriberId>?</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:DateOfBirth>?</acc:DateOfBirth>
                  <!--Optional:-->
                  <acc:Gender>?</acc:Gender>
                  <!--Optional:-->
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:GroupId>?</acc:GroupId>
                  <!--Optional:-->
                  <acc:PlanId>?</acc:PlanId>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>?</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>?</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>?</typ:MiddleName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>?</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>?</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>?</typ:City>
                     <!--Optional:-->
                     <typ:State>?</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>?</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>?</typ:CountryCode>
                  </acc:Address>
                  <!--Optional:-->
                  <acc:Phone>
                     <!--Optional:-->
                     <typ:HomePhone>?</typ:HomePhone>
                     <!--Optional:-->
                     <typ:WorkPhone>?</typ:WorkPhone>
                  </acc:Phone>
                  <!--Optional:-->
                  <acc:InsuredSSN>?</acc:InsuredSSN>
                  <!--Optional:-->
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>
                  <!--Optional:-->
                  <acc:ClaimNotes>?</acc:ClaimNotes>
                  <!--Optional:-->
                  <acc:Comments>?</acc:Comments>
                  <!--Optional:-->
                  <acc:OtherInfo1>?</acc:OtherInfo1>
                  <!--Optional:-->
                  <acc:OtherInfo2>?</acc:OtherInfo2>
                  <!--Optional:-->
                  <acc:OtherInfo3>?</acc:OtherInfo3>
                  <!--Optional:-->
                  <acc:OtherInfo4>?</acc:OtherInfo4>
                  <!--Optional:-->
                  <acc:GroupName>?</acc:GroupName>
                  <!--Optional:-->
                  <acc:CaseId>?</acc:CaseId>
                  <!--Optional:-->
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>
                  <!--Optional:-->
                  <acc:EmployerInfo>
                     <acc:EmployerName>?</acc:EmployerName>
                     <!--Optional:-->
                     <acc:EmployerId>?</acc:EmployerId>
                     <!--Optional:-->
                     <acc:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>?</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>?</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:City>?</typ:City>
                        <!--Optional:-->
                        <typ:State>?</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>?</typ:ZIP>
                        <!--Optional:-->
                        <typ:CountryCode>?</typ:CountryCode>
                     </acc:Address>
                     <!--Optional:-->
                     <acc:Status>?</acc:Status>
                     <!--Optional:-->
                     <acc:EmployerContact>
                        <!--Optional:-->
                        <typ:ContactName>?</typ:ContactName>
                        <!--Optional:-->
                        <typ:Phone>?</typ:Phone>
                        <!--Optional:-->
                        <typ:Fax>?</typ:Fax>
                        <!--Optional:-->
                        <typ:Email>?</typ:Email>
                     </acc:EmployerContact>
                  </acc:EmployerInfo>
                  <!--Zero or more repetitions:-->
                  <acc:EligibilityInfo>
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>
                     <acc:EligibilityService>?</acc:EligibilityService>
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>
                     <!--Optional:-->
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>
                  </acc:EligibilityInfo>
                  <!--Optional:-->
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>
               </acc:InsuranceInfo>
               <!--Zero or more repetitions:-->
               <acc:OccurrenceCode>
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>
                  <!--Optional:-->
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:OccurrenceCode>
               <!--Zero or more repetitions:-->
               <acc:ValueCode>
                  <acc:ValueCode>?</acc:ValueCode>
                  <!--Optional:-->
                  <acc:ValueAmt>?</acc:ValueAmt>
                  <!--Optional:-->
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>
               </acc:ValueCode>
               <!--Optional:-->
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>
               <!--Optional:-->
               <acc:ClientProductId>?</acc:ClientProductId>
               <!--Optional:-->
               <acc:NoCharge>?</acc:NoCharge>
               <!--Optional:-->
               <acc:PaidInFull>?</acc:PaidInFull>
               <!--Optional:-->
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>
            </acc:ValidateAccession>
         </acc:Payload>
      </acc:ValidateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ValidateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="897b59c9-83a3-477e-99b6-42a39fe70683" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:ValidateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:ValidateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:ValidateAccession>\r
         </acc:Payload>\r
      </acc:ValidateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ValidateAccessionRequest"/></con:call><con:call id="5d411d5f-72d9-4898-b020-b486e975bdac" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:ValidateAccessionRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:ValidateAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:ValidateAccession>\r
         </acc:Payload>\r
      </acc:ValidateAccessionRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ValidateAccessionRequest"/></con:call></con:operation><con:operation id="1f263198-5884-45cb-a8e0-8b804c4f2922" isOneWay="false" action="" name="ApplyEligibilityLogic" bindingOperationName="ApplyEligibilityLogic" type="Request-Response" outputName="ApplyEligibilityLogicResponse" inputName="ApplyEligibilityLogicRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="fce8a05a-5ae6-498b-9571-7ed3013a9747" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:ApplyEligibilityLogicRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:ApplyEligibilityLogicRequestMessage>\r
               <acc:AccessionId>?</acc:AccessionId>\r
            </acc:ApplyEligibilityLogicRequestMessage>\r
         </acc:Payload>\r
      </acc:ApplyEligibilityLogicRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ApplyEligibilityLogicRequest"/></con:call><con:call id="903614bf-edab-4eae-a51e-c9d17ba33b36" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:ApplyEligibilityLogicRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:ApplyEligibilityLogicRequestMessage>\r
               <acc:AccessionId>?</acc:AccessionId>\r
            </acc:ApplyEligibilityLogicRequestMessage>\r
         </acc:Payload>\r
      </acc:ApplyEligibilityLogicRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/ApplyEligibilityLogicRequest"/></con:call></con:operation><con:operation id="23742ca6-6991-4953-af0c-96704e9212e2" isOneWay="false" action="" name="PerformBillingRules" bindingOperationName="PerformBillingRules" type="Request-Response" outputName="PerformBillingRulesResponse" inputName="PerformBillingRulesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1b2da40b-6ff7-480a-89e9-58c9a9ab3efb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:PerformBillingRulesRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:BillingRulesAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:BillingRulesAccession>\r
            <acc:BillingRulesType>?</acc:BillingRulesType>\r
         </acc:Payload>\r
      </acc:PerformBillingRulesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/PerformBillingRulesRequest"/></con:call><con:call id="e25cbfe4-5320-4a90-84fb-ba0a3235296f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:PerformBillingRulesRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:BillingRulesAccession>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:IgnoreErrors>?</acc:IgnoreErrors>\r
               <!--Optional:-->\r
               <acc:ReturnErrors>false</acc:ReturnErrors>\r
               <!--Optional:-->\r
               <acc:RequisitionId>?</acc:RequisitionId>\r
               <!--Optional:-->\r
               <acc:ReceiptDate>?</acc:ReceiptDate>\r
               <acc:DateOfService>?</acc:DateOfService>\r
               <!--Optional:-->\r
               <acc:TimeOfService>?</acc:TimeOfService>\r
               <!--Optional:-->\r
               <acc:AdmitDate>?</acc:AdmitDate>\r
               <!--Optional:-->\r
               <acc:DischargeDate>?</acc:DischargeDate>\r
               <!--Optional:-->\r
               <acc:LowConfidence>?</acc:LowConfidence>\r
               <!--Optional:-->\r
               <acc:LowConfidenceReason>?</acc:LowConfidenceReason>\r
               <!--Optional:-->\r
               <acc:ClientId>?</acc:ClientId>\r
               <!--Optional:-->\r
               <acc:PatientInfo>\r
                  <!--Optional:-->\r
                  <acc:PatientId>?</acc:PatientId>\r
                  <!--Optional:-->\r
                  <acc:CreateBadAddress>false</acc:CreateBadAddress>\r
                  <!--Optional:-->\r
                  <acc:Person>\r
                     <typ:Name>\r
                        <!--Optional:-->\r
                        <typ:FirstName>?</typ:FirstName>\r
                        <!--Optional:-->\r
                        <typ:LastName>?</typ:LastName>\r
                        <!--Optional:-->\r
                        <typ:MiddleName>?</typ:MiddleName>\r
                     </typ:Name>\r
                     <!--Optional:-->\r
                     <typ:DateOfBirth>?</typ:DateOfBirth>\r
                     <!--Optional:-->\r
                     <typ:Gender>?</typ:Gender>\r
                     <!--Optional:-->\r
                     <typ:SSN>?</typ:SSN>\r
                     <!--Optional:-->\r
                     <typ:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </typ:Address>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:Person>\r
                  <!--Optional:-->\r
                  <acc:PatientType>?</acc:PatientType>\r
                  <!--Optional:-->\r
                  <acc:Fasting>?</acc:Fasting>\r
                  <!--Optional:-->\r
                  <acc:PatientLocation>?</acc:PatientLocation>\r
                  <!--Optional:-->\r
                  <acc:IndigentPercent>?</acc:IndigentPercent>\r
                  <!--Optional:-->\r
                  <acc:OnsetDate>?</acc:OnsetDate>\r
                  <!--Optional:-->\r
                  <acc:OnsetType>?</acc:OnsetType>\r
                  <!--Optional:-->\r
                  <acc:AdmissionSource>?</acc:AdmissionSource>\r
                  <!--Optional:-->\r
                  <acc:AdmissionType>?</acc:AdmissionType>\r
                  <!--Optional:-->\r
                  <acc:AccidentCause>?</acc:AccidentCause>\r
                  <!--Optional:-->\r
                  <acc:AccidentState>?</acc:AccidentState>\r
                  <!--Optional:-->\r
                  <acc:EmergencyIndicator>false</acc:EmergencyIndicator>\r
                  <!--Optional:-->\r
                  <acc:GravidaNumber>?</acc:GravidaNumber>\r
                  <!--Optional:-->\r
                  <acc:Pregnancy>?</acc:Pregnancy>\r
                  <!--Optional:-->\r
                  <acc:MaritalStatus>?</acc:MaritalStatus>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:PatientStatusType>?</acc:PatientStatusType>\r
                  <!--Optional:-->\r
                  <acc:ClientSpecificPatientId>?</acc:ClientSpecificPatientId>\r
                  <!--Optional:-->\r
                  <acc:FacilitySpecificPatientId>?</acc:FacilitySpecificPatientId>\r
               </acc:PatientInfo>\r
               <!--Optional:-->\r
               <acc:PatientDemoEffectiveDate>?</acc:PatientDemoEffectiveDate>\r
               <!--Optional:-->\r
               <acc:FinalReportedDate>?</acc:FinalReportedDate>\r
               <!--Optional:-->\r
               <acc:Physicians>\r
                  <!--Optional:-->\r
                  <acc:Ordering>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Ordering>\r
                  <!--Optional:-->\r
                  <acc:Referring>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Referring>\r
                  <!--Optional:-->\r
                  <acc:Primary>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:Primary>\r
               </acc:Physicians>\r
               <!--Optional:-->\r
               <acc:PatientSignatureOnFile>?</acc:PatientSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:PhysicianSignatureOnFile>?</acc:PhysicianSignatureOnFile>\r
               <!--Optional:-->\r
               <acc:ReportCopyToPatient>?</acc:ReportCopyToPatient>\r
               <!--Optional:-->\r
               <acc:CallBack>?</acc:CallBack>\r
               <!--Optional:-->\r
               <acc:CallBackPhone>?</acc:CallBackPhone>\r
               <!--Optional:-->\r
               <acc:STAT>?</acc:STAT>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionContactInfo>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <acc:ContactDate>?</acc:ContactDate>\r
                  <!--Optional:-->\r
                  <acc:ContactInfo>?</acc:ContactInfo>\r
                  <!--Optional:-->\r
                  <acc:FollowUpDate>?</acc:FollowUpDate>\r
                  <!--Optional:-->\r
                  <acc:FollowUpUserId>?</acc:FollowUpUserId>\r
                  <!--Optional:-->\r
                  <acc:PrintableNotes>?</acc:PrintableNotes>\r
                  <!--Optional:-->\r
                  <acc:PrintOnStatement>?</acc:PrintOnStatement>\r
                  <!--Optional:-->\r
                  <acc:FollowUpComplete>?</acc:FollowUpComplete>\r
                  <!--Optional:-->\r
                  <acc:Voided>?</acc:Voided>\r
               </acc:AccessionContactInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:AdditionalReportCopy>\r
                  <acc:ClientId>?</acc:ClientId>\r
                  <acc:ContactMethodType>?</acc:ContactMethodType>\r
                  <acc:Name>?</acc:Name>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>?</acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:Fax>?</acc:Fax>\r
                  <!--Optional:-->\r
                  <acc:Email>?</acc:Email>\r
               </acc:AdditionalReportCopy>\r
               <!--Zero or more repetitions:-->\r
               <acc:ClientQuestions>\r
                  <acc:Question>?</acc:Question>\r
                  <!--Optional:-->\r
                  <acc:Response>?</acc:Response>\r
               </acc:ClientQuestions>\r
               <!--Optional:-->\r
               <acc:ClinicalTrial>\r
                  <acc:TrialName>?</acc:TrialName>\r
                  <!--Optional:-->\r
                  <acc:EncounterName>?</acc:EncounterName>\r
                  <!--Optional:-->\r
                  <acc:EncounterDate>?</acc:EncounterDate>\r
               </acc:ClinicalTrial>\r
               <!--Optional:-->\r
               <acc:ChainOfCustody>\r
                  <!--Optional:-->\r
                  <acc:MroName>?</acc:MroName>\r
                  <!--Optional:-->\r
                  <acc:MroAddress>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:MroAddress>\r
                  <!--Optional:-->\r
                  <acc:MroContact>\r
                     <!--Optional:-->\r
                     <typ:ContactName>?</typ:ContactName>\r
                     <!--Optional:-->\r
                     <typ:Phone>?</typ:Phone>\r
                     <!--Optional:-->\r
                     <typ:Fax>?</typ:Fax>\r
                     <!--Optional:-->\r
                     <typ:Email>?</typ:Email>\r
                  </acc:MroContact>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Optional:-->\r
                  <acc:ChainOfCustodyReasonType>?</acc:ChainOfCustodyReasonType>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemp>?</acc:SpecimenTemp>\r
                  <!--Optional:-->\r
                  <acc:SplitSpecimenCollection>?</acc:SplitSpecimenCollection>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollector>?</acc:SpecimenCollector>\r
                  <!--Optional:-->\r
                  <acc:SpecimenCollectorSignatureOnFile>?</acc:SpecimenCollectorSignatureOnFile>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureInRange>?</acc:SpecimenTemperatureInRange>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTemperatureNotInRange>?</acc:SpecimenTemperatureNotInRange>\r
               </acc:ChainOfCustody>\r
               <!--Optional:-->\r
               <acc:DialysisInfo>\r
                  <!--Optional:-->\r
                  <acc:DialysisType>?</acc:DialysisType>\r
                  <!--Optional:-->\r
                  <acc:Medication>?</acc:Medication>\r
               </acc:DialysisInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OrderedTests>\r
                  <acc:TestSequenceNumber>?</acc:TestSequenceNumber>\r
                  <acc:TransactionType>?</acc:TransactionType>\r
                  <acc:TestId>?</acc:TestId>\r
                  <!--Optional:-->\r
                  <acc:AlternativeTestName>?</acc:AlternativeTestName>\r
                  <!--Optional:-->\r
                  <acc:Modifiers>\r
                     <!--Optional:-->\r
                     <acc:Mod1>?</acc:Mod1>\r
                     <!--Optional:-->\r
                     <acc:Mod2>?</acc:Mod2>\r
                     <!--Optional:-->\r
                     <acc:Mod3>?</acc:Mod3>\r
                     <!--Optional:-->\r
                     <acc:Mod4>?</acc:Mod4>\r
                  </acc:Modifiers>\r
                  <!--Optional:-->\r
                  <acc:ManualPrice>?</acc:ManualPrice>\r
                  <!--Optional:-->\r
                  <acc:ClientBilled>?</acc:ClientBilled>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:LabMessages>\r
                     <acc:Code>?</acc:Code>\r
                  </acc:LabMessages>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:DiagnosisCodes>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                     <!--Optional:-->\r
                     <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                     <!--Optional:-->\r
                     <acc:UserId>?</acc:UserId>\r
                     <!--Optional:-->\r
                     <acc:ClientContact>?</acc:ClientContact>\r
                     <!--Optional:-->\r
                     <acc:ClientContactDate>?</acc:ClientContactDate>\r
                     <!--Optional:-->\r
                     <acc:Comment>?</acc:Comment>\r
                     <!--Optional:-->\r
                     <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                     <!--Optional:-->\r
                     <acc:Deleted>?</acc:Deleted>\r
                     <!--Optional:-->\r
                     <acc:DocumentId>?</acc:DocumentId>\r
                     <!--Optional:-->\r
                     <acc:VoidType>?</acc:VoidType>\r
                  </acc:DiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:Note>?</acc:Note>\r
                  <!--Optional:-->\r
                  <acc:PlaceOfService>?</acc:PlaceOfService>\r
                  <!--Optional:-->\r
                  <acc:FinalReportDate>?</acc:FinalReportDate>\r
                  <!--Optional:-->\r
                  <acc:RenderingPhysician>\r
                     <!--Optional:-->\r
                     <acc:NPI>?</acc:NPI>\r
                     <!--Optional:-->\r
                     <acc:Name>?</acc:Name>\r
                     <!--Optional:-->\r
                     <acc:UPIN>?</acc:UPIN>\r
                  </acc:RenderingPhysician>\r
                  <!--Optional:-->\r
                  <acc:StandingOrderId>?</acc:StandingOrderId>\r
                  <!--Optional:-->\r
                  <acc:AbnReceived>?</acc:AbnReceived>\r
                  <!--Optional:-->\r
                  <acc:AbnReason>?</acc:AbnReason>\r
                  <!--Optional:-->\r
                  <acc:AbnComment>?</acc:AbnComment>\r
                  <!--Optional:-->\r
                  <acc:Units>?</acc:Units>\r
                  <!--Optional:-->\r
                  <acc:ProfileId>?</acc:ProfileId>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:TestQuestions>\r
                     <acc:Question>?</acc:Question>\r
                     <acc:Response>?</acc:Response>\r
                     <!--Optional:-->\r
                     <acc:ContactMethod>?</acc:ContactMethod>\r
                  </acc:TestQuestions>\r
                  <!--Optional:-->\r
                  <acc:Result>?</acc:Result>\r
                  <!--Optional:-->\r
                  <acc:SplitPayorId>?</acc:SplitPayorId>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:Renal>?</acc:Renal>\r
               </acc:OrderedTests>\r
               <!--Optional:-->\r
               <acc:TravelFee>\r
                  <!--Optional:-->\r
                  <acc:RoundTripFromLab>?</acc:RoundTripFromLab>\r
                  <!--Optional:-->\r
                  <acc:TripMiles>?</acc:TripMiles>\r
                  <!--Optional:-->\r
                  <acc:TripStops>?</acc:TripStops>\r
                  <!--Optional:-->\r
                  <acc:TripPatientCount>?</acc:TripPatientCount>\r
               </acc:TravelFee>\r
               <!--Zero or more repetitions:-->\r
               <acc:AccessionLevelDiagnosisCodes>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCode>?</acc:DiagnosisCode>\r
                  <!--Optional:-->\r
                  <acc:NarrativeDiag>?</acc:NarrativeDiag>\r
                  <!--Optional:-->\r
                  <acc:UserId>?</acc:UserId>\r
                  <!--Optional:-->\r
                  <acc:ClientContact>?</acc:ClientContact>\r
                  <!--Optional:-->\r
                  <acc:ClientContactDate>?</acc:ClientContactDate>\r
                  <!--Optional:-->\r
                  <acc:Comment>?</acc:Comment>\r
                  <!--Optional:-->\r
                  <acc:DiagnosisCodeOrder>?</acc:DiagnosisCodeOrder>\r
                  <!--Optional:-->\r
                  <acc:Deleted>?</acc:Deleted>\r
                  <!--Optional:-->\r
                  <acc:DocumentId>?</acc:DocumentId>\r
                  <!--Optional:-->\r
                  <acc:VoidType>?</acc:VoidType>\r
               </acc:AccessionLevelDiagnosisCodes>\r
               <!--Optional:-->\r
               <acc:PhlebotomistUserId>?</acc:PhlebotomistUserId>\r
               <!--Optional:-->\r
               <acc:PscLocationId>?</acc:PscLocationId>\r
               <!--Zero or more repetitions:-->\r
               <acc:SpecimenInfo>\r
                  <!--Optional:-->\r
                  <acc:Count>?</acc:Count>\r
                  <!--Optional:-->\r
                  <acc:SpecimenContainerCode>?</acc:SpecimenContainerCode>\r
                  <!--Optional:-->\r
                  <acc:SpecimenSourceDescription>?</acc:SpecimenSourceDescription>\r
                  <!--Optional:-->\r
                  <acc:SpecimenTempType>?</acc:SpecimenTempType>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:SpecimenQuestion>\r
                     <acc:QuestionId>?</acc:QuestionId>\r
                     <acc:Response>?</acc:Response>\r
                     <acc:SpecimenType>?</acc:SpecimenType>\r
                  </acc:SpecimenQuestion>\r
               </acc:SpecimenInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:InsuranceInfo>\r
                  <acc:PayorPriority>?</acc:PayorPriority>\r
                  <acc:PayorId>?</acc:PayorId>\r
                  <!--Optional:-->\r
                  <acc:PayorName>?</acc:PayorName>\r
                  <!--Optional:-->\r
                  <acc:SubscriberId>?</acc:SubscriberId>\r
                  <!--Optional:-->\r
                  <acc:DateOfBirth>?</acc:DateOfBirth>\r
                  <!--Optional:-->\r
                  <acc:Gender>?</acc:Gender>\r
                  <!--Optional:-->\r
                  <acc:InsuredRelationship>?</acc:InsuredRelationship>\r
                  <!--Optional:-->\r
                  <acc:GroupId>?</acc:GroupId>\r
                  <!--Optional:-->\r
                  <acc:PlanId>?</acc:PlanId>\r
                  <!--Optional:-->\r
                  <acc:InsuredName>\r
                     <!--Optional:-->\r
                     <typ:FirstName>?</typ:FirstName>\r
                     <!--Optional:-->\r
                     <typ:LastName>?</typ:LastName>\r
                     <!--Optional:-->\r
                     <typ:MiddleName>?</typ:MiddleName>\r
                  </acc:InsuredName>\r
                  <!--Optional:-->\r
                  <acc:Address>\r
                     <!--Optional:-->\r
                     <typ:AddressLine1>?</typ:AddressLine1>\r
                     <!--Optional:-->\r
                     <typ:AddressLine2>?</typ:AddressLine2>\r
                     <!--Optional:-->\r
                     <typ:City>?</typ:City>\r
                     <!--Optional:-->\r
                     <typ:State>?</typ:State>\r
                     <!--Optional:-->\r
                     <typ:Region>?</typ:Region>\r
                     <!--Optional:-->\r
                     <typ:ZIP>?</typ:ZIP>\r
                     <!--Optional:-->\r
                     <typ:CountryCode>?</typ:CountryCode>\r
                  </acc:Address>\r
                  <!--Optional:-->\r
                  <acc:Phone>\r
                     <!--Optional:-->\r
                     <typ:HomePhone>?</typ:HomePhone>\r
                     <!--Optional:-->\r
                     <typ:WorkPhone>?</typ:WorkPhone>\r
                  </acc:Phone>\r
                  <!--Optional:-->\r
                  <acc:InsuredSSN>?</acc:InsuredSSN>\r
                  <!--Optional:-->\r
                  <acc:AuthorizationNumber>?</acc:AuthorizationNumber>\r
                  <!--Optional:-->\r
                  <acc:ClaimNotes>?</acc:ClaimNotes>\r
                  <!--Optional:-->\r
                  <acc:Comments>?</acc:Comments>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo1>?</acc:OtherInfo1>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo2>?</acc:OtherInfo2>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo3>?</acc:OtherInfo3>\r
                  <!--Optional:-->\r
                  <acc:OtherInfo4>?</acc:OtherInfo4>\r
                  <!--Optional:-->\r
                  <acc:GroupName>?</acc:GroupName>\r
                  <!--Optional:-->\r
                  <acc:CaseId>?</acc:CaseId>\r
                  <!--Optional:-->\r
                  <acc:DelayReasonCode>?</acc:DelayReasonCode>\r
                  <!--Optional:-->\r
                  <acc:EmployerInfo>\r
                     <acc:EmployerName>?</acc:EmployerName>\r
                     <!--Optional:-->\r
                     <acc:EmployerId>?</acc:EmployerId>\r
                     <!--Optional:-->\r
                     <acc:Address>\r
                        <!--Optional:-->\r
                        <typ:AddressLine1>?</typ:AddressLine1>\r
                        <!--Optional:-->\r
                        <typ:AddressLine2>?</typ:AddressLine2>\r
                        <!--Optional:-->\r
                        <typ:City>?</typ:City>\r
                        <!--Optional:-->\r
                        <typ:State>?</typ:State>\r
                        <!--Optional:-->\r
                        <typ:Region>?</typ:Region>\r
                        <!--Optional:-->\r
                        <typ:ZIP>?</typ:ZIP>\r
                        <!--Optional:-->\r
                        <typ:CountryCode>?</typ:CountryCode>\r
                     </acc:Address>\r
                     <!--Optional:-->\r
                     <acc:Status>?</acc:Status>\r
                     <!--Optional:-->\r
                     <acc:EmployerContact>\r
                        <!--Optional:-->\r
                        <typ:ContactName>?</typ:ContactName>\r
                        <!--Optional:-->\r
                        <typ:Phone>?</typ:Phone>\r
                        <!--Optional:-->\r
                        <typ:Fax>?</typ:Fax>\r
                        <!--Optional:-->\r
                        <typ:Email>?</typ:Email>\r
                     </acc:EmployerContact>\r
                  </acc:EmployerInfo>\r
                  <!--Zero or more repetitions:-->\r
                  <acc:EligibilityInfo>\r
                     <acc:EligibilityStatus>?</acc:EligibilityStatus>\r
                     <acc:EligibilityService>?</acc:EligibilityService>\r
                     <acc:EligibilityCheckedDate>?</acc:EligibilityCheckedDate>\r
                     <!--Optional:-->\r
                     <acc:EligibilityTransactionId>?</acc:EligibilityTransactionId>\r
                  </acc:EligibilityInfo>\r
                  <!--Optional:-->\r
                  <acc:DemonstrationProjectId>?</acc:DemonstrationProjectId>\r
               </acc:InsuranceInfo>\r
               <!--Zero or more repetitions:-->\r
               <acc:OccurrenceCode>\r
                  <acc:OccurrenceCode>?</acc:OccurrenceCode>\r
                  <!--Optional:-->\r
                  <acc:OccurrenceDate>?</acc:OccurrenceDate>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:OccurrenceCode>\r
               <!--Zero or more repetitions:-->\r
               <acc:ValueCode>\r
                  <acc:ValueCode>?</acc:ValueCode>\r
                  <!--Optional:-->\r
                  <acc:ValueAmt>?</acc:ValueAmt>\r
                  <!--Optional:-->\r
                  <acc:SpecificPyrId>?</acc:SpecificPyrId>\r
               </acc:ValueCode>\r
               <!--Optional:-->\r
               <acc:CheckClientBillingRules>?</acc:CheckClientBillingRules>\r
               <!--Optional:-->\r
               <acc:ClientProductId>?</acc:ClientProductId>\r
               <!--Optional:-->\r
               <acc:NoCharge>?</acc:NoCharge>\r
               <!--Optional:-->\r
               <acc:PaidInFull>?</acc:PaidInFull>\r
               <!--Optional:-->\r
               <acc:CreateOrUpdatePatientDemo>?</acc:CreateOrUpdatePatientDemo>\r
               <!--Optional:-->\r
               <acc:MspForm>?</acc:MspForm>\r
               <!--Optional:-->\r
               <acc:ForceToEPHoldQueueNote>?</acc:ForceToEPHoldQueueNote>\r
               <!--Optional:-->\r
               <acc:ClientBillingCategory>?</acc:ClientBillingCategory>\r
            </acc:BillingRulesAccession>\r
            <acc:BillingRulesType>?</acc:BillingRulesType>\r
         </acc:Payload>\r
      </acc:PerformBillingRulesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/PerformBillingRulesRequest"/></con:call></con:operation><con:operation id="3b3d73fd-ebff-4d65-ba2b-b353525645e3" isOneWay="false" action="" name="CreateAccessionAdjustment" bindingOperationName="CreateAccessionAdjustment" type="Request-Response" outputName="CreateAccessionAdjustmentResponse" inputName="CreateAccessionAdjustmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a6aa23c0-2b34-4e69-a373-9b80001f71fe" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:CreateAccessionAdjustmentRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:CreateAccessionAdjustment>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:AdjustmentCodeId>?</acc:AdjustmentCodeId>\r
               <acc:AdustmentAmount>?</acc:AdustmentAmount>\r
               <acc:AdjustmentPyrAbbrev>?</acc:AdjustmentPyrAbbrev>\r
               <!--Optional:-->\r
               <acc:SubscriberId>?</acc:SubscriberId>\r
               <!--Optional:-->\r
               <acc:AccnProcSeqId>?</acc:AccnProcSeqId>\r
               <!--Optional:-->\r
               <acc:AdjustmentNote>?</acc:AdjustmentNote>\r
               <acc:AdjustmentPrintNote>false</acc:AdjustmentPrintNote>\r
            </acc:CreateAccessionAdjustment>\r
         </acc:Payload>\r
      </acc:CreateAccessionAdjustmentRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionAdjustmentRequest"/></con:call><con:call id="9dd6809d-2239-45f2-af18-d018af07d70e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:CreateAccessionAdjustmentRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:CreateAccessionAdjustment>\r
               <acc:AccessionId>?</acc:AccessionId>\r
               <acc:AdjustmentCodeId>?</acc:AdjustmentCodeId>\r
               <acc:AdustmentAmount>?</acc:AdustmentAmount>\r
               <acc:AdjustmentPyrAbbrev>?</acc:AdjustmentPyrAbbrev>\r
               <!--Optional:-->\r
               <acc:SubscriberId>?</acc:SubscriberId>\r
               <!--Optional:-->\r
               <acc:AccnProcSeqId>?</acc:AccnProcSeqId>\r
               <!--Optional:-->\r
               <acc:AdjustmentNote>?</acc:AdjustmentNote>\r
               <acc:AdjustmentPrintNote>false</acc:AdjustmentPrintNote>\r
            </acc:CreateAccessionAdjustment>\r
         </acc:Payload>\r
      </acc:CreateAccessionAdjustmentRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionAdjustmentRequest"/></con:call></con:operation><con:operation id="6a450cad-f49d-4718-8ea8-70ffce501f40" isOneWay="false" action="" name="AddOverrideError" bindingOperationName="AddOverrideError" type="Request-Response" outputName="AddOverrideErrorResponse" inputName="AddOverrideErrorRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="6bcb6621-a3e2-4087-9a7a-07748ad97b96" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:AddOverrideErrorRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
            <acc:PayorId>?</acc:PayorId>\r
            <!--Optional:-->\r
            <acc:SubscriberId>?</acc:SubscriberId>\r
            <!--Optional:-->\r
            <acc:AccnProcSeqId>?</acc:AccnProcSeqId>\r
            <acc:OverrideReasonCode>?</acc:OverrideReasonCode>\r
            <!--Optional:-->\r
            <acc:ErrorNote>?</acc:ErrorNote>\r
         </acc:Payload>\r
      </acc:AddOverrideErrorRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/AddOverrideErrorRequest"/></con:call><con:call id="de0f2053-b14c-45da-9313-e921de2359df" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:AddOverrideErrorRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
            <acc:PayorId>?</acc:PayorId>\r
            <!--Optional:-->\r
            <acc:SubscriberId>?</acc:SubscriberId>\r
            <!--Optional:-->\r
            <acc:AccnProcSeqId>?</acc:AccnProcSeqId>\r
            <acc:OverrideReasonCode>?</acc:OverrideReasonCode>\r
            <!--Optional:-->\r
            <acc:ErrorNote>?</acc:ErrorNote>\r
         </acc:Payload>\r
      </acc:AddOverrideErrorRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/AddOverrideErrorRequest"/></con:call></con:operation><con:operation id="dbe6d801-7f09-42ec-bfbc-720dbe04e6be" isOneWay="false" action="" name="AddBadAddressError" bindingOperationName="AddBadAddressError" type="Request-Response" outputName="AddBadAddressErrorResponse" inputName="AddBadAddressErrorRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2eb21f28-91aa-44ad-9e80-562585ef1f9b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:AddBadAddressErrorRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
         </acc:Payload>\r
      </acc:AddBadAddressErrorRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/AddBadAddressErrorRequest"/></con:call><con:call id="8f22b0f4-f5a7-4988-bbb2-239c2677a89a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <acc:AddBadAddressErrorRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <acc:Payload>\r
            <acc:AccessionId>?</acc:AccessionId>\r
         </acc:Payload>\r
      </acc:AddBadAddressErrorRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/AddBadAddressErrorRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="accessionSearchSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/accessionSearch}accessionSearchSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/accessionSearch.wsdl" id="ac40985a-9fcf-4163-bb7d-16d30e3a5380" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/accessionSearch.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/accessionSearch.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/accessionSearch" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/accessionSearch" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/accessionSearch">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/accessionSearch" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/accessionSearch" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="AccessionSearchRequest">
        <xs:annotation>
          <xs:documentation>Accession Search Request Message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="AccessionSearchRequestMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchResponse">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="TotalPatientDueAmount" type="types:AmountType"/>
                  <xs:element minOccurs="0" name="TotalBalanceDueAmount" type="types:AmountType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" ref="AccessionSearchResponseMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchRequestMessage">
        <xs:annotation>
          <xs:documentation>By default response will contain maximum of 100 records, if more than one records need to
                be retrieved
                send the start and end row numbers.
                The data will returned between start and end record row numbers.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="AccessionId" type="xs:string"/>
            <xs:element default="true" minOccurs="0" name="AccessionWithAtleastOnePayor" type="xs:boolean"/>
            <xs:element minOccurs="0" name="RequisitionId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="ClientName" type="xs:string"/>
            <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="xs:string"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PayorId" type="types:PayorIdType"/>
            <xs:element minOccurs="0" name="PayorName" type="xs:string"/>
            <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="InsuredName" type="types:NameType"/>
            <xs:element minOccurs="0" name="QuestionId" type="xs:int"/>
            <xs:element minOccurs="0" name="QuestionResponse" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="DosFrom" type="xs:date"/>
            <xs:element minOccurs="0" name="DosTo" type="xs:date"/>
            <xs:element default="true" minOccurs="0" name="DisplayPrimaryOnly" type="xs:boolean"/>
            <xs:element minOccurs="0" name="SortByPatientLastName" type="xs:boolean"/>
            <xs:element default="1" minOccurs="0" name="StartRowNumber" type="xs:integer"/>
            <xs:element default="100" minOccurs="0" name="EndRowNumber" type="xs:integer"/>
            <xs:element minOccurs="0" name="SubmissionId" type="xs:string"/>
            <xs:element minOccurs="0" name="ClientPrimaryFacilityId" type="types:IdType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchResponseMessage">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="RowId" type="xs:int"/>
            <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="AccessionId" type="types:AccessionIdType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="RequisitionId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="Dos" type="xs:date"/>
            <xs:element minOccurs="0" name="BalanceDueAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientDueAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="types:SSNType"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="AccessionStatus" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="AccessionStatementStatus" type="types:DescriptionType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="InsuranceInfo"/>
            <xs:element minOccurs="0" name="ClientSpecificPatientInfo" type="SpecificPatientInfo"/>
            <xs:element minOccurs="0" name="FacilitySpecificPatientInfo" type="SpecificPatientInfo"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="InsuranceInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="PayorName" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="InsuredName" type="types:NameType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="SpecificPatientInfo">
        <xs:sequence>
          <xs:element name="SourceType" type="types:SourceType"/>
          <xs:element name="SourceId" type="types:IdType"/>
          <xs:element name="SourceName" type="types:NameIdType"/>
          <xs:element name="PatientId" type="types:PatientIdType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="AccessionSearchRequest">
    <wsdl:part element="tns:AccessionSearchRequest" name="AccessionSearchRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AccessionSearchResponse">
    <wsdl:part element="tns:AccessionSearchResponse" name="AccessionSearchResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="accessionSearch">
    <wsdl:operation name="AccessionSearch">
      <wsdl:input message="tns:AccessionSearchRequest" name="AccessionSearchRequest"></wsdl:input>
      <wsdl:output message="tns:AccessionSearchResponse" name="AccessionSearchResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="accessionSearchSoap11" type="tns:accessionSearch">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="AccessionSearch">
      <soap:operation soapAction=""/>
      <wsdl:input name="AccessionSearchRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AccessionSearchResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="accessionSearchService">
    <wsdl:port binding="tns:accessionSearchSoap11" name="accessionSearchSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="AccessionSearch" bindingOperationName="AccessionSearch" type="Request-Response" outputName="AccessionSearchResponse" inputName="AccessionSearchRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="628768dd-5b50-44c8-9116-c6c9a8250113"><con:settings/><con:call name="Request 1" id="9b4ac51a-41c3-41eb-a5cf-cb86095b3695"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accessionSearch" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:AccessionSearchRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:AccessionSearchRequestMessage>
               <!--Optional:-->
               <acc:AccessionId>?</acc:AccessionId>
               <!--Optional:-->
               <acc:AccessionWithAtleastOnePayor>true</acc:AccessionWithAtleastOnePayor>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:PatientId>?</acc:PatientId>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:ClientName>?</acc:ClientName>
               <!--Optional:-->
               <acc:PatientName>
                  <!--Optional:-->
                  <typ:FirstName>?</typ:FirstName>
                  <!--Optional:-->
                  <typ:LastName>?</typ:LastName>
                  <!--Optional:-->
                  <typ:MiddleName>?</typ:MiddleName>
               </acc:PatientName>
               <!--Optional:-->
               <acc:PatientSSN>?</acc:PatientSSN>
               <!--Optional:-->
               <acc:PatientDOB>?</acc:PatientDOB>
               <!--Optional:-->
               <acc:PayorId>?</acc:PayorId>
               <!--Optional:-->
               <acc:PayorName>?</acc:PayorName>
               <!--Optional:-->
               <acc:SubscriberId>?</acc:SubscriberId>
               <!--Optional:-->
               <acc:PatientAddress>
                  <!--Optional:-->
                  <typ:AddressLine1>?</typ:AddressLine1>
                  <!--Optional:-->
                  <typ:AddressLine2>?</typ:AddressLine2>
                  <!--Optional:-->
                  <typ:City>?</typ:City>
                  <!--Optional:-->
                  <typ:State>?</typ:State>
                  <!--Optional:-->
                  <typ:ZIP>?</typ:ZIP>
                  <!--Optional:-->
                  <typ:CountryCode>?</typ:CountryCode>
               </acc:PatientAddress>
               <!--Optional:-->
               <acc:InsuredName>
                  <!--Optional:-->
                  <typ:FirstName>?</typ:FirstName>
                  <!--Optional:-->
                  <typ:LastName>?</typ:LastName>
                  <!--Optional:-->
                  <typ:MiddleName>?</typ:MiddleName>
               </acc:InsuredName>
               <!--Optional:-->
               <acc:QuestionId>?</acc:QuestionId>
               <!--Optional:-->
               <acc:QuestionResponse>?</acc:QuestionResponse>
               <!--Optional:-->
               <acc:DosFrom>?</acc:DosFrom>
               <!--Optional:-->
               <acc:DosTo>?</acc:DosTo>
               <!--Optional:-->
               <acc:DisplayPrimaryOnly>true</acc:DisplayPrimaryOnly>
               <!--Optional:-->
               <acc:SortByPatientLastName>?</acc:SortByPatientLastName>
               <!--Optional:-->
               <acc:StartRowNumber>1</acc:StartRowNumber>
               <!--Optional:-->
               <acc:EndRowNumber>100</acc:EndRowNumber>
               <!--Optional:-->
               <acc:SubmissionId>?</acc:SubmissionId>
               <!--Optional:-->
               <acc:ClientPrimaryFacilityId>?</acc:ClientPrimaryFacilityId>
            </acc:AccessionSearchRequestMessage>
         </acc:Payload>
      </acc:AccessionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accessionSearch/accessionSearch/AccessionSearchRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="0137ac86-379d-4c03-8b35-b1d79f2d628d"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accessionSearch" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:AccessionSearchRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:AccessionSearchRequestMessage>
               <!--Optional:-->
               <acc:AccessionId>?</acc:AccessionId>
               <!--Optional:-->
               <acc:AccessionWithAtleastOnePayor>true</acc:AccessionWithAtleastOnePayor>
               <!--Optional:-->
               <acc:RequisitionId>?</acc:RequisitionId>
               <!--Optional:-->
               <acc:PatientId>?</acc:PatientId>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:ClientName>?</acc:ClientName>
               <!--Optional:-->
               <acc:PatientName>
                  <!--Optional:-->
                  <typ:FirstName>?</typ:FirstName>
                  <!--Optional:-->
                  <typ:LastName>?</typ:LastName>
                  <!--Optional:-->
                  <typ:MiddleName>?</typ:MiddleName>
               </acc:PatientName>
               <!--Optional:-->
               <acc:PatientSSN>?</acc:PatientSSN>
               <!--Optional:-->
               <acc:PatientDOB>?</acc:PatientDOB>
               <!--Optional:-->
               <acc:PayorId>?</acc:PayorId>
               <!--Optional:-->
               <acc:PayorName>?</acc:PayorName>
               <!--Optional:-->
               <acc:SubscriberId>?</acc:SubscriberId>
               <!--Optional:-->
               <acc:PatientAddress>
                  <!--Optional:-->
                  <typ:AddressLine1>?</typ:AddressLine1>
                  <!--Optional:-->
                  <typ:AddressLine2>?</typ:AddressLine2>
                  <!--Optional:-->
                  <typ:City>?</typ:City>
                  <!--Optional:-->
                  <typ:State>?</typ:State>
                  <!--Optional:-->
                  <typ:ZIP>?</typ:ZIP>
                  <!--Optional:-->
                  <typ:CountryCode>?</typ:CountryCode>
               </acc:PatientAddress>
               <!--Optional:-->
               <acc:InsuredName>
                  <!--Optional:-->
                  <typ:FirstName>?</typ:FirstName>
                  <!--Optional:-->
                  <typ:LastName>?</typ:LastName>
                  <!--Optional:-->
                  <typ:MiddleName>?</typ:MiddleName>
               </acc:InsuredName>
               <!--Optional:-->
               <acc:QuestionId>?</acc:QuestionId>
               <!--Optional:-->
               <acc:QuestionResponse>?</acc:QuestionResponse>
               <!--Optional:-->
               <acc:DosFrom>?</acc:DosFrom>
               <!--Optional:-->
               <acc:DosTo>?</acc:DosTo>
               <!--Optional:-->
               <acc:DisplayPrimaryOnly>true</acc:DisplayPrimaryOnly>
               <!--Optional:-->
               <acc:SortByPatientLastName>?</acc:SortByPatientLastName>
               <!--Optional:-->
               <acc:StartRowNumber>1</acc:StartRowNumber>
               <!--Optional:-->
               <acc:EndRowNumber>100</acc:EndRowNumber>
               <!--Optional:-->
               <acc:SubmissionId>?</acc:SubmissionId>
               <!--Optional:-->
               <acc:ClientPrimaryFacilityId>?</acc:ClientPrimaryFacilityId>
            </acc:AccessionSearchRequestMessage>
         </acc:Payload>
      </acc:AccessionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accessionSearch/accessionSearch/AccessionSearchRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="patientSearchSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/patientSearch}patientSearchSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/patientSearch.wsdl" id="895fa34c-24f1-4f1a-8854-cb9ea6e39071" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/patientSearch.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/patientSearch.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/patientSearch" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/patientSearch" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/patientSearch">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/patientSearch" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/patientSearch" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="PatientSearchRequest">
        <xs:annotation>
          <xs:documentation>Patient Request Message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="PatientSearchRequestMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PatientSearchResponse">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" ref="PatientSearchResponseMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PatientSearchRequestMessage">
        <xs:annotation>
          <xs:documentation>By default response will contain maximum of 100 records, if more than one records need to
                be retrieved
                send the start and end row numbers.
                The data will returned between start and end record row numbers.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="xs:string"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="PatientHomePhone" type="types:PhoneNumberType"/>
            <xs:element default="1" minOccurs="0" name="StartRowNumber" type="xs:integer"/>
            <xs:element default="100" minOccurs="0" name="EndRowNumber" type="xs:integer"/>
            <xs:element default="false" minOccurs="0" name="ShowDeletedRecords" type="xs:boolean"/>
            <xs:element minOccurs="0" name="ClientPrimaryFacilityId" type="types:IdType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PatientSearchResponseMessage">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="RowId" type="xs:int"/>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="types:SSNType"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="PatientHomePhone" type="types:PhoneNumberType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ClientSpecificPatientInfo" type="SpecificPatientInfo"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="FacilitySpecificPatientInfo" type="SpecificPatientInfo"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="SpecificPatientInfo">
        <xs:sequence>
          <xs:element name="SourceType" type="types:SourceType"/>
          <xs:element name="SourceId" type="types:IdType"/>
          <xs:element name="SourceName" type="types:NameIdType"/>
          <xs:element name="PatientId" type="types:PatientIdType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="PatientSearchRequest">
    <wsdl:part element="tns:PatientSearchRequest" name="PatientSearchRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="PatientSearchResponse">
    <wsdl:part element="tns:PatientSearchResponse" name="PatientSearchResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="patientSearch">
    <wsdl:operation name="PatientSearch">
      <wsdl:input message="tns:PatientSearchRequest" name="PatientSearchRequest"></wsdl:input>
      <wsdl:output message="tns:PatientSearchResponse" name="PatientSearchResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="patientSearchSoap11" type="tns:patientSearch">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="PatientSearch">
      <soap:operation soapAction=""/>
      <wsdl:input name="PatientSearchRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="PatientSearchResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="patientSearchService">
    <wsdl:port binding="tns:patientSearchSoap11" name="patientSearchSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="PatientSearch" bindingOperationName="PatientSearch" type="Request-Response" outputName="PatientSearchResponse" inputName="PatientSearchRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9b5d706f-890f-4c85-b088-478a7081a36d"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="271e50a8-d864-49a0-83b4-2eaea9d3013c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/prod/accessionv7/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientSearch" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:PatientSearchRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>11111</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>clndoc</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PatientSearchRequestMessage>
               <!--Optional:-->
               <pat:PatientId>testes</pat:PatientId>
               <!--Optional:-->
               <pat:StartRowNumber>1</pat:StartRowNumber>
               <!--Optional:-->
               <pat:EndRowNumber>100</pat:EndRowNumber>
               <!--Optional:-->
               <pat:ShowDeletedRecords>false</pat:ShowDeletedRecords>
            </pat:PatientSearchRequestMessage>
         </pat:Payload>
      </pat:PatientSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>clndoc</con:username><con:password>clndoc</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientSearch/patientSearch/PatientSearchRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" wssPasswordType="PasswordDigest" id="17932947-375a-4239-97c5-4121d733a384"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/prod/accessionv7/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientSearch" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:PatientSearchRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>11111</msg:SequenceNumber>
            <msg:UserId>yli</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>ams</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PatientSearchRequestMessage>
               <!--Optional:-->
               <pat:PatientId>XHAR0117874549</pat:PatientId>
               <!--Optional:-->
               <pat:StartRowNumber>1</pat:StartRowNumber>
               <!--Optional:-->
               <pat:EndRowNumber>100</pat:EndRowNumber>
               <!--Optional:-->
               <pat:ShowDeletedRecords>false</pat:ShowDeletedRecords>
            </pat:PatientSearchRequestMessage>
         </pat:Payload>
      </pat:PatientSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>webservicetest</con:username><con:password>webservicetest</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientSearch/patientSearch/PatientSearchRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="cfb16edb-6278-475c-b210-ac32fd0a3cec"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientSearch" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:PatientSearchRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PatientSearchRequestMessage>
               <!--Optional:-->
               <pat:PatientId>?</pat:PatientId>
               <!--Optional:-->
               <pat:ClientId>?</pat:ClientId>
               <!--Optional:-->
               <pat:PatientName>
                  <!--Optional:-->
                  <typ:FirstName>?</typ:FirstName>
                  <!--Optional:-->
                  <typ:LastName>?</typ:LastName>
                  <!--Optional:-->
                  <typ:MiddleName>?</typ:MiddleName>
               </pat:PatientName>
               <!--Optional:-->
               <pat:PatientSSN>?</pat:PatientSSN>
               <!--Optional:-->
               <pat:PatientDOB>?</pat:PatientDOB>
               <!--Optional:-->
               <pat:PatientAddress>
                  <!--Optional:-->
                  <typ:AddressLine1>?</typ:AddressLine1>
                  <!--Optional:-->
                  <typ:AddressLine2>?</typ:AddressLine2>
                  <!--Optional:-->
                  <typ:City>?</typ:City>
                  <!--Optional:-->
                  <typ:State>?</typ:State>
                  <!--Optional:-->
                  <typ:ZIP>?</typ:ZIP>
                  <!--Optional:-->
                  <typ:CountryCode>?</typ:CountryCode>
               </pat:PatientAddress>
               <!--Optional:-->
               <pat:PatientHomePhone>?</pat:PatientHomePhone>
               <!--Optional:-->
               <pat:StartRowNumber>1</pat:StartRowNumber>
               <!--Optional:-->
               <pat:EndRowNumber>100</pat:EndRowNumber>
               <!--Optional:-->
               <pat:ShowDeletedRecords>false</pat:ShowDeletedRecords>
               <!--Optional:-->
               <pat:ClientPrimaryFacilityId>?</pat:ClientPrimaryFacilityId>
            </pat:PatientSearchRequestMessage>
         </pat:Payload>
      </pat:PatientSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientSearch/patientSearch/PatientSearchRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="patientDemoSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/patientDemo}patientDemoSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/patientDemo.wsdl" id="62673243-7269-4bcd-a6d0-5e126d5f268d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/patientDemo.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/patientDemo.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/patientDemo" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/patientDemo" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/patientDemo">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/patientDemo" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/patientDemo" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="GetPatientDemoRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetPatientDemoResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="PatientDemoInfo"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetPatientEmailRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="PatientId" type="PatientIdType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetPatientEmailResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="Email" type="types:EmailAddressType"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdatePatientDemoEmailRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="PatientId" type="PatientIdType"/>
                  <xs:element minOccurs="0" name="Email" type="types:EmailAddressType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdatePatientDemoEmailResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PatientDemoInfo">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="MoreRecordsAvailable" type="xs:boolean"/>
            <xs:element maxOccurs="unbounded" ref="PatientDemo"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PatientDemo">
        <xs:annotation>
          <xs:documentation>Patient Demo message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PatientInfo" type="PatientInfo"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="InsuranceInfo" type="InsuranceInfo"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="EmployerInfoType">
        <xs:sequence>
          <xs:element minOccurs="0" name="EmployerName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Address" type="types:AddressType"/>
          <xs:element minOccurs="0" name="EmployerContact" type="types:Contact"/>
          <xs:element minOccurs="0" name="EmploymentStatus" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="InsuranceInfo">
        <xs:sequence>
          <xs:element name="PayorPriority" type="types:PayorPriorityType"/>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PayorName" type="types:DescriptionType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="GroupId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="PlanId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="SubscriberId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="InsuredDateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="InsuredGender" type="xs:string"/>
          <xs:element minOccurs="0" name="InsuredRelationship" type="xs:string"/>
          <xs:element minOccurs="0" name="InsuredName" type="types:NameType"/>
          <xs:element minOccurs="0" name="InsuredAddress" type="types:AddressType"/>
          <xs:element minOccurs="0" name="Phone" type="types:PhoneType"/>
          <xs:element minOccurs="0" name="InsuredSSN" type="types:SSNType"/>
          <xs:element minOccurs="0" name="ClaimNotes" type="types:NoteType"/>
          <xs:element minOccurs="0" name="Suspended" type="xs:boolean"/>
          <xs:element minOccurs="0" name="SuspensionReason" type="SuspensionReasonType"/>
          <xs:element minOccurs="0" name="Comments" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo1" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo2" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo3" type="types:NoteType"/>
          <xs:element minOccurs="0" name="OtherInfo4" type="types:NoteType"/>
          <xs:element minOccurs="0" name="GroupName" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="CaseId" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="EmployerInfo" type="EmployerInfoType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatientInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="EPI" type="types:NameIdType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ClientSpecificPatientInfo" type="SpecificPatientInfo"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FacilitySpecificPatientInfo" type="SpecificPatientInfo"/>
          <xs:element minOccurs="0" name="Person" type="types:PersonType"/>
          <xs:element minOccurs="0" name="DateOfInjury" type="xs:date"/>
          <xs:element minOccurs="0" name="MaritalStatus" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="DialysisInfo" type="DialysisInfo"/>
          <xs:element minOccurs="0" name="Physician" type="Physician"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="LastUsedDate" type="xs:date"/>
          <xs:element minOccurs="0" name="Comments" type="types:CommentsType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="SuspensionReasonType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="1000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="DialysisInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="DialysisType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Medication" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="Physician">
        <xs:sequence>
          <xs:element name="NPI" type="types:NPIType"/>
          <xs:element minOccurs="0" name="Name" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="SpecificPatientInfo">
        <xs:sequence>
          <xs:element name="SourceId" type="types:IdType"/>
          <xs:element name="SourceName" type="types:NameIdType"/>
          <xs:element name="PatientId" type="PatientIdType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetPatientDemoResponse">
    <wsdl:part element="tns:GetPatientDemoResponse" name="GetPatientDemoResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePatientDemoEmailResponse">
    <wsdl:part element="tns:UpdatePatientDemoEmailResponse" name="UpdatePatientDemoEmailResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPatientEmailResponse">
    <wsdl:part element="tns:GetPatientEmailResponse" name="GetPatientEmailResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePatientDemoEmailRequest">
    <wsdl:part element="tns:UpdatePatientDemoEmailRequest" name="UpdatePatientDemoEmailRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPatientEmailRequest">
    <wsdl:part element="tns:GetPatientEmailRequest" name="GetPatientEmailRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPatientDemoRequest">
    <wsdl:part element="tns:GetPatientDemoRequest" name="GetPatientDemoRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="patientDemo">
    <wsdl:operation name="GetPatientDemo">
      <wsdl:input message="tns:GetPatientDemoRequest" name="GetPatientDemoRequest"></wsdl:input>
      <wsdl:output message="tns:GetPatientDemoResponse" name="GetPatientDemoResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePatientDemoEmail">
      <wsdl:input message="tns:UpdatePatientDemoEmailRequest" name="UpdatePatientDemoEmailRequest"></wsdl:input>
      <wsdl:output message="tns:UpdatePatientDemoEmailResponse" name="UpdatePatientDemoEmailResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPatientEmail">
      <wsdl:input message="tns:GetPatientEmailRequest" name="GetPatientEmailRequest"></wsdl:input>
      <wsdl:output message="tns:GetPatientEmailResponse" name="GetPatientEmailResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="patientDemoSoap11" type="tns:patientDemo">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetPatientDemo">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPatientDemoRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPatientDemoResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePatientDemoEmail">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdatePatientDemoEmailRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdatePatientDemoEmailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPatientEmail">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPatientEmailRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPatientEmailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="patientDemoService">
    <wsdl:port binding="tns:patientDemoSoap11" name="patientDemoSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="GetPatientDemo" bindingOperationName="GetPatientDemo" type="Request-Response" outputName="GetPatientDemoResponse" inputName="GetPatientDemoRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="eb77d1a8-4542-42ae-b200-df473f0821c2"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="cf9281d8-a9c5-434c-8baf-e94b0c20c189"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientDemo" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:GetPatientDemoRequest>
         <msg:MessageHeader>
            
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
      </pat:GetPatientDemoRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientDemo/patientDemo/GetPatientDemoRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPatientEmail" bindingOperationName="GetPatientEmail" type="Request-Response" outputName="GetPatientEmailResponse" inputName="GetPatientEmailRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c6849de6-89e4-4bbf-8cec-116de2147a3d"><con:settings/><con:call name="Request 1" id="bc1b27fe-0174-44bb-a477-f9bbf54ed9f2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientDemo" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:GetPatientEmailRequest>
         <msg:MessageHeader>
            
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PatientId>?</pat:PatientId>
         </pat:Payload>
      </pat:GetPatientEmailRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientDemo/patientDemo/GetPatientEmailRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdatePatientDemoEmail" bindingOperationName="UpdatePatientDemoEmail" type="Request-Response" outputName="UpdatePatientDemoEmailResponse" inputName="UpdatePatientDemoEmailRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="53a6cd75-8fec-4c63-b6c2-04b04a5aee8b"><con:settings/><con:call name="Request 1" id="b3b17b21-5542-44d8-ac7d-07d972d05a32"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientDemo" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:UpdatePatientDemoEmailRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PatientId>?</pat:PatientId>
            <!--Optional:-->
            <pat:Email>?</pat:Email>
         </pat:Payload>
      </pat:UpdatePatientDemoEmailRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientDemo/patientDemo/UpdatePatientDemoEmailRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="errorProcessingSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/errorProcessing}errorProcessingSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/errorProcessing.wsdl" id="6c107674-6314-4fe4-b940-de0d7eed040e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/errorProcessing.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/errorProcessing.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/errorProcessing" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/errorProcessing" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/errorProcessing">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/errorProcessing" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/errorProcessing" xmlns:accession="http://www.xifin.com/schema/accession" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="GetErrorProcessingSummaryRequest">
        <xs:annotation>
          <xs:documentation>Error Processing Summary Request data structure. Order determines the order in which grouping will be done.By default grouping will be
        done on the basis of patient name and date of service.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="EPSummaryRequestMessage" type="EPSummaryRequestMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="EPSummaryRequestMessage">
        <xs:sequence>
          <xs:element name="ClientId" type="types:ClientIdType"/>
          <xs:element minOccurs="0" name="PatientName" type="GroupingElementType"/>
          <xs:element minOccurs="0" name="DateOfService" type="GroupingElementType"/>
          <xs:element minOccurs="0" name="PatientId" type="GroupingElementType"/>
          <xs:element minOccurs="0" name="ErrorField" type="GroupingElementType"/>
          <xs:element minOccurs="0" name="OrderingPhysician" type="GroupingElementType"/>
          <xs:element name="CorrespondanceType" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GroupingElementType">
        <xs:sequence>
          <xs:element name="Order" type="OrderType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="OrderType">
        <xs:restriction base="xs:int">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:element name="GetErrorProcessingSummaryResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="GetErrorProcessingSummaryResponseMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetErrorProcessingSummaryResponseMessage">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="EPSummaryResponseMessage" type="EPSummaryResponseMessage"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="EPSummaryResponseMessage">
        <xs:annotation>
          <xs:documentation>There could be multiple block of Summary like this</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
          <xs:element name="DateOfService" type="xs:date"/>
          <xs:element minOccurs="0" name="PatientId" type="types:IdType"/>
          <xs:element minOccurs="0" name="ErrorField" type="xs:string"/>
          <xs:element minOccurs="0" name="OrderingPhysician" type="types:NameType"/>
          <xs:element minOccurs="0" name="ErrorCount" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="GetErrorProcessingAccessionRequest">
        <xs:annotation>
          <xs:documentation>Get ErrorProcessing Accession Request message structure.It takes client ID and Correspondence Type( Client or Patient) and other optional field as input .</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="ErrorProcessingAccessionMessage" type="ErrorProcessingAccessionRequestMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ErrorProcessingAccessionRequestMessage">
        <xs:sequence>
          <xs:element name="ClientId" type="types:ClientIdType"/>
          <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
          <xs:element minOccurs="0" name="DateOfService" type="xs:date"/>
          <xs:element minOccurs="0" name="PatientId" type="types:IdType"/>
          <xs:element minOccurs="0" name="ErrorField" type="xs:string"/>
          <xs:element minOccurs="0" name="OrderingPhysician" type="types:NameType"/>
          <xs:element name="CorrespondanceType" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="GetErrorProcessingAccessionResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="GetErrorProcessingAccessionResponseMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetErrorProcessingAccessionResponseMessage">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ErrorProcessingAccessionResponseMessage" type="ErrorProcessingAccessionResponseMessage"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ErrorProcessingAccessionResponseMessage">
        <xs:sequence>
          <xs:element name="RowId" type="xs:int"/>
          <xs:element minOccurs="0" name="AccessionId" type="types:AccessionIdType"/>
          <xs:element name="DateOfService" type="xs:date"/>
          <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
          <xs:element minOccurs="0" name="PatientId" type="types:IdType"/>
          <xs:element minOccurs="0" name="PatientSSN" type="types:SSNType"/>
          <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
          <xs:element minOccurs="0" name="OrderingPhysician" type="types:NameType"/>
          <xs:element minOccurs="0" name="NPI" type="types:NPIType"/>
          <xs:element minOccurs="0" name="ErrorCount" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="GetAccessionCountInEpQueueRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="ClientId" type="types:ClientIdType"/>
                  <xs:element name="CorrespondanceType" type="types:DescriptionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAccessionCountInEpQueueResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="NoOfAccessionsInEpQueue" type="xs:int"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetClientsInEpQueueRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="CorrespondanceType" type="types:DescriptionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetClientsInEpQueueResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="Clients" type="ClientDetails"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ClientDetails">
        <xs:sequence>
          <xs:element name="ClientId" type="types:ClientIdType"/>
          <xs:element minOccurs="0" name="ClientName" type="types:AccountNameType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetErrorProcessingAccessionResponse">
    <wsdl:part element="tns:GetErrorProcessingAccessionResponse" name="GetErrorProcessingAccessionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientsInEpQueueRequest">
    <wsdl:part element="tns:GetClientsInEpQueueRequest" name="GetClientsInEpQueueRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientsInEpQueueResponse">
    <wsdl:part element="tns:GetClientsInEpQueueResponse" name="GetClientsInEpQueueResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAccessionCountInEpQueueRequest">
    <wsdl:part element="tns:GetAccessionCountInEpQueueRequest" name="GetAccessionCountInEpQueueRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetErrorProcessingSummaryResponse">
    <wsdl:part element="tns:GetErrorProcessingSummaryResponse" name="GetErrorProcessingSummaryResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAccessionCountInEpQueueResponse">
    <wsdl:part element="tns:GetAccessionCountInEpQueueResponse" name="GetAccessionCountInEpQueueResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetErrorProcessingAccessionRequest">
    <wsdl:part element="tns:GetErrorProcessingAccessionRequest" name="GetErrorProcessingAccessionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetErrorProcessingSummaryRequest">
    <wsdl:part element="tns:GetErrorProcessingSummaryRequest" name="GetErrorProcessingSummaryRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="errorProcessing">
    <wsdl:operation name="GetErrorProcessingAccession">
      <wsdl:input message="tns:GetErrorProcessingAccessionRequest" name="GetErrorProcessingAccessionRequest"></wsdl:input>
      <wsdl:output message="tns:GetErrorProcessingAccessionResponse" name="GetErrorProcessingAccessionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientsInEpQueue">
      <wsdl:input message="tns:GetClientsInEpQueueRequest" name="GetClientsInEpQueueRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientsInEpQueueResponse" name="GetClientsInEpQueueResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAccessionCountInEpQueue">
      <wsdl:input message="tns:GetAccessionCountInEpQueueRequest" name="GetAccessionCountInEpQueueRequest"></wsdl:input>
      <wsdl:output message="tns:GetAccessionCountInEpQueueResponse" name="GetAccessionCountInEpQueueResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetErrorProcessingSummary">
      <wsdl:input message="tns:GetErrorProcessingSummaryRequest" name="GetErrorProcessingSummaryRequest"></wsdl:input>
      <wsdl:output message="tns:GetErrorProcessingSummaryResponse" name="GetErrorProcessingSummaryResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="errorProcessingSoap11" type="tns:errorProcessing">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetErrorProcessingAccession">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetErrorProcessingAccessionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetErrorProcessingAccessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientsInEpQueue">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientsInEpQueueRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientsInEpQueueResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAccessionCountInEpQueue">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAccessionCountInEpQueueRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAccessionCountInEpQueueResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetErrorProcessingSummary">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetErrorProcessingSummaryRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetErrorProcessingSummaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="errorProcessingService">
    <wsdl:port binding="tns:errorProcessingSoap11" name="errorProcessingSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="GetAccessionCountInEpQueue" bindingOperationName="GetAccessionCountInEpQueue" type="Request-Response" outputName="GetAccessionCountInEpQueueResponse" inputName="GetAccessionCountInEpQueueRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="7aa03c45-09e3-49f5-8b96-e89ea581c375"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="6e234adf-ba92-4df3-97b8-8e9fcc015e9f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:err="http://www.xifin.com/schema/errorProcessing" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <err:GetAccessionCountInEpQueueRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <err:Payload>
            <err:ClientId>100</err:ClientId>
            <err:CorrespondanceType>Client</err:CorrespondanceType>
         </err:Payload>
      </err:GetAccessionCountInEpQueueRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/errorProcessing/errorProcessing/GetAccessionCountInEpQueueRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientsInEpQueue" bindingOperationName="GetClientsInEpQueue" type="Request-Response" outputName="GetClientsInEpQueueResponse" inputName="GetClientsInEpQueueRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="69cbc824-ec6c-4b47-bc8d-ed74f8adfad1"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="7a7a7c02-58be-4a33-8332-410b74fa6d0a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:err="http://www.xifin.com/schema/errorProcessing" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <err:GetClientsInEpQueueRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <err:Payload>
            <err:CorrespondanceType>Client</err:CorrespondanceType>
         </err:Payload>
      </err:GetClientsInEpQueueRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/errorProcessing/errorProcessing/GetClientsInEpQueueRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetErrorProcessingAccession" bindingOperationName="GetErrorProcessingAccession" type="Request-Response" outputName="GetErrorProcessingAccessionResponse" inputName="GetErrorProcessingAccessionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="6546e2dc-80a0-4057-9ead-2ad73caff9f8"><con:settings/><con:call name="Request 1" wssPasswordType="PasswordDigest" id="4249e9ae-04a7-4e08-808c-9ca16af8b481"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:err="http://www.xifin.com/schema/errorProcessing" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <err:GetErrorProcessingAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <err:Payload>
            <err:ErrorProcessingAccessionMessage>
               <err:ClientId>100</err:ClientId>
               <err:CorrespondanceType>Client</err:CorrespondanceType>
            </err:ErrorProcessingAccessionMessage>
         </err:Payload>
      </err:GetErrorProcessingAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/errorProcessing/errorProcessing/GetErrorProcessingAccessionRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetErrorProcessingSummary" bindingOperationName="GetErrorProcessingSummary" type="Request-Response" outputName="GetErrorProcessingSummaryResponse" inputName="GetErrorProcessingSummaryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4e27a6db-3012-4d62-a4ac-1631c201efb0"><con:settings/><con:call name="Request 1" id="06038137-443a-41fb-984e-1ecd0e82673f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:err="http://www.xifin.com/schema/errorProcessing" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <err:GetErrorProcessingSummaryRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <err:Payload>
            <err:EPSummaryRequestMessage>
               <err:ClientId>?</err:ClientId>
               <!--Optional:-->
               <err:PatientName>
                  <err:Order>?</err:Order>
               </err:PatientName>
               <!--Optional:-->
               <err:DateOfService>
                  <err:Order>?</err:Order>
               </err:DateOfService>
               <!--Optional:-->
               <err:PatientId>
                  <err:Order>?</err:Order>
               </err:PatientId>
               <!--Optional:-->
               <err:ErrorField>
                  <err:Order>?</err:Order>
               </err:ErrorField>
               <!--Optional:-->
               <err:OrderingPhysician>
                  <err:Order>?</err:Order>
               </err:OrderingPhysician>
               <err:CorrespondanceType>?</err:CorrespondanceType>
            </err:EPSummaryRequestMessage>
         </err:Payload>
      </err:GetErrorProcessingSummaryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/errorProcessing/errorProcessing/GetErrorProcessingSummaryRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" wssPasswordType="PasswordDigest" id="5dc9b317-6fe9-4522-a6bc-631c096b97fb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:err="http://www.xifin.com/schema/errorProcessing" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <err:GetErrorProcessingSummaryRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>22222</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <err:Payload>
            <err:EPSummaryRequestMessage>
               <err:ClientId>100</err:ClientId>
               
               <err:CorrespondanceType>Client</err:CorrespondanceType>
            </err:EPSummaryRequestMessage>
         </err:Payload>
      </err:GetErrorProcessingSummaryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/errorProcessing/errorProcessing/GetErrorProcessingSummaryRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="accessionSearchPatientPortalSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/accessionSearchPatientPortal}accessionSearchPatientPortalSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/accessionSearchPatientPortal.wsdl" id="097a38b9-3cc7-478b-a3b2-34cfd2e0d9a3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/accessionSearchPatientPortal.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/accessionSearchPatientPortal.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/accessionSearchPatientPortal" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/accessionSearchPatientPortal" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/accessionSearchPatientPortal">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/accessionSearchPatientPortal" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/accessionSearchPatientPortal" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="AccessionSearchPatientPortalRequest">
        <xs:annotation>
          <xs:documentation>Accession Search For Patient Portal Request Message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="AccessionSearchPatientPortalRequestMessage"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchPatientPortalResponse">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="Status" type="types:StatusType"/>
                  <xs:element minOccurs="0" name="TotalPatientDueAmount" type="types:AmountType"/>
                  <xs:element minOccurs="0" name="TotalBalanceDueAmount" type="types:AmountType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" ref="AccessionSearchPatientPortalResponseMessage"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchPatientPortalRequestMessage">
        <xs:annotation>
          <xs:documentation>By default response will contain maximum of 100 records, if more than one records need to
                be retrieved
                send the start and end row numbers.
                The data will returned between start and end record row numbers.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="AccessionId" type="xs:string"/>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="SubmissionId" type="xs:string"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="xs:string"/>
            <xs:element default="1" minOccurs="0" name="StartRowNumber" type="xs:integer"/>
            <xs:element default="100" minOccurs="0" name="EndRowNumber" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AccessionSearchPatientPortalResponseMessage">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="RowId" type="xs:int"/>
            <xs:element minOccurs="0" name="AccessionId" type="types:AccessionIdType"/>
            <xs:element minOccurs="0" name="ClientId" type="types:IdType"/>
            <xs:element minOccurs="0" name="Dos" type="xs:date"/>
            <xs:element minOccurs="0" name="BalanceDueAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientDueAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="PatientId" type="types:NameIdType"/>
            <xs:element minOccurs="0" name="PatientDOB" type="xs:date"/>
            <xs:element minOccurs="0" name="PatientName" type="types:NameType"/>
            <xs:element minOccurs="0" name="PatientAddress" type="types:AddressType"/>
            <xs:element minOccurs="0" name="PatientSSN" type="types:SSNType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="AccessionSearchPatientPortalResponse">
    <wsdl:part element="tns:AccessionSearchPatientPortalResponse" name="AccessionSearchPatientPortalResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AccessionSearchPatientPortalRequest">
    <wsdl:part element="tns:AccessionSearchPatientPortalRequest" name="AccessionSearchPatientPortalRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="accessionSearchPatientPortal">
    <wsdl:operation name="AccessionSearchPatientPortal">
      <wsdl:input message="tns:AccessionSearchPatientPortalRequest" name="AccessionSearchPatientPortalRequest"></wsdl:input>
      <wsdl:output message="tns:AccessionSearchPatientPortalResponse" name="AccessionSearchPatientPortalResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="accessionSearchPatientPortalSoap11" type="tns:accessionSearchPatientPortal">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="AccessionSearchPatientPortal">
      <soap:operation soapAction=""/>
      <wsdl:input name="AccessionSearchPatientPortalRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AccessionSearchPatientPortalResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="accessionSearchPatientPortalService">
    <wsdl:port binding="tns:accessionSearchPatientPortalSoap11" name="accessionSearchPatientPortalSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="AccessionSearchPatientPortal" bindingOperationName="AccessionSearchPatientPortal" type="Request-Response" outputName="AccessionSearchPatientPortalResponse" inputName="AccessionSearchPatientPortalRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="12fd356a-d9cd-47b5-a89f-679a768bef3b"><con:settings/><con:call name="Request 1" id="73f26d0f-9685-4d24-b187-50f84fc2af8b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accessionSearchPatientPortal" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:AccessionSearchPatientPortalRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:AccessionSearchPatientPortalRequestMessage>
               <!--Optional:-->
               <acc:AccessionId>?</acc:AccessionId>
               <!--Optional:-->
               <acc:PatientId>?</acc:PatientId>
               <!--Optional:-->
               <acc:SubmissionId>?</acc:SubmissionId>
               <!--Optional:-->
               <acc:PatientDOB>?</acc:PatientDOB>
               <!--Optional:-->
               <acc:PatientAddress>
                  <!--Optional:-->
                  <typ:AddressLine1>?</typ:AddressLine1>
                  <!--Optional:-->
                  <typ:AddressLine2>?</typ:AddressLine2>
                  <!--Optional:-->
                  <typ:City>?</typ:City>
                  <!--Optional:-->
                  <typ:State>?</typ:State>
                  <!--Optional:-->
                  <typ:ZIP>?</typ:ZIP>
                  <!--Optional:-->
                  <typ:CountryCode>?</typ:CountryCode>
               </acc:PatientAddress>
               <!--Optional:-->
               <acc:ClientId>?</acc:ClientId>
               <!--Optional:-->
               <acc:PatientSSN>?</acc:PatientSSN>
               <!--Optional:-->
               <acc:StartRowNumber>1</acc:StartRowNumber>
               <!--Optional:-->
               <acc:EndRowNumber>100</acc:EndRowNumber>
            </acc:AccessionSearchPatientPortalRequestMessage>
         </acc:Payload>
      </acc:AccessionSearchPatientPortalRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accessionSearchPatientPortal/accessionSearchPatientPortal/AccessionSearchPatientPortalRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="patientPaymentSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/patientPayment}patientPaymentSoap11" soapVersion="1_1" anonymous="optional" definition="http://xapp-10:8080/prod/accessionv7/patientPayment.wsdl" id="5d4982d0-504d-456e-bfd8-46239bfd4372" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xapp-10:8080/prod/accessionv7/patientPayment.wsdl"><con:part><con:url>http://xapp-10:8080/prod/accessionv7/patientPayment.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/patientPayment" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/patientPayment" xmlns:sch1="http://www.xifin.com/schema/types" xmlns:sch2="http://www.xifin.com/schema/msgHeader" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/patientPayment">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/patientPayment" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/patientPayment" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types">
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:element name="CashPaymentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="CashPayment"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicCardPaymentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="Sale"/>
                  <xs:element ref="Void"/>
                  <xs:element ref="Credit"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicCardPaymentPerPatientRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="SalePerPatient"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddElectronicPromisedPaymentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="ElectronicPromisedPayment"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddElectronicPromisedPaymentResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="BusinessObject">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element ref="ElectronicPaymentResp"/>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddPromisedPaymentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="PromisedPayment"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddPromisedPaymentResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CheckPaymentRequest">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="CheckPayment"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicCardPaymentResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="BusinessObject">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element ref="ElectronicPaymentResp"/>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicCardPaymentPerPatientResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="BusinessObject">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element ref="ElectronicPaymentPerPatientResp"/>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CashPaymentResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="BusinessObject">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element ref="CashOrCheckPaymentResp"/>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CheckPaymentResponse">
        <xs:annotation>
          <xs:documentation>Soap request message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="BusinessObject">
                    <xs:complexType>
                      <xs:choice>
                        <xs:element ref="CashOrCheckPaymentResp"/>
                      </xs:choice>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="VoidCurrentPaymentPlanRequest">
        <xs:annotation>
          <xs:documentation>Void current ppromised payment plan Request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element ref="VoidCurrentPaymentPlan"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="VoidCurrentPaymentPlanResponse">
        <xs:annotation>
          <xs:documentation>Soap response message structure</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="VoidCurrentPaymentPlan">
        <xs:annotation>
          <xs:documentation>Void current ppromised payment plan message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Sale">
        <xs:annotation>
          <xs:documentation>Sale transaction request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element name="PaymentMethod" type="types:PaymentMethodType"/>
            <xs:element name="CardType" type="types:CardTypeType"/>
            <xs:element name="AccountNumber" type="xs:integer">
              <xs:annotation>
                <xs:documentation>Credit card number.For the Pinless debit AccountNumber can be the bank account
                            number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ExpirationDate" type="ExpirationDateType"/>
            <xs:element name="PaymentAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element minOccurs="0" name="SecurityCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>Credit card security number for online transactions
                            (referred to also as CVV2, CVC2, CSC or CID). This is a 3-digit (Visa, Master, Discover) or
                            4-digit (Amex) number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="AccountHolderFirstName" type="NameType"/>
            <xs:element minOccurs="0" name="AccountHolderLastName" type="NameType"/>
            <xs:element minOccurs="0" name="StreetAddress" type="NameType"/>
            <xs:element minOccurs="0" name="Zip" type="ZipType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SalePerPatient">
        <xs:annotation>
          <xs:documentation>Sale transaction request message structure. EPI or List of accessions are required.
                PaymentAmount is required when  EPI is sent in the request otherwise
                AccessionTyp will have payment amount per accession.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="EPI" type="types:EpiType"/>
            <xs:element minOccurs="0" name="PaymentAmount" type="types:AmountType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="Accessions" type="AccessionTyp"/>
            <xs:element name="PaymentMethod" type="types:PaymentMethodType"/>
            <xs:element name="CardType" type="types:CardTypeType"/>
            <xs:element name="AccountNumber" type="xs:integer">
              <xs:annotation>
                <xs:documentation>Credit card number.For the Pinless debit AccountNumber can be the bank account
                            number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ExpirationDate" type="ExpirationDateType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element minOccurs="0" name="SecurityCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>Credit card security number for online transactions
                            (referred to also as CVV2, CVC2, CSC or CID). This is a 3-digit (Visa, Master, Discover) or
                            4-digit (Amex) number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="AccountHolderFirstName" type="NameType"/>
            <xs:element minOccurs="0" name="AccountHolderLastName" type="NameType"/>
            <xs:element minOccurs="0" name="StreetAddress" type="NameType"/>
            <xs:element minOccurs="0" name="Zip" type="ZipType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicPromisedPayment">
        <xs:annotation>
          <xs:documentation>Recurring transaction request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element name="PaymentMethod" type="types:PaymentMethodType"/>
            <xs:element name="CardType" type="types:CardTypeType"/>
            <xs:element name="AccountNumber" type="xs:integer">
              <xs:annotation>
                <xs:documentation>Credit card number.For the Pinless debit AccountNumber can be the bank account
                            number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ExpirationDate" type="ExpirationDateType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element minOccurs="0" name="SecurityCode" type="xs:string">
              <xs:annotation>
                <xs:documentation>Credit card security number for online transactions
                            (referred to also as CVV2, CVC2, CSC or CID). This is a 3-digit (Visa, Master, Discover) or
                            4-digit (Amex) number.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="AccountHolderFirstName" type="NameType"/>
            <xs:element minOccurs="0" name="AccountHolderLastName" type="NameType"/>
            <xs:element minOccurs="0" name="StreetAddress" type="NameType"/>
            <xs:element minOccurs="0" name="Zip" type="ZipType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element name="DunningCycle" type="types:SmallInt"/>
            <xs:element name="RecurringPaymentAmount" type="types:AmountType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PromisedPayment">
        <xs:annotation>
          <xs:documentation>Recurring transaction request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element name="DunningCycle" type="types:SmallInt"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element name="RecurringPaymentAmount" type="types:AmountType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Credit">
        <xs:annotation>
          <xs:documentation>Credit transaction request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="TransactionId" type="types:DescriptionType">
              <xs:annotation>
                <xs:documentation>Original TransactionId returned from Original Transaction</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TransactionAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Void">
        <xs:annotation>
          <xs:documentation>Void transaction request message structure.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="TransactionId" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CheckPayment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element minOccurs="0" name="ReceiptId" type="types:DescriptionType"/>
            <xs:element name="CheckNumber" type="types:DescriptionType"/>
            <xs:element name="PaymentAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CashPayment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element minOccurs="0" name="ReceiptId" type="types:DescriptionType"/>
            <xs:element name="PaymentAmount" type="types:AmountType"/>
            <xs:element minOccurs="0" name="Comment" type="types:NoteType"/>
            <xs:element default="false" minOccurs="0" name="PrintOnPatientStatement" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PaymentLocation" type="types:AbbrevType">
              <xs:annotation>
                <xs:documentation>If PSC is not provided system defaults to Main Lab</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicPaymentResp">
        <xs:annotation>
          <xs:documentation>Electronic Payment response from Xifin</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element name="TransactionId" type="TransactionId">
              <xs:annotation>
                <xs:documentation>a unique number that identifies the transaction</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Result" type="xs:integer">
              <xs:annotation>
                <xs:documentation>The outcome of the attempted transaction. A
                            result of 0 (zero) indicates the transaction was
                            approved. Any other number indicates a decline
                            or error.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="CVV2Match" type="CVV2MatchType">
              <xs:annotation>
                <xs:documentation>Result of the card security code (CVV2) check.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="AuthorizationCode" type="AuthorizationCodeType"/>
            <xs:element minOccurs="0" name="ResponseMessage" type="types:NoteType">
              <xs:annotation>
                <xs:documentation>The response message returned with the transaction result. Exact wording
                            varies.
                            Sometimes a colon appears after the initial response message followed by more detailed
                            information</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="TransactionFee" type="types:AmountType"/>
            <xs:element name="TransactionAmount" type="types:AmountType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ElectronicPaymentPerPatientResp">
        <xs:annotation>
          <xs:documentation>Electronic Payment response from Xifin.
                When the request contains EPI , response will contain EPI
                When the request contains Accessions , response will contain Accessions</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="EPI" type="types:EpiType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="Accessions" type="AccessionTyp"/>
            <xs:element name="TransactionId" type="TransactionId">
              <xs:annotation>
                <xs:documentation>a unique number that identifies the transaction</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Result" type="xs:integer">
              <xs:annotation>
                <xs:documentation>The outcome of the attempted transaction. A
                            result of 0 (zero) indicates the transaction was
                            approved. Any other number indicates a decline
                            or error.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="CVV2Match" type="CVV2MatchType">
              <xs:annotation>
                <xs:documentation>Result of the card security code (CVV2) check.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="AuthorizationCode" type="AuthorizationCodeType"/>
            <xs:element minOccurs="0" name="ResponseMessage" type="types:NoteType">
              <xs:annotation>
                <xs:documentation>The response message returned with the transaction result. Exact wording
                            varies.
                            Sometimes a colon appears after the initial response message followed by more detailed
                            information</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="TransactionFee" type="types:AmountType"/>
            <xs:element name="TransactionAmount" type="types:AmountType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CashOrCheckPaymentResp">
        <xs:annotation>
          <xs:documentation>Payment response from Xifin</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="AccessionId" type="types:AccessionIdType"/>
            <xs:element name="ReceiptId" type="types:DescriptionType"/>
            <xs:element name="ResponseMessage" type="types:NoteType"/>
            <xs:element name="PaymentAmount" type="types:AmountType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ExpirationDateType">
        <xs:sequence>
          <xs:element name="Month">
            <xs:annotation>
              <xs:documentation>Credit card expiration month. Example: 02</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
                <xs:pattern value="0[1-9]|1[012]"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element name="Year">
            <xs:annotation>
              <xs:documentation>Last two digits of the credit card expiration year. Example: 06</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
                <xs:pattern value="[0-9][0-9]"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="AuthorizationCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TransactionId">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StreetAddressType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="30"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ZipType">
        <xs:restriction base="xs:string">
          <xs:pattern value="\d{5}(-\d{4})?"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="30"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CVV2MatchType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="1"/>
          <xs:enumeration value="Y"/>
          <xs:enumeration value="N"/>
          <xs:enumeration value="X"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="AccessionTyp">
        <xs:sequence>
          <xs:element name="AccessionId" type="types:AccessionIdType"/>
          <xs:element name="PaymentAmount" type="types:AmountType"/>
          <xs:element minOccurs="0" name="Comment" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/types">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(([A-Za-z0-9][A-Za-z0-9-]*)|^)[A-Za-z0-9]"/>
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EmailAddressType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[^@]+@[^\.]+\..+"/>
          <xs:minLength value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EpiType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SourceNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccountNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="60"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DemonstrationProjectIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xifin.com/schema/msgHeader">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="20"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="AddPromisedPaymentResponse">
    <wsdl:part element="tns:AddPromisedPaymentResponse" name="AddPromisedPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CashPaymentResponse">
    <wsdl:part element="tns:CashPaymentResponse" name="CashPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddElectronicPromisedPaymentRequest">
    <wsdl:part element="tns:AddElectronicPromisedPaymentRequest" name="AddElectronicPromisedPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ElectronicCardPaymentPerPatientResponse">
    <wsdl:part element="tns:ElectronicCardPaymentPerPatientResponse" name="ElectronicCardPaymentPerPatientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddElectronicPromisedPaymentResponse">
    <wsdl:part element="tns:AddElectronicPromisedPaymentResponse" name="AddElectronicPromisedPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CheckPaymentResponse">
    <wsdl:part element="tns:CheckPaymentResponse" name="CheckPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="VoidCurrentPaymentPlanResponse">
    <wsdl:part element="tns:VoidCurrentPaymentPlanResponse" name="VoidCurrentPaymentPlanResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CheckPaymentRequest">
    <wsdl:part element="tns:CheckPaymentRequest" name="CheckPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddPromisedPaymentRequest">
    <wsdl:part element="tns:AddPromisedPaymentRequest" name="AddPromisedPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ElectronicCardPaymentRequest">
    <wsdl:part element="tns:ElectronicCardPaymentRequest" name="ElectronicCardPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ElectronicCardPaymentPerPatientRequest">
    <wsdl:part element="tns:ElectronicCardPaymentPerPatientRequest" name="ElectronicCardPaymentPerPatientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ElectronicCardPaymentResponse">
    <wsdl:part element="tns:ElectronicCardPaymentResponse" name="ElectronicCardPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="VoidCurrentPaymentPlanRequest">
    <wsdl:part element="tns:VoidCurrentPaymentPlanRequest" name="VoidCurrentPaymentPlanRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CashPaymentRequest">
    <wsdl:part element="tns:CashPaymentRequest" name="CashPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="patientPayment">
    <wsdl:operation name="AddPromisedPayment">
      <wsdl:input message="tns:AddPromisedPaymentRequest" name="AddPromisedPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AddPromisedPaymentResponse" name="AddPromisedPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CashPayment">
      <wsdl:input message="tns:CashPaymentRequest" name="CashPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:CashPaymentResponse" name="CashPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddElectronicPromisedPayment">
      <wsdl:input message="tns:AddElectronicPromisedPaymentRequest" name="AddElectronicPromisedPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AddElectronicPromisedPaymentResponse" name="AddElectronicPromisedPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ElectronicCardPaymentPerPatient">
      <wsdl:input message="tns:ElectronicCardPaymentPerPatientRequest" name="ElectronicCardPaymentPerPatientRequest"></wsdl:input>
      <wsdl:output message="tns:ElectronicCardPaymentPerPatientResponse" name="ElectronicCardPaymentPerPatientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CheckPayment">
      <wsdl:input message="tns:CheckPaymentRequest" name="CheckPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:CheckPaymentResponse" name="CheckPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="VoidCurrentPaymentPlan">
      <wsdl:input message="tns:VoidCurrentPaymentPlanRequest" name="VoidCurrentPaymentPlanRequest"></wsdl:input>
      <wsdl:output message="tns:VoidCurrentPaymentPlanResponse" name="VoidCurrentPaymentPlanResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ElectronicCardPayment">
      <wsdl:input message="tns:ElectronicCardPaymentRequest" name="ElectronicCardPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:ElectronicCardPaymentResponse" name="ElectronicCardPaymentResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="patientPaymentSoap11" type="tns:patientPayment">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="AddPromisedPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddPromisedPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddPromisedPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CashPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CashPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CashPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddElectronicPromisedPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddElectronicPromisedPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddElectronicPromisedPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ElectronicCardPaymentPerPatient">
      <soap:operation soapAction=""/>
      <wsdl:input name="ElectronicCardPaymentPerPatientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ElectronicCardPaymentPerPatientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CheckPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CheckPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CheckPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="VoidCurrentPaymentPlan">
      <soap:operation soapAction=""/>
      <wsdl:input name="VoidCurrentPaymentPlanRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="VoidCurrentPaymentPlanResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ElectronicCardPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="ElectronicCardPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ElectronicCardPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="patientPaymentService">
    <wsdl:port binding="tns:patientPaymentSoap11" name="patientPaymentSoap11">
      <soap:address location="http://xapp-10:8080/accession/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="AddElectronicPromisedPayment" bindingOperationName="AddElectronicPromisedPayment" type="Request-Response" outputName="AddElectronicPromisedPaymentResponse" inputName="AddElectronicPromisedPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d3950f71-acec-467d-8094-ab765d345033"><con:settings/><con:call name="Request 1" id="a5249736-b932-463d-bb0b-d0b4cd707dca"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:AddElectronicPromisedPaymentRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:ElectronicPromisedPayment>
               <pat:AccessionId>?</pat:AccessionId>
               <pat:PaymentMethod>?</pat:PaymentMethod>
               <pat:CardType>?</pat:CardType>
               <pat:AccountNumber>?</pat:AccountNumber>
               <pat:ExpirationDate>
                  <pat:Month>?</pat:Month>
                  <pat:Year>?</pat:Year>
               </pat:ExpirationDate>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:SecurityCode>?</pat:SecurityCode>
               <!--Optional:-->
               <pat:AccountHolderFirstName>?</pat:AccountHolderFirstName>
               <!--Optional:-->
               <pat:AccountHolderLastName>?</pat:AccountHolderLastName>
               <!--Optional:-->
               <pat:StreetAddress>?</pat:StreetAddress>
               <!--Optional:-->
               <pat:Zip>?</pat:Zip>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <pat:DunningCycle>?</pat:DunningCycle>
               <pat:RecurringPaymentAmount>?</pat:RecurringPaymentAmount>
            </pat:ElectronicPromisedPayment>
         </pat:Payload>
      </pat:AddElectronicPromisedPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/AddElectronicPromisedPaymentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AddPromisedPayment" bindingOperationName="AddPromisedPayment" type="Request-Response" outputName="AddPromisedPaymentResponse" inputName="AddPromisedPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d67bfc42-dcc6-4a59-8c8c-3a18d625e5ad"><con:settings/><con:call name="Request 1" id="9b4508d4-49b9-4791-8ddf-3d5a343b1b2c"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:AddPromisedPaymentRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:PromisedPayment>
               <pat:AccessionId>?</pat:AccessionId>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <pat:DunningCycle>?</pat:DunningCycle>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <pat:RecurringPaymentAmount>?</pat:RecurringPaymentAmount>
            </pat:PromisedPayment>
         </pat:Payload>
      </pat:AddPromisedPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/AddPromisedPaymentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CashPayment" bindingOperationName="CashPayment" type="Request-Response" outputName="CashPaymentResponse" inputName="CashPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b89e3579-533e-4e17-b858-e89c41d1cf1c"><con:settings/><con:call name="Request 1" id="7d0cf315-5373-4b8d-8982-723a56acd64f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:CashPaymentRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:CashPayment>
               <pat:AccessionId>?</pat:AccessionId>
               <!--Optional:-->
               <pat:ReceiptId>?</pat:ReceiptId>
               <pat:PaymentAmount>?</pat:PaymentAmount>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
            </pat:CashPayment>
         </pat:Payload>
      </pat:CashPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/CashPaymentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CheckPayment" bindingOperationName="CheckPayment" type="Request-Response" outputName="CheckPaymentResponse" inputName="CheckPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="76269a1d-8b01-40f3-921b-4d9092db3b81"><con:settings/><con:call name="Request 1" id="47fb3786-3a30-4261-927c-e5df18bc4e0c"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:CheckPaymentRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:CheckPayment>
               <pat:AccessionId>?</pat:AccessionId>
               <!--Optional:-->
               <pat:ReceiptId>?</pat:ReceiptId>
               <pat:CheckNumber>?</pat:CheckNumber>
               <pat:PaymentAmount>?</pat:PaymentAmount>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
            </pat:CheckPayment>
         </pat:Payload>
      </pat:CheckPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/CheckPaymentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ElectronicCardPayment" bindingOperationName="ElectronicCardPayment" type="Request-Response" outputName="ElectronicCardPaymentResponse" inputName="ElectronicCardPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4e8721f3-fd8f-4941-b4cb-1bfbebad58d5"><con:settings/><con:call name="Request 1" id="cf0a6caa-d42c-4934-a064-9947ce7247a0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:ElectronicCardPaymentRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <!--You have a CHOICE of the next 3 items at this level-->
            <pat:Sale>
               <pat:AccessionId>?</pat:AccessionId>
               <pat:PaymentMethod>?</pat:PaymentMethod>
               <pat:CardType>?</pat:CardType>
               <pat:AccountNumber>?</pat:AccountNumber>
               <pat:ExpirationDate>
                  <pat:Month>?</pat:Month>
                  <pat:Year>?</pat:Year>
               </pat:ExpirationDate>
               <pat:PaymentAmount>?</pat:PaymentAmount>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:SecurityCode>?</pat:SecurityCode>
               <!--Optional:-->
               <pat:AccountHolderFirstName>?</pat:AccountHolderFirstName>
               <!--Optional:-->
               <pat:AccountHolderLastName>?</pat:AccountHolderLastName>
               <!--Optional:-->
               <pat:StreetAddress>?</pat:StreetAddress>
               <!--Optional:-->
               <pat:Zip>?</pat:Zip>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
            </pat:Sale>
            <pat:Void>
               <pat:TransactionId>?</pat:TransactionId>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
            </pat:Void>
            <pat:Credit>
               <pat:TransactionId>?</pat:TransactionId>
               <pat:TransactionAmount>?</pat:TransactionAmount>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
            </pat:Credit>
         </pat:Payload>
      </pat:ElectronicCardPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/ElectronicCardPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ElectronicCardPaymentPerPatient" bindingOperationName="ElectronicCardPaymentPerPatient" type="Request-Response" outputName="ElectronicCardPaymentPerPatientResponse" inputName="ElectronicCardPaymentPerPatientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="909d235b-8882-467d-ae75-3f688a6f0444"><con:settings/><con:call name="Request 1" id="852ffbd0-e6f3-4f08-8068-aedf9035d7dd"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:ElectronicCardPaymentPerPatientRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:SalePerPatient>
               <!--Optional:-->
               <pat:EPI>?</pat:EPI>
               <!--Optional:-->
               <pat:PaymentAmount>?</pat:PaymentAmount>
               <!--Zero or more repetitions:-->
               <pat:Accessions>
                  <pat:AccessionId>?</pat:AccessionId>
                  <pat:PaymentAmount>?</pat:PaymentAmount>
                  <!--Optional:-->
                  <pat:Comment>?</pat:Comment>
               </pat:Accessions>
               <pat:PaymentMethod>?</pat:PaymentMethod>
               <pat:CardType>?</pat:CardType>
               <pat:AccountNumber>?</pat:AccountNumber>
               <pat:ExpirationDate>
                  <pat:Month>?</pat:Month>
                  <pat:Year>?</pat:Year>
               </pat:ExpirationDate>
               <!--Optional:-->
               <pat:Comment>?</pat:Comment>
               <!--Optional:-->
               <pat:SecurityCode>?</pat:SecurityCode>
               <!--Optional:-->
               <pat:AccountHolderFirstName>?</pat:AccountHolderFirstName>
               <!--Optional:-->
               <pat:AccountHolderLastName>?</pat:AccountHolderLastName>
               <!--Optional:-->
               <pat:StreetAddress>?</pat:StreetAddress>
               <!--Optional:-->
               <pat:Zip>?</pat:Zip>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
               <!--Optional:-->
               <pat:PaymentLocation>?</pat:PaymentLocation>
            </pat:SalePerPatient>
         </pat:Payload>
      </pat:ElectronicCardPaymentPerPatientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/ElectronicCardPaymentPerPatientRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="VoidCurrentPaymentPlan" bindingOperationName="VoidCurrentPaymentPlan" type="Request-Response" outputName="VoidCurrentPaymentPlanResponse" inputName="VoidCurrentPaymentPlanRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="208fe73e-d066-49db-83e4-05e09d73b01a"><con:settings/><con:call name="Request 1" id="59352f22-74c5-4fbb-bc13-87053cdb8c0e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://xapp-10:8080/accession/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:VoidCurrentPaymentPlanRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:OrganizationName>?</msg:OrganizationName>
            <!--Optional:-->
            <msg:SequenceNumber>?</msg:SequenceNumber>
            <msg:UserId>?</msg:UserId>
            <!--Optional:-->
            <msg:SourceApplication>?</msg:SourceApplication>
            <!--Optional:-->
            <msg:OrgAlias>?</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:VoidCurrentPaymentPlan>
               <pat:AccessionId>?</pat:AccessionId>
            </pat:VoidCurrentPaymentPlan>
         </pat:Payload>
      </pat:VoidCurrentPaymentPlanRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/VoidCurrentPaymentPlanRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="cf231cb2-90bc-4fd7-8db4-f004c8280dbf" wadlVersion="http://wadl.dev.java.net/2009/02" name="Accession WS_Prodv7_Utils" type="rest" definitionUrl="CreateNewAccnWith3rdPartyPayor" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:interface xsi:type="con:WsdlInterface" id="a70109ba-1a3d-4bff-933c-6888ee826fe7" wsaVersion="NONE" name="testcodeSoap11" type="wsdl" bindingName="{http://www.xifin.com/schema/testcode}testcodeSoap11" soapVersion="1_1" anonymous="optional" definition="http://localhost:8083/filemaintenance/testcode.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8083/filemaintenance/testcode.wsdl"><con:part><con:url>http://localhost:8083/filemaintenance/testcode.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.xifin.com/schema/testcode" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://www.xifin.com/schema/testcode" xmlns:sch1="http://www.xifin.com/schema/msgHeader" xmlns:sch2="http://www.xifin.com/schema/types" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.xifin.com/schema/testcode">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/testcode" xmlns="http://www.xifin.com/schema/testcode" xmlns:msgHeader="http://www.xifin.com/schema/msgHeader" xmlns:types="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:import namespace="http://www.xifin.com/schema/msgHeader"/>
      <xs:import namespace="http://www.xifin.com/schema/types"/>
      <xs:element name="SearchTestCodeRequest">
        <xs:annotation>
          <xs:documentation>Search Test Code Request Message</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="TestCodeSearch" type="TestCodeSearch"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SearchTestCodeResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="TestCodeSearchResponseMessage">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="TestCodeSearchResult" type="TestCodeSearchResult"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestRequest">
        <xs:annotation>
          <xs:documentation>Load test by testId if test is a profile it will return components of a profile.
                When dos provided it uses system date to find components of a profile.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
                  <xs:element minOccurs="0" name="Dos" type="xs:date"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element name="GetTestResponseMessage">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="TestCodeInfo" type="TestCodeInfo"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="TestCodeSearch">
        <xs:sequence>
          <xs:element minOccurs="0" name="TestCodeId" type="xs:string"/>
          <xs:element minOccurs="0" name="TestCodeName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Facility" type="DescriptionType"/>
          <xs:element minOccurs="0" name="CPTCode" type="DescriptionType"/>
          <xs:element minOccurs="0" name="CPTDescription" type="DescriptionType"/>
          <xs:element minOccurs="0" name="TestType" type="DescriptionType"/>
          <xs:element default="false" minOccurs="0" name="IncludeProfilesOnly" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="IncludeNonProfilesOnly" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="IncludeExpiredRecords" type="xs:boolean"/>
          <xs:element default="true" minOccurs="0" name="SortByTest" type="xs:boolean"/>
          <xs:element default="false" minOccurs="0" name="SortByFacility" type="xs:boolean"/>
          <xs:element default="1" minOccurs="0" name="StartRowNumber" type="xs:integer"/>
          <xs:element default="100" minOccurs="0" name="EndRowNumber" type="xs:integer"/>
          <xs:element minOccurs="0" name="ProcedureCodeType" type="xs:string"/>
          <xs:element minOccurs="0" name="RestrictToPriceTables" type="xs:string"/>
          <xs:element minOccurs="0" name="TestPriceInEffectDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestCodeInfo">
        <xs:sequence>
          <xs:element name="TestCode" type="TestCode"/>
          <xs:element name="Profile" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Components" type="TestCode"/>
          <xs:element minOccurs="0" name="ProfileType" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestCode">
        <xs:sequence>
          <xs:element minOccurs="0" name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element minOccurs="0" name="TestCodeName" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestCodeSearchResult">
        <xs:sequence>
          <xs:element name="TestId" type="types:TestCodeIdType"/>
          <xs:element name="TestName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Facility" type="DescriptionType"/>
          <xs:element minOccurs="0" name="CPTCode" type="DescriptionType"/>
          <xs:element minOccurs="0" name="CPTDescription" type="DescriptionType"/>
          <xs:element minOccurs="0" name="CPTTable" type="DescriptionType"/>
          <xs:element minOccurs="0" name="TestType" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="InfoType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:element name="AddSingleTestRequest">
        <xs:annotation>
          <xs:documentation>AddSingle Test Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AddSingleTestType" type="AddSingleTestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddSingleTestResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AddSingleTestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="types:LabTestCodeIdType"/>
          <xs:element minOccurs="0" name="ProfileComponentOnly" type="xs:boolean"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="TestType" type="types:DescriptionType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element name="Department" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="MaxDiscountPercent" type="types:PercentType"/>
          <xs:element minOccurs="0" name="MaxDiscountLevel" type="types:DiscountLevelType"/>
          <xs:element default="true" name="FDAApproval" type="xs:boolean"/>
          <xs:element minOccurs="0" name="TradeDiscount" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Taxable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AllowMultipleOrders" type="xs:boolean"/>
          <xs:element default="true" name="PublishService" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
          <xs:element maxOccurs="unbounded" name="ProcedureCodes" type="ProceduresType"/>
          <xs:element maxOccurs="unbounded" name="Facilities" type="FacilitiesType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorModifiers" type="TestModifier"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupModifiers" type="TestPayorGroupModifier"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FeeSchedules" type="FeeSchedulesType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CrossReferences" type="CrossReferenceType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SuppressCrossTestConsolidations" type="SuppressCrossTestConsolidationsType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="AddProfileRequest">
        <xs:annotation>
          <xs:documentation>Add Profile Test Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AddProfileRequestType" type="AddProfileRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddProfileResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AddProfileRequestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="types:LabTestCodeIdType"/>
          <xs:element minOccurs="0" name="ProfileComponentOnly" type="xs:boolean"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="TestType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ExplodeComponents" type="xs:boolean"/>
          <xs:element minOccurs="0" name="UseSumOfComponents" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ProfileType" type="types:DescriptionType">
            <xs:annotation>
              <xs:documentation>Fixed - all components setup in file maintenance must be present when creating an order.
                        Flexible - a subset of components can be present when creating the order.
                        Ad Hoc - any components can be present when creating an order; there will be no validation against file maintenance.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="MaxDiscountPercent" type="types:PercentType"/>
          <xs:element minOccurs="0" name="MaxDiscountLevel" type="types:DiscountLevelType"/>
          <xs:element minOccurs="0" name="TradeDiscount" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Taxable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AllowMultipleOrders" type="xs:boolean"/>
          <xs:element default="true" name="PublishService" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProfileComponents" type="ProfileComponentsType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FeeSchedules" type="FeeSchedulesType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CrossReferences" type="CrossReferenceType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SuppressCrossTestConsolidations" type="SuppressCrossTestConsolidationsType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="AddNoLoadTestRequest">
        <xs:annotation>
          <xs:documentation>Add No Load Test Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="AddNoLoadTestRequest" type="AddNoLoadTestRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddNoLoadTestResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AddNoLoadTestRequestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UpdateSingleTestRequest">
        <xs:annotation>
          <xs:documentation>Update Single Test Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateSingleTestRequest" type="UpdateSingleTestRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdateSingleTestResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="UpdateSingleTestRequestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="types:LabTestCodeIdType"/>
          <xs:element minOccurs="0" name="ProfileComponentOnly" type="xs:boolean"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="TestType" type="types:DescriptionType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="Department" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="MaxDiscountPercent" type="types:PercentType"/>
          <xs:element minOccurs="0" name="MaxDiscountLevel" type="types:DiscountLevelType"/>
          <xs:element minOccurs="0" name="FDAApproval" type="xs:boolean"/>
          <xs:element minOccurs="0" name="TradeDiscount" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Taxable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AllowMultipleOrders" type="xs:boolean"/>
          <xs:element minOccurs="0" name="PublishService" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProcedureCodes" type="ProceduresType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Facilities" type="FacilitiesType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorModifiers" type="TestModifier"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupModifiers" type="TestPayorGroupModifier"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FeeSchedules" type="FeeSchedulesType"/>
          <xs:element default="false" minOccurs="0" name="UseAlternateXrefRefreshLogic" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>When set to TRUE, the system will expire all cross references
                        associated with the test code that are not present in the request.  The expiration date
                        will be set to the day prior to the earliest provided XREF effective date provided in the request.  If no new
                        XREFs of the same type are present in the request, the expiration date will be set to yesterday.
                        Additionally, if the XREF is already in the system and contained in the request,
                        only the earliest effective date and latest expiration date (if present) will
                        be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CrossReferences" type="CrossReferenceType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SuppressCrossTestConsolidations" type="SuppressCrossTestConsolidationsType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UpdateProfileRequest">
        <xs:annotation>
          <xs:documentation>Update Profile Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateProfileRequest" type="UpdateProfileRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdateProfileResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="UpdateProfileRequestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element minOccurs="0" name="LabTestCodeId" type="types:LabTestCodeIdType"/>
          <xs:element minOccurs="0" name="ProfileComponentOnly" type="xs:boolean"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="TestType" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ExplodeComponents" type="xs:boolean"/>
          <xs:element minOccurs="0" name="UseSumOfComponents" type="xs:boolean"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="MaxDiscountPercent" type="types:PercentType"/>
          <xs:element minOccurs="0" name="MaxDiscountLevel" type="types:DiscountLevelType"/>
          <xs:element minOccurs="0" name="TradeDiscount" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Taxable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="AllowMultipleOrders" type="xs:boolean"/>
          <xs:element minOccurs="0" name="PublishService" type="xs:boolean"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProfileComponents" type="ProfileComponentsType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FeeSchedules" type="FeeSchedulesType"/>
          <xs:element default="false" minOccurs="0" name="UseAlternateXrefRefreshLogic" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>When set to TRUE, the system will expire all cross references
                        associated with the client that are not present in the request.  The expiration date
                        will be set to the day prior to the earliest provided XREF effective date.  If no new
                        XREFs are present in the request, the expiration date will be set to yesterday.
                        Additionally, if the XREF is already in the system and contained in the request,
                        only the earliest effective date and latest expiration date (if present) will
                        be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CrossReferences" type="CrossReferenceType"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupExclusions" type="TestExclusion"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SuppressCrossTestConsolidations" type="SuppressCrossTestConsolidationsType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UpdateNoLoadTestRequest">
        <xs:annotation>
          <xs:documentation>Update No Load Test Code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="UpdateNoLoadTestRequestType" type="UpdateNoLoadTestRequestType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UpdateNoLoadTestResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="RequiredErrors" type="types:RequiredErrorType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="UpdateNoLoadTestRequestType">
        <xs:sequence>
          <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
          <xs:element name="TestName" type="types:TestNameType"/>
          <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ProceduresType">
        <xs:annotation>
          <xs:documentation>contains basic details and identification of the procedure type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="ProcedureCodeTableId" type="types:IdType"/>
          <xs:element minOccurs="0" name="ProcedureCodeTableDescription" type="types:DescriptionType"/>
          <xs:element name="ProcedureCode" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FacilitiesType">
        <xs:annotation>
          <xs:documentation>allows you to indicate testing facilities.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="PerformingFacility" type="xs:string"/>
          <xs:element minOccurs="0" name="LabCost" type="types:AmountType"/>
          <xs:element minOccurs="0" name="CompanyCost" type="types:AmountType"/>
          <xs:element minOccurs="0" name="MinPrice" type="types:AmountType"/>
          <xs:element minOccurs="0" name="Info1" type="InfoType"/>
          <xs:element minOccurs="0" name="Info2" type="InfoType"/>
          <xs:element minOccurs="0" name="Info3" type="InfoType"/>
          <xs:element minOccurs="0" name="Info4" type="InfoType"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element default="false" minOccurs="0" name="Default" type="xs:boolean"/>
          <xs:element minOccurs="0" name="NonClientNoCharge" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ProfileComponentsType">
        <xs:annotation>
          <xs:documentation>add/modify profile components</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="TestId" type="types:TestCodeIdType"/>
          <xs:element name="Units" type="xs:positiveInteger"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FeeSchedulesType">
        <xs:annotation>
          <xs:documentation>allows you to define the pricing parameters for the retail fee schedules.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="FeeSchedId" type="types:IdType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element name="NewDollor" type="types:AmountType"/>
          <xs:element minOccurs="0" name="FlatFeeProfile" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CrossReferenceType">
        <xs:annotation>
          <xs:documentation>allows you to define exam code cross-references.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="XRefID" type="types:IdType"/>
          <xs:element name="XRefType" type="types:DescriptionType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SuppressCrossTestConsolidationsType">
        <xs:annotation>
          <xs:documentation>allows you to flag exams and profiles that should NOT consolidate or roll up units with
                other exams or profiles by payor.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="PayorId" type="types:IdType"/>
          <xs:element name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestModifier">
        <xs:sequence>
          <xs:element name="Id" type="types:IdType"/>
          <xs:element minOccurs="0" name="Modifier1" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Modifier2" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Modifier3" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestPayorGroupModifier">
        <xs:sequence>
          <xs:element name="PayorGroupName" type="types:NameIdType"/>
          <xs:element minOccurs="0" name="Modifier1" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Modifier2" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Modifier3" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TestExclusion">
        <xs:sequence>
          <xs:element name="Id" type="types:IdType"/>
          <xs:element default="false" minOccurs="0" name="Delete" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="GetTestEffectiveDatesRequest">
        <xs:annotation>
          <xs:documentation>Provides all effective dates for given testId</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestEffectiveDatesResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="EffectiveDates" type="xs:date"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestDetailsRequest">
        <xs:annotation>
          <xs:documentation>Effective date is optional. If effective date not provided ,
                    data from the latest testdt record will be returned.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
                  <xs:element minOccurs="0" name="EffectiveDate" type="xs:date"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestDetailsResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="msgHeader:MessageHeader"/>
            <xs:element name="Payload">
              <xs:complexType>
                <xs:choice>
                  <xs:element name="Status" type="types:StatusType"/>
                  <xs:element ref="GetTestDetailResponseType"/>
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetTestDetailResponseType">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="TestCodeId" type="types:TestCodeIdType"/>
            <xs:element minOccurs="0" name="LabTestCodeId" type="types:LabTestCodeIdType"/>
            <xs:element minOccurs="0" name="ProfileComponentOnly" type="xs:boolean"/>
            <xs:element name="TestName" type="types:TestNameType"/>
            <xs:element minOccurs="0" name="TestType" type="types:DescriptionType"/>
            <xs:element name="EffectiveDate" type="xs:date"/>
            <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
            <xs:element minOccurs="0" name="Department" type="types:DescriptionType"/>
            <xs:element minOccurs="0" name="MaxDiscountPercent" type="types:PercentType"/>
            <xs:element minOccurs="0" name="MaxDiscountLevel" type="types:DiscountLevelType"/>
            <xs:element minOccurs="0" name="FDAApproval" type="xs:boolean"/>
            <xs:element minOccurs="0" name="ExplodeComponents" type="xs:boolean"/>
            <xs:element minOccurs="0" name="UseSumOfComponents" type="xs:boolean"/>
            <xs:element minOccurs="0" name="ProfileType" type="DescriptionType"/>
            <xs:element minOccurs="0" name="IsProfile" type="xs:boolean"/>
            <xs:element minOccurs="0" name="IsHl7NoLoad" type="xs:boolean"/>
            <xs:element minOccurs="0" name="TradeDiscount" type="xs:boolean"/>
            <xs:element minOccurs="0" name="Taxable" type="xs:boolean"/>
            <xs:element minOccurs="0" name="AllowMultipleOrders" type="xs:boolean"/>
            <xs:element minOccurs="0" name="PublishService" type="xs:boolean"/>
            <xs:element minOccurs="0" name="Notes" type="types:NoteType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ProfileComponents" type="GetProfileComponentsType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ProcedureCodes" type="GetProceduresType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="Facilities" type="GetFacilitiesType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorModifiers" type="TestModifier"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupModifiers" type="TestPayorGroupModifier"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="FeeSchedules" type="GetFeeSchedulesType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="CrossReferences" type="GetCrossReferenceType"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorExclusions" type="TestExclusion"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="PayorGroupExclusions" type="TestExclusion"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="SuppressCrossTestConsolidations" type="SuppressCrossTestConsolidationsType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="GetProceduresType">
        <xs:annotation>
          <xs:documentation>contains basic details and identification of the procedure type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="ProceduresType" type="ProceduresType"/>
          <xs:element name="Name" type="types:ProcedureNameType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetProfileComponentsType">
        <xs:annotation>
          <xs:documentation>add/modify profile components</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="ProfileComponentsType" type="ProfileComponentsType"/>
          <xs:element name="Name" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="ProcedureCode" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFeeSchedulesType">
        <xs:annotation>
          <xs:documentation>allows you to define the pricing parameters for the retail fee schedules.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="FeeSchedId" type="types:IdType"/>
          <xs:element minOccurs="0" name="EffectiveDate" type="xs:date"/>
          <xs:element minOccurs="0" name="ExpirationDate" type="xs:date"/>
          <xs:element minOccurs="0" name="NewDollor" type="types:AmountType"/>
          <xs:element minOccurs="0" name="Name" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="Type" type="types:DescriptionType"/>
          <xs:element minOccurs="0" name="CurrentDollor" type="types:AmountType"/>
          <xs:element minOccurs="0" name="FlatFeeProfile" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetFacilitiesType">
        <xs:annotation>
          <xs:documentation>Get Facility type</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="FacilitiesType" type="FacilitiesType"/>
          <xs:element name="Name" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetCrossReferenceType">
        <xs:annotation>
          <xs:documentation>Get Cross Reference Type</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="CrossReferenceType" type="CrossReferenceType"/>
          <xs:element name="XRefDescription" type="types:DescriptionType"/>
          <xs:element name="XRefTypeDescription" type="types:DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/msgHeader" xmlns="http://www.xifin.com/schema/msgHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="MessageHeader">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="OrganizationName" type="xs:string"/>
            <xs:element minOccurs="0" name="SequenceNumber" type="xs:positiveInteger"/>
            <xs:element name="UserId">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="50"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element minOccurs="0" name="SourceApplication" type="xs:string">
              <xs:annotation>
                <xs:documentation>Name of the source application</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="OrgAlias" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.xifin.com/schema/types" xmlns="http://www.xifin.com/schema/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:complexType name="AddressType">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressLine1">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="AddressLine2">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="City">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="60"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="State">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="ZIP">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="10"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="CountryCode">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:length value="2"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PayorIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CardTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DelayReasonCodeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmtType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="12"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AccessionIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="StatusCodeType"/>
          <xs:element minOccurs="0" name="StatusMessage" type="StatusMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="StatusCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999"/>
          <xs:minExclusive value="-9999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StatusMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PhoneType">
        <xs:sequence>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="NPIType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SSNType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:totalDigits value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MSPTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NameIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="80"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LongDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NoteType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PhoneNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="NameType">
        <xs:sequence>
          <xs:element minOccurs="0" name="FirstName" type="NameIdType"/>
          <xs:element minOccurs="0" name="LastName" type="NameIdType"/>
          <xs:element minOccurs="0" name="MiddleName" type="NameIdType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UnitsType">
        <xs:restriction base="xs:integer">
          <xs:totalDigits value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="NarrativeDiagTyp">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ProcedureNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientProductType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="CommentsType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PersonType">
        <xs:sequence>
          <xs:element name="Name" type="NameType"/>
          <xs:element minOccurs="0" name="DateOfBirth" type="xs:date"/>
          <xs:element minOccurs="0" name="Gender" type="DescriptionType"/>
          <xs:element minOccurs="0" name="SSN" type="SSNType"/>
          <xs:element minOccurs="0" name="Address" type="AddressType"/>
          <xs:element minOccurs="0" name="HomePhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="WorkPhone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="DescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Contact">
        <xs:sequence>
          <xs:element minOccurs="0" name="ContactName" type="DescriptionType"/>
          <xs:element minOccurs="0" name="Phone" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Fax" type="PhoneNumberType"/>
          <xs:element minOccurs="0" name="Email" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="UserIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeOfService">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="5"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorPriorityType">
        <xs:restriction base="xs:int">
          <xs:totalDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ClientIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AbbrevType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountType">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AmountTypeWithFourDecimalNumbers">
        <xs:restriction base="xs:decimal">
          <xs:totalDigits value="12"/>
          <xs:fractionDigits value="4"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PaymentMethodType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PatientStatusType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="200"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ShortStrType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="10"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="SmallInt">
        <xs:restriction base="xs:integer">
          <xs:minExclusive value="0"/>
          <xs:maxExclusive value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="AuthorizationNumberType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="50"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TestCodeIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="20"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LabTestCodeIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PayorGroupIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="XRefDescriptionType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="RequiredErrorType">
        <xs:sequence>
          <xs:element name="RequiredErrorCode" type="RequiredErrorCodeType"/>
          <xs:element name="RequiredErrorMessage" type="RequiredErrorMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="RequiredErrorCodeType">
        <xs:restriction base="xs:integer">
          <xs:maxExclusive value="9999999999"/>
          <xs:minExclusive value="-9999999999"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="RequiredErrorMessageType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="500"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PercentType">
        <xs:restriction base="xs:integer">
          <xs:minInclusive value="0"/>
          <xs:maxInclusive value="100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DiscountLevelType">
        <xs:restriction base="xs:integer">
          <xs:minInclusive value="0"/>
          <xs:maxInclusive value="9"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FacilityTypeType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="UrlType">
        <xs:restriction base="xs:anyURI">
          <xs:maxLength value="255"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="LicenseIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="StateType">
        <xs:restriction base="xs:string">
          <xs:length value="2"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="UPINType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="15"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="XrefIdType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="40"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="OverrideType">
        <xs:restriction base="xs:string">
          <xs:pattern value="(Payor Inclusions|Payor Exclusions|Payor Group Inclusions|Payor Group Exclusions|Client Account Type|Service Type|Procedure Code Service Level Type|Procedure Code|Rendering Physician Xref)"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="FieldNameType">
        <xs:restriction base="xs:string">
          <xs:maxLength value="4000"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="AddProfileRequest">
    <wsdl:part element="tns:AddProfileRequest" name="AddProfileRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddSingleTestResponse">
    <wsdl:part element="tns:AddSingleTestResponse" name="AddSingleTestResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestEffectiveDatesResponse">
    <wsdl:part element="tns:GetTestEffectiveDatesResponse" name="GetTestEffectiveDatesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SearchTestCodeRequest">
    <wsdl:part element="tns:SearchTestCodeRequest" name="SearchTestCodeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestResponse">
    <wsdl:part element="tns:GetTestResponse" name="GetTestResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddNoLoadTestRequest">
    <wsdl:part element="tns:AddNoLoadTestRequest" name="AddNoLoadTestRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSingleTestResponse">
    <wsdl:part element="tns:UpdateSingleTestResponse" name="UpdateSingleTestResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateProfileResponse">
    <wsdl:part element="tns:UpdateProfileResponse" name="UpdateProfileResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateProfileRequest">
    <wsdl:part element="tns:UpdateProfileRequest" name="UpdateProfileRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateNoLoadTestRequest">
    <wsdl:part element="tns:UpdateNoLoadTestRequest" name="UpdateNoLoadTestRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateNoLoadTestResponse">
    <wsdl:part element="tns:UpdateNoLoadTestResponse" name="UpdateNoLoadTestResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddNoLoadTestResponse">
    <wsdl:part element="tns:AddNoLoadTestResponse" name="AddNoLoadTestResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddSingleTestRequest">
    <wsdl:part element="tns:AddSingleTestRequest" name="AddSingleTestRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddProfileResponse">
    <wsdl:part element="tns:AddProfileResponse" name="AddProfileResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestDetailsResponse">
    <wsdl:part element="tns:GetTestDetailsResponse" name="GetTestDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSingleTestRequest">
    <wsdl:part element="tns:UpdateSingleTestRequest" name="UpdateSingleTestRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestDetailsRequest">
    <wsdl:part element="tns:GetTestDetailsRequest" name="GetTestDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestEffectiveDatesRequest">
    <wsdl:part element="tns:GetTestEffectiveDatesRequest" name="GetTestEffectiveDatesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SearchTestCodeResponse">
    <wsdl:part element="tns:SearchTestCodeResponse" name="SearchTestCodeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTestRequest">
    <wsdl:part element="tns:GetTestRequest" name="GetTestRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="testcode">
    <wsdl:operation name="AddProfile">
      <wsdl:input message="tns:AddProfileRequest" name="AddProfileRequest"></wsdl:input>
      <wsdl:output message="tns:AddProfileResponse" name="AddProfileResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddSingleTest">
      <wsdl:input message="tns:AddSingleTestRequest" name="AddSingleTestRequest"></wsdl:input>
      <wsdl:output message="tns:AddSingleTestResponse" name="AddSingleTestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTestEffectiveDates">
      <wsdl:input message="tns:GetTestEffectiveDatesRequest" name="GetTestEffectiveDatesRequest"></wsdl:input>
      <wsdl:output message="tns:GetTestEffectiveDatesResponse" name="GetTestEffectiveDatesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SearchTestCode">
      <wsdl:input message="tns:SearchTestCodeRequest" name="SearchTestCodeRequest"></wsdl:input>
      <wsdl:output message="tns:SearchTestCodeResponse" name="SearchTestCodeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTest">
      <wsdl:input message="tns:GetTestRequest" name="GetTestRequest"></wsdl:input>
      <wsdl:output message="tns:GetTestResponse" name="GetTestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddNoLoadTest">
      <wsdl:input message="tns:AddNoLoadTestRequest" name="AddNoLoadTestRequest"></wsdl:input>
      <wsdl:output message="tns:AddNoLoadTestResponse" name="AddNoLoadTestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSingleTest">
      <wsdl:input message="tns:UpdateSingleTestRequest" name="UpdateSingleTestRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSingleTestResponse" name="UpdateSingleTestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateProfile">
      <wsdl:input message="tns:UpdateProfileRequest" name="UpdateProfileRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateProfileResponse" name="UpdateProfileResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateNoLoadTest">
      <wsdl:input message="tns:UpdateNoLoadTestRequest" name="UpdateNoLoadTestRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateNoLoadTestResponse" name="UpdateNoLoadTestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTestDetails">
      <wsdl:input message="tns:GetTestDetailsRequest" name="GetTestDetailsRequest"></wsdl:input>
      <wsdl:output message="tns:GetTestDetailsResponse" name="GetTestDetailsResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="testcodeSoap11" type="tns:testcode">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="AddProfile">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddProfileRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddProfileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddSingleTest">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddSingleTestRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddSingleTestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTestEffectiveDates">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTestEffectiveDatesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTestEffectiveDatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SearchTestCode">
      <soap:operation soapAction=""/>
      <wsdl:input name="SearchTestCodeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SearchTestCodeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTest">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTestRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddNoLoadTest">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddNoLoadTestRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddNoLoadTestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSingleTest">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSingleTestRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSingleTestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateProfile">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateProfileRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateProfileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateNoLoadTest">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateNoLoadTestRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateNoLoadTestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTestDetails">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTestDetailsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTestDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="testcodeService">
    <wsdl:port binding="tns:testcodeSoap11" name="testcodeSoap11">
      <soap:address location="http://localhost:8081/filemaintenance/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint></con:endpoints><con:operation id="b6e6208a-f4b1-41d1-add0-4eab84861a9e" isOneWay="false" action="" name="AddNoLoadTest" bindingOperationName="AddNoLoadTest" type="Request-Response" outputName="AddNoLoadTestResponse" inputName="AddNoLoadTestRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="989d798b-cd96-44f7-88a1-7ca26763e636" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:AddNoLoadTestRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:AddNoLoadTestRequest>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
            </tes:AddNoLoadTestRequest>\r
         </tes:Payload>\r
      </tes:AddNoLoadTestRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/AddNoLoadTestRequest"/></con:call></con:operation><con:operation id="bd918b2f-aa7b-4bda-9a8e-70bdf19dbcb6" isOneWay="false" action="" name="AddProfile" bindingOperationName="AddProfile" type="Request-Response" outputName="AddProfileResponse" inputName="AddProfileRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9a071460-f39d-4a4a-b945-ac6160a11981" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:AddProfileRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:AddProfileRequestType>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <!--Optional:-->\r
               <tes:LabTestCodeId>?</tes:LabTestCodeId>\r
               <!--Optional:-->\r
               <tes:ProfileComponentOnly>?</tes:ProfileComponentOnly>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:TestType>?</tes:TestType>\r
               <!--Optional:-->\r
               <tes:ExplodeComponents>?</tes:ExplodeComponents>\r
               <!--Optional:-->\r
               <tes:UseSumOfComponents>?</tes:UseSumOfComponents>\r
               <!--Optional:-->\r
               <tes:ProfileType>?</tes:ProfileType>\r
               <tes:EffectiveDate>?</tes:EffectiveDate>\r
               <!--Optional:-->\r
               <tes:ExpirationDate>?</tes:ExpirationDate>\r
               <!--Optional:-->\r
               <tes:MaxDiscountPercent>?</tes:MaxDiscountPercent>\r
               <!--Optional:-->\r
               <tes:MaxDiscountLevel>?</tes:MaxDiscountLevel>\r
               <!--Optional:-->\r
               <tes:TradeDiscount>?</tes:TradeDiscount>\r
               <!--Optional:-->\r
               <tes:Taxable>?</tes:Taxable>\r
               <!--Optional:-->\r
               <tes:AllowMultipleOrders>?</tes:AllowMultipleOrders>\r
               <tes:PublishService>true</tes:PublishService>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
               <!--Zero or more repetitions:-->\r
               <tes:ProfileComponents>\r
                  <tes:TestId>?</tes:TestId>\r
                  <tes:Units>?</tes:Units>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:ProfileComponents>\r
               <!--Zero or more repetitions:-->\r
               <tes:FeeSchedules>\r
                  <tes:FeeSchedId>?</tes:FeeSchedId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <tes:NewDollor>?</tes:NewDollor>\r
                  <!--Optional:-->\r
                  <tes:FlatFeeProfile>?</tes:FlatFeeProfile>\r
               </tes:FeeSchedules>\r
               <!--Zero or more repetitions:-->\r
               <tes:CrossReferences>\r
                  <tes:XRefID>?</tes:XRefID>\r
                  <tes:XRefType>?</tes:XRefType>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:CrossReferences>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:SuppressCrossTestConsolidations>\r
                  <tes:PayorId>?</tes:PayorId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:SuppressCrossTestConsolidations>\r
            </tes:AddProfileRequestType>\r
         </tes:Payload>\r
      </tes:AddProfileRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/AddProfileRequest"/></con:call></con:operation><con:operation id="ff47ed54-398e-48c1-b62e-be3a78cd7782" isOneWay="false" action="" name="AddSingleTest" bindingOperationName="AddSingleTest" type="Request-Response" outputName="AddSingleTestResponse" inputName="AddSingleTestRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="5729587e-2991-49e6-9e35-7a3ba32b4e67" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:AddSingleTestRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:AddSingleTestType>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <!--Optional:-->\r
               <tes:LabTestCodeId>?</tes:LabTestCodeId>\r
               <!--Optional:-->\r
               <tes:ProfileComponentOnly>?</tes:ProfileComponentOnly>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:TestType>?</tes:TestType>\r
               <tes:EffectiveDate>?</tes:EffectiveDate>\r
               <!--Optional:-->\r
               <tes:ExpirationDate>?</tes:ExpirationDate>\r
               <tes:Department>?</tes:Department>\r
               <!--Optional:-->\r
               <tes:MaxDiscountPercent>?</tes:MaxDiscountPercent>\r
               <!--Optional:-->\r
               <tes:MaxDiscountLevel>?</tes:MaxDiscountLevel>\r
               <tes:FDAApproval>true</tes:FDAApproval>\r
               <!--Optional:-->\r
               <tes:TradeDiscount>?</tes:TradeDiscount>\r
               <!--Optional:-->\r
               <tes:Taxable>?</tes:Taxable>\r
               <!--Optional:-->\r
               <tes:AllowMultipleOrders>?</tes:AllowMultipleOrders>\r
               <tes:PublishService>true</tes:PublishService>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
               <!--1 or more repetitions:-->\r
               <tes:ProcedureCodes>\r
                  <tes:ProcedureCodeTableId>?</tes:ProcedureCodeTableId>\r
                  <!--Optional:-->\r
                  <tes:ProcedureCodeTableDescription>?</tes:ProcedureCodeTableDescription>\r
                  <tes:ProcedureCode>?</tes:ProcedureCode>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
               </tes:ProcedureCodes>\r
               <!--1 or more repetitions:-->\r
               <tes:Facilities>\r
                  <tes:PerformingFacility>?</tes:PerformingFacility>\r
                  <!--Optional:-->\r
                  <tes:LabCost>?</tes:LabCost>\r
                  <!--Optional:-->\r
                  <tes:CompanyCost>?</tes:CompanyCost>\r
                  <!--Optional:-->\r
                  <tes:MinPrice>?</tes:MinPrice>\r
                  <!--Optional:-->\r
                  <tes:Info1>?</tes:Info1>\r
                  <!--Optional:-->\r
                  <tes:Info2>?</tes:Info2>\r
                  <!--Optional:-->\r
                  <tes:Info3>?</tes:Info3>\r
                  <!--Optional:-->\r
                  <tes:Info4>?</tes:Info4>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Default>false</tes:Default>\r
                  <!--Optional:-->\r
                  <tes:NonClientNoCharge>?</tes:NonClientNoCharge>\r
               </tes:Facilities>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorModifiers>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Modifier1>?</tes:Modifier1>\r
                  <!--Optional:-->\r
                  <tes:Modifier2>?</tes:Modifier2>\r
                  <!--Optional:-->\r
                  <tes:Modifier3>?</tes:Modifier3>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorModifiers>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupModifiers>\r
                  <tes:PayorGroupName>?</tes:PayorGroupName>\r
                  <!--Optional:-->\r
                  <tes:Modifier1>?</tes:Modifier1>\r
                  <!--Optional:-->\r
                  <tes:Modifier2>?</tes:Modifier2>\r
                  <!--Optional:-->\r
                  <tes:Modifier3>?</tes:Modifier3>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupModifiers>\r
               <!--Zero or more repetitions:-->\r
               <tes:FeeSchedules>\r
                  <tes:FeeSchedId>?</tes:FeeSchedId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <tes:NewDollor>?</tes:NewDollor>\r
                  <!--Optional:-->\r
                  <tes:FlatFeeProfile>?</tes:FlatFeeProfile>\r
               </tes:FeeSchedules>\r
               <!--Zero or more repetitions:-->\r
               <tes:CrossReferences>\r
                  <tes:XRefID>?</tes:XRefID>\r
                  <tes:XRefType>?</tes:XRefType>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:CrossReferences>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:SuppressCrossTestConsolidations>\r
                  <tes:PayorId>?</tes:PayorId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:SuppressCrossTestConsolidations>\r
            </tes:AddSingleTestType>\r
         </tes:Payload>\r
      </tes:AddSingleTestRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/AddSingleTestRequest"/></con:call></con:operation><con:operation id="4d33d71d-dc73-4d3c-9482-87eef81a0eb5" isOneWay="false" action="" name="GetTest" bindingOperationName="GetTest" type="Request-Response" outputName="GetTestResponse" inputName="GetTestRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f2510b57-debb-491c-8314-6c3599ef935e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:GetTestRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:TestCodeId>?</tes:TestCodeId>\r
            <!--Optional:-->\r
            <tes:Dos>?</tes:Dos>\r
         </tes:Payload>\r
      </tes:GetTestRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/GetTestRequest"/></con:call></con:operation><con:operation id="a01ecb6e-7f51-423b-ab56-dc6942ee97eb" isOneWay="false" action="" name="GetTestDetails" bindingOperationName="GetTestDetails" type="Request-Response" outputName="GetTestDetailsResponse" inputName="GetTestDetailsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1d34df29-a347-4de7-95ac-0cb32552818c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:GetTestDetailsRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:TestCodeId>?</tes:TestCodeId>\r
            <!--Optional:-->\r
            <tes:EffectiveDate>?</tes:EffectiveDate>\r
         </tes:Payload>\r
      </tes:GetTestDetailsRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/GetTestDetailsRequest"/></con:call></con:operation><con:operation id="476d7722-491c-4db9-bc2f-7c59e7435d90" isOneWay="false" action="" name="GetTestEffectiveDates" bindingOperationName="GetTestEffectiveDates" type="Request-Response" outputName="GetTestEffectiveDatesResponse" inputName="GetTestEffectiveDatesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e3a8d522-4fbb-4ea0-a9c6-a7a032755615" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:GetTestEffectiveDatesRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:TestCodeId>?</tes:TestCodeId>\r
         </tes:Payload>\r
      </tes:GetTestEffectiveDatesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/GetTestEffectiveDatesRequest"/></con:call></con:operation><con:operation id="66d53e5a-7e17-44aa-83b3-c2e152dbf081" isOneWay="false" action="" name="SearchTestCode" bindingOperationName="SearchTestCode" type="Request-Response" outputName="SearchTestCodeResponse" inputName="SearchTestCodeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="95afb8bc-b51e-4a2c-8421-0c4b898055e2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:SearchTestCodeRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:TestCodeSearch>\r
               <!--Optional:-->\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <!--Optional:-->\r
               <tes:TestCodeName>?</tes:TestCodeName>\r
               <!--Optional:-->\r
               <tes:LabTestCodeId>?</tes:LabTestCodeId>\r
               <!--Optional:-->\r
               <tes:Facility>?</tes:Facility>\r
               <!--Optional:-->\r
               <tes:CPTCode>?</tes:CPTCode>\r
               <!--Optional:-->\r
               <tes:CPTDescription>?</tes:CPTDescription>\r
               <!--Optional:-->\r
               <tes:TestType>?</tes:TestType>\r
               <!--Optional:-->\r
               <tes:IncludeProfilesOnly>false</tes:IncludeProfilesOnly>\r
               <!--Optional:-->\r
               <tes:IncludeNonProfilesOnly>false</tes:IncludeNonProfilesOnly>\r
               <!--Optional:-->\r
               <tes:IncludeExpiredRecords>false</tes:IncludeExpiredRecords>\r
               <!--Optional:-->\r
               <tes:SortByTest>true</tes:SortByTest>\r
               <!--Optional:-->\r
               <tes:SortByFacility>false</tes:SortByFacility>\r
               <!--Optional:-->\r
               <tes:StartRowNumber>1</tes:StartRowNumber>\r
               <!--Optional:-->\r
               <tes:EndRowNumber>100</tes:EndRowNumber>\r
               <!--Optional:-->\r
               <tes:ProcedureCodeType>?</tes:ProcedureCodeType>\r
               <!--Optional:-->\r
               <tes:RestrictToPriceTables>?</tes:RestrictToPriceTables>\r
               <!--Optional:-->\r
               <tes:TestPriceInEffectDate>?</tes:TestPriceInEffectDate>\r
            </tes:TestCodeSearch>\r
         </tes:Payload>\r
      </tes:SearchTestCodeRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/SearchTestCodeRequest"/></con:call></con:operation><con:operation id="f3c083a6-85fd-46a6-82b1-3019713632b1" isOneWay="false" action="" name="UpdateNoLoadTest" bindingOperationName="UpdateNoLoadTest" type="Request-Response" outputName="UpdateNoLoadTestResponse" inputName="UpdateNoLoadTestRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="015e17b8-b4fd-4213-9e32-4fd7fa06e763" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:UpdateNoLoadTestRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:UpdateNoLoadTestRequestType>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
            </tes:UpdateNoLoadTestRequestType>\r
         </tes:Payload>\r
      </tes:UpdateNoLoadTestRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/UpdateNoLoadTestRequest"/></con:call></con:operation><con:operation id="f0c180ba-c76f-417e-bcbf-7db005d71301" isOneWay="false" action="" name="UpdateProfile" bindingOperationName="UpdateProfile" type="Request-Response" outputName="UpdateProfileResponse" inputName="UpdateProfileRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="29bdb811-dc7d-4347-b3ac-1c50280d3402" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:UpdateProfileRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:UpdateProfileRequest>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <!--Optional:-->\r
               <tes:LabTestCodeId>?</tes:LabTestCodeId>\r
               <!--Optional:-->\r
               <tes:ProfileComponentOnly>?</tes:ProfileComponentOnly>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:TestType>?</tes:TestType>\r
               <!--Optional:-->\r
               <tes:ExplodeComponents>?</tes:ExplodeComponents>\r
               <!--Optional:-->\r
               <tes:UseSumOfComponents>?</tes:UseSumOfComponents>\r
               <tes:EffectiveDate>?</tes:EffectiveDate>\r
               <!--Optional:-->\r
               <tes:ExpirationDate>?</tes:ExpirationDate>\r
               <!--Optional:-->\r
               <tes:MaxDiscountPercent>?</tes:MaxDiscountPercent>\r
               <!--Optional:-->\r
               <tes:MaxDiscountLevel>?</tes:MaxDiscountLevel>\r
               <!--Optional:-->\r
               <tes:TradeDiscount>?</tes:TradeDiscount>\r
               <!--Optional:-->\r
               <tes:Taxable>?</tes:Taxable>\r
               <!--Optional:-->\r
               <tes:AllowMultipleOrders>?</tes:AllowMultipleOrders>\r
               <!--Optional:-->\r
               <tes:PublishService>?</tes:PublishService>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
               <!--Zero or more repetitions:-->\r
               <tes:ProfileComponents>\r
                  <tes:TestId>?</tes:TestId>\r
                  <tes:Units>?</tes:Units>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:ProfileComponents>\r
               <!--Zero or more repetitions:-->\r
               <tes:FeeSchedules>\r
                  <tes:FeeSchedId>?</tes:FeeSchedId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <tes:NewDollor>?</tes:NewDollor>\r
                  <!--Optional:-->\r
                  <tes:FlatFeeProfile>?</tes:FlatFeeProfile>\r
               </tes:FeeSchedules>\r
               <!--Optional:-->\r
               <tes:UseAlternateXrefRefreshLogic>false</tes:UseAlternateXrefRefreshLogic>\r
               <!--Zero or more repetitions:-->\r
               <tes:CrossReferences>\r
                  <tes:XRefID>?</tes:XRefID>\r
                  <tes:XRefType>?</tes:XRefType>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:CrossReferences>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:SuppressCrossTestConsolidations>\r
                  <tes:PayorId>?</tes:PayorId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:SuppressCrossTestConsolidations>\r
            </tes:UpdateProfileRequest>\r
         </tes:Payload>\r
      </tes:UpdateProfileRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/UpdateProfileRequest"/></con:call></con:operation><con:operation id="e487cf21-0b3c-4f44-ab80-c150f7d265a9" isOneWay="false" action="" name="UpdateSingleTest" bindingOperationName="UpdateSingleTest" type="Request-Response" outputName="UpdateSingleTestResponse" inputName="UpdateSingleTestRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ad9b5e62-d97e-4d4d-b09a-852b321b94a4" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/filemaintenance/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tes="http://www.xifin.com/schema/testcode" xmlns:msg="http://www.xifin.com/schema/msgHeader">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <tes:UpdateSingleTestRequest>\r
         <msg:MessageHeader>\r
            <!--Optional:-->\r
            <msg:OrganizationName>?</msg:OrganizationName>\r
            <!--Optional:-->\r
            <msg:SequenceNumber>?</msg:SequenceNumber>\r
            <msg:UserId>?</msg:UserId>\r
            <!--Optional:-->\r
            <msg:SourceApplication>?</msg:SourceApplication>\r
            <!--Optional:-->\r
            <msg:OrgAlias>?</msg:OrgAlias>\r
         </msg:MessageHeader>\r
         <tes:Payload>\r
            <tes:UpdateSingleTestRequest>\r
               <tes:TestCodeId>?</tes:TestCodeId>\r
               <!--Optional:-->\r
               <tes:LabTestCodeId>?</tes:LabTestCodeId>\r
               <!--Optional:-->\r
               <tes:ProfileComponentOnly>?</tes:ProfileComponentOnly>\r
               <tes:TestName>?</tes:TestName>\r
               <!--Optional:-->\r
               <tes:TestType>?</tes:TestType>\r
               <tes:EffectiveDate>?</tes:EffectiveDate>\r
               <!--Optional:-->\r
               <tes:ExpirationDate>?</tes:ExpirationDate>\r
               <!--Optional:-->\r
               <tes:Department>?</tes:Department>\r
               <!--Optional:-->\r
               <tes:MaxDiscountPercent>?</tes:MaxDiscountPercent>\r
               <!--Optional:-->\r
               <tes:MaxDiscountLevel>?</tes:MaxDiscountLevel>\r
               <!--Optional:-->\r
               <tes:FDAApproval>?</tes:FDAApproval>\r
               <!--Optional:-->\r
               <tes:TradeDiscount>?</tes:TradeDiscount>\r
               <!--Optional:-->\r
               <tes:Taxable>?</tes:Taxable>\r
               <!--Optional:-->\r
               <tes:AllowMultipleOrders>?</tes:AllowMultipleOrders>\r
               <!--Optional:-->\r
               <tes:PublishService>?</tes:PublishService>\r
               <!--Optional:-->\r
               <tes:Notes>?</tes:Notes>\r
               <!--Zero or more repetitions:-->\r
               <tes:ProcedureCodes>\r
                  <tes:ProcedureCodeTableId>?</tes:ProcedureCodeTableId>\r
                  <!--Optional:-->\r
                  <tes:ProcedureCodeTableDescription>?</tes:ProcedureCodeTableDescription>\r
                  <tes:ProcedureCode>?</tes:ProcedureCode>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
               </tes:ProcedureCodes>\r
               <!--Zero or more repetitions:-->\r
               <tes:Facilities>\r
                  <tes:PerformingFacility>?</tes:PerformingFacility>\r
                  <!--Optional:-->\r
                  <tes:LabCost>?</tes:LabCost>\r
                  <!--Optional:-->\r
                  <tes:CompanyCost>?</tes:CompanyCost>\r
                  <!--Optional:-->\r
                  <tes:MinPrice>?</tes:MinPrice>\r
                  <!--Optional:-->\r
                  <tes:Info1>?</tes:Info1>\r
                  <!--Optional:-->\r
                  <tes:Info2>?</tes:Info2>\r
                  <!--Optional:-->\r
                  <tes:Info3>?</tes:Info3>\r
                  <!--Optional:-->\r
                  <tes:Info4>?</tes:Info4>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Default>false</tes:Default>\r
                  <!--Optional:-->\r
                  <tes:NonClientNoCharge>?</tes:NonClientNoCharge>\r
               </tes:Facilities>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorModifiers>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Modifier1>?</tes:Modifier1>\r
                  <!--Optional:-->\r
                  <tes:Modifier2>?</tes:Modifier2>\r
                  <!--Optional:-->\r
                  <tes:Modifier3>?</tes:Modifier3>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorModifiers>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupModifiers>\r
                  <tes:PayorGroupName>?</tes:PayorGroupName>\r
                  <!--Optional:-->\r
                  <tes:Modifier1>?</tes:Modifier1>\r
                  <!--Optional:-->\r
                  <tes:Modifier2>?</tes:Modifier2>\r
                  <!--Optional:-->\r
                  <tes:Modifier3>?</tes:Modifier3>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupModifiers>\r
               <!--Zero or more repetitions:-->\r
               <tes:FeeSchedules>\r
                  <tes:FeeSchedId>?</tes:FeeSchedId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <tes:NewDollor>?</tes:NewDollor>\r
                  <!--Optional:-->\r
                  <tes:FlatFeeProfile>?</tes:FlatFeeProfile>\r
               </tes:FeeSchedules>\r
               <!--Optional:-->\r
               <tes:UseAlternateXrefRefreshLogic>false</tes:UseAlternateXrefRefreshLogic>\r
               <!--Zero or more repetitions:-->\r
               <tes:CrossReferences>\r
                  <tes:XRefID>?</tes:XRefID>\r
                  <tes:XRefType>?</tes:XRefType>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:CrossReferences>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:PayorGroupExclusions>\r
                  <tes:Id>?</tes:Id>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:PayorGroupExclusions>\r
               <!--Zero or more repetitions:-->\r
               <tes:SuppressCrossTestConsolidations>\r
                  <tes:PayorId>?</tes:PayorId>\r
                  <tes:EffectiveDate>?</tes:EffectiveDate>\r
                  <!--Optional:-->\r
                  <tes:ExpirationDate>?</tes:ExpirationDate>\r
                  <!--Optional:-->\r
                  <tes:Delete>false</tes:Delete>\r
               </tes:SuppressCrossTestConsolidations>\r
            </tes:UpdateSingleTestRequest>\r
         </tes:Payload>\r
      </tes:UpdateSingleTestRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/testcode/testcode/UpdateSingleTestRequest"/></con:call></con:operation></con:interface><con:testSuite name="Accession WS-CreateAccession-CreateNewAccession" id="9d52fdba-3ccc-44bc-9e7b-8b2698b1ddb8"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn" searchProperties="true" id="60595438-2db4-4b04-8dfc-e05d2e6269ce"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-TestDataSetup" id="6f571fea-7f1f-4e55-ad6a-53ca59587876"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;
    import com.mbasys.mars.ejb.entity.cln.Cln;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase());
    def clientId = "200";

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)

    Cln cln = clientDao.getClnByClnAbbrev(clientId);
    cln.setIsBillingAssignmentReq(true);
    clientDao.setCln(cln);
</script></con:config></con:testStep><con:testStep type="groovy" name="Step2:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-SystemSetupUI" id="7089e33b-e05c-4221-b6c0-aac8200d5d9d"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.config.*;
    //Get accnId
    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    def Env = context.expand('${#Project#Env}')
    log.info "Env = " + Env

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info "dbEnv = " + dbEnv

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv

<!--    sysCall = new SystemCall()-->

<!--    //Detect OS-->
<!--    //def retval = sysCall.setShellCmd("mvn test -DtestSuite=clearSystemDataCache -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")-->
<!--    def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/clearRPMDataCache -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DxapEnv=${xapEnv} -Dendpoint")-->
<!--    log.info "retval=" + retval-->

<!--    //Verify process completed successfully-->
<!--    assert retval == 0 : "Step2:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-SystemSetupUI Failed"-->





</script></con:config></con:testStep><con:testStep type="request" name="Step3:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-CreateNewAccession" id="1b3327ea-068b-4316-afff-a39756733c6e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step3:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-CreateNewAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="abedb5c2-a4fb-49ac-815c-348449c719eb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="72f1b8fe-9078-45a0-92c4-bcee0ee11beb"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a7766491-dd90-4960-b0ca-a49e1b25ff60"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-VerifyNewlyCreatedAccnInDB" id="ed43ff87-52ab-4bf4-a2ff-486589a2051a"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step3:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-CreateNewAccession#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step4:Accession WS-CreateNewAccession-CreateNewAccessionWithClnPerformBillingAssignmentOn-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERWFFLV20170609175445707</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-06-09</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>800</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170609175445707</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEDDVKP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEUXBCO</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A090198829</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>300</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>C50.61</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-06-09</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref" searchProperties="true" id="966d3933-6a56-475a-8d6e-977de5e32356"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-TestDataSetup" id="010c2bc7-39ae-4089-89bd-6be21eaca367"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.platform.dao.*
    import com.mbasys.mars.ejb.entity.cln.Cln;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    def clientId = "200"

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = "C"

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)

    //Turn on the Client B_BILLING_ASSIGNMENT_REQ
    Cln cln = clientDao.getClnByClnAbbrev(clientId);
    cln.setIsBillingAssignmentReq(true);
    clientDao.setCln(cln);

    //Delete all the test xref for the test
    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerPlatform.deleteXRefFromTESTXREFByTestAbbrev(testAbbrev, dbEnv);

</script></con:config></con:testStep><con:testStep type="groovy" name="Step2:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-SystemSetupUI" id="143bb122-0eba-43ba-b2da-7b5b06d3551a"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.config.*;
    //Get accnId
    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    def Env = context.expand('${#Project#Env}')
    log.info "Env = " + Env

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info "dbEnv = " + dbEnv

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv



</script></con:config></con:testStep><con:testStep type="request" name="Step3:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-CreateNewAccession" id="2d616c21-4ae1-4c08-a783-4d1ffca0a2b5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step3:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-CreateNewAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="b7172156-80df-442d-bf0d-5ea92da4f492"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="243cd3a5-e417-4994-a8c4-d7e88faa207d"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="08f46876-e1fe-427e-9972-823b47f1ae28"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-VerifyNewlyCreatedAccnInDB" id="f5f77d7d-46d7-4f0d-9ac2-7bd4a7815084"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step3:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-CreateNewAccession#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step4:Accession WS-CreateNewAccession-CreateNewClnPyrAccnWithClnBillingAssignmentOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERHYMBK20160323123525129</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-03-23</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160323123525129</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEUUXUY</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEDKDIN</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A775122884</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>C94.82</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>C</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-03-23</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWOPayor" searchProperties="true" id="c9f587f0-494f-482c-90e2-5f78241c6d0a"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="b80d4ccf-6198-41e6-a33c-3028fd434064"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWOPayor-SendRequest" id="01385d18-2e8f-4245-a2df-1df31f400ef9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWOPayor-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="0f1b53b7-3d83-44eb-b39d-a40df7cd6aa2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>

                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>

                  <acc:InsuredRelationship>18</acc:InsuredRelationship>

               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="569b8442-d4c1-4c63-83ff-14e9d9c83402"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="ba2310ed-b4a9-436b-9c2a-0d3daf61f83a"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="00f9e378-8fed-4345-b290-c7ffa23d9ff1"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWOPayor-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERMFQEZ20170420123556706</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-04-20</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170420123556706</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEGCBWE</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEIPTFC</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A173854914</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1104875822</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S70.272D</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-04-20</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref" searchProperties="true" id="26c67e3e-29f3-4008-9d7e-2113610460b1"><con:settings/><con:testStep type="groovy" name="Step:1:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-TestDataSetup" id="da6eb981-4044-4a91-a4f3-c838bdd91b30"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.platform.dao.*
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;
    import com.mbasys.mars.ejb.entity.cln.Cln;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    def existClnAbbrev = "100"
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev



    //======== Disable and delete the pyr field requirement ========
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(existPyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(existPyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(existPyrAbbrev, dbEnv)

    //Turn on the Client B_BILLING_ASSIGNMENT_REQ
    Cln cln = clientDao.getClnByClnAbbrev(existClnAbbrev);
    cln.setIsBillingAssignmentReq(true);
    clientDao.setCln(cln);

    //Delete all the test xref for the test
    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerPlatform.deleteXRefFromTESTXREFByTestAbbrev(existTestAbbrev, dbEnv);

    //Add BILL CLIENT test xref for the test
</script></con:config></con:testStep><con:testStep type="groovy" name="Step:2:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-SystemSetupUI" id="36dc9d9f-a932-4150-a97d-03e7815f2fa5"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.config.*;
    //Get accnId
    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    def Env = context.expand('${#Project#Env}')
    log.info "Env = " + Env

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info "dbEnv = " + dbEnv

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv



</script></con:config></con:testStep><con:testStep type="request" name="Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-CreateNewAccession" id="f00a30d1-a517-42f5-b584-bc8fe2412b7b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-CreateNewAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="f8b2486c-c605-4904-b781-d1f1cd051748"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="158af1b6-5694-4d4e-a1bd-f6495da15b5f"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="da408e77-e16c-4042-99cb-bba1b5ab1e8f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB" id="806dc85b-d092-4a03-8c76-22f813fb9705"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-CreateNewAccession#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20160328115301344</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-03-28</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-03-28</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>1234</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160328115301344</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEOLNCC</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEVAYSR</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>34654465</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1205878451</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>5010</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>1234</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>Y35.033A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BCBSKY</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref" searchProperties="true" id="3ee3202b-706a-403d-bb07-a363ebc71217"><con:settings/><con:testStep type="groovy" name="Step:1:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-TestDataSetup" id="d052ab28-58bf-468c-b9d5-df7a298826e4"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.platform.dao.*
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    //existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWTestsWOErrFromACCNACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    //def existPyrAbbrev = existPyrInfoList[0]
    def existPyrAbbrev = "BCBSKY"
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    //testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    testInfoList = daoManagerAccnWS.getUniqueTestIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId1 = testInfoList[0]
    //def existTestAbbrev1 = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId1, dbEnv)
    def existTestAbbrev1 = "5010"
    log.info "existTestAbbrev1 = " + existTestAbbrev1
    def existTestId2 = testInfoList[2]
    //def existTestAbbrev2 = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId2, dbEnv)
    def existTestAbbrev2 = "130"
    log.info "existTestAbbrev2 = " + existTestAbbrev2


    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId1, dbEnv)
    }
    //Get Test POS
    //def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId("1", dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev1", existTestAbbrev1)
    log.info "TestAbbrev1 = " + existTestAbbrev1
    testRunner.testCase.setPropertyValue ("TestAbbrev2", existTestAbbrev2)
    log.info "TestAbbrev2 = " + existTestAbbrev2

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev



    //======== Disable and delete the pyr field requirement ========
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(existPyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(existPyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(existPyrAbbrev, dbEnv)

    //Turn on the Client B_BILLING_ASSIGNMENT_REQ
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerXifinRpm.setValuesFromCLNByClnAbbrev(existClnAbbrev, "B_BILLING_ASSIGNMENT_REQ = 1", dbEnv);

    //Delete all the test xref for the test1
    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerPlatform.deleteXRefFromTESTXREFByTestAbbrev(existTestAbbrev1, dbEnv);

</script></con:config></con:testStep><con:testStep type="groovy" name="Step:2:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-SystemSetupUI" id="84aa1bc5-07f2-422c-b7ec-23eec294f179"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.config.*;
    //Get accnId
    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    def Env = context.expand('${#Project#Env}')
    log.info "Env = " + Env

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info "dbEnv = " + dbEnv

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv



</script></con:config></con:testStep><con:testStep type="request" name="Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-CreateNewAccession" id="9005822d-0213-429c-890f-4021c1297d41"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-CreateNewAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="290584f1-db08-466a-9742-c853079de525"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev1}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>2</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev2}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="1b98fa17-28fe-4fc8-9f0d-67f0e1855ea1"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="982e96a8-a3ec-473d-8ec2-f31300aea723"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB" id="06cbb840-488f-4e4c-8797-7ce554f22773"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step:3:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-CreateNewAccession#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step:4:Accession WS-CreateAccession-CreateNew3rdPartyPyrAccnWithTwoTestsClnBillingAssignOnBillClnTestXref-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20160331110815306</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-03-31</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-03-31</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160331110815306</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMENFCAA</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEHLJXQ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>123456789A</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1063473072</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>5010</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>BESTLABS</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T37.0X3S</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BCBSKY</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev1</con:name><con:value>5010</con:value></con:property><con:property><con:name>TestAbbrev2</con:name><con:value>130</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" searchProperties="true" id="28da19f8-356b-4074-a872-f17027568d6f"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="21650fdb-dbda-4b94-8f4a-1c33acb6f7f6"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="d7ad1c3a-6c78-4acf-a0ca-20a1dfbd399c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="126e5e3a-f246-430b-ad07-df49993855f7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
<!--                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="0265dc13-6332-4e19-b750-8a076e8e0be4"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="14701a9b-1b2a-4035-b87a-b51b0e3ff761"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="476e8ebc-bf59-407e-8843-6c0647789388"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI" id="d2039fdd-5c70-4549-9557-72cbd62be478"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.xifin.qa.config.*;
    import com.mbasys.mars.persistance.AccnStatusMap;
    //Get dbEnv Project-level property value
    def dbEnv = null

    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    <!--log.info "dbEnv = " + dbEnv-->

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    <!--//def Env = context.expand('${#Project#Env}')-->
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    <!--def OrgAlias = context.expand('${#Project#OrgAlias}')-->
    <!--log.info "OrgAlias = " + OrgAlias-->

    <!--def eType1 = context.expand('${#Project#eType1}')-->
    <!--log.info "eType1 = " + eType1-->

    <!--def eType2 = context.expand('${#Project#eType2}')-->
    <!--log.info "eType2 = " + eType2-->

    <!--def xapEnv = context.expand('${#Project#xapEnv}')-->
    <!--log.info "xapEnv = " + xapEnv-->

    <!--def engConfigDB = context.expand('${#Project#engConfigDB}')-->
    <!--log.info "engConfigDB = " + engConfigDB-->

    <!--def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')-->
    <!--log.info "hasLoggedIn = " + hasLoggedIn-->
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    AccessionDao accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
    log.info "Wait for an accession to be out of Q_FR_PENDING"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_FR_PENDING, 1000*10*60)
    log.info "Wait for an accession to be out of Q_ELIG"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_ELIG, 1000*10*60)
    log.info "Wait for an accession to be priced"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId, AccnStatusMap.Q_PRICE, 1000*10*60)
    DaoManagerXifinRpm daoManagerXifinRpm= new DaoManagerXifinRpm(configuration.getRpmDatabase())
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, null)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI due to the accn was not priced"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S36.508A</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER2018032815011473</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-03-28</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI2018032815011473</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-03-28</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEECTYY</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEZONUX</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1548332539</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewFinalReported3rdPartyPyrAccnWithNewEPI" searchProperties="true" id="2184f3bc-236d-406d-ae9e-cd222ae4fdf6"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="8dcf41f3-7e8a-4b8e-98af-3624567cb6ac"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="c6d614b9-c41a-4ac0-be03-ac9d76c2eb69"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="b7297991-8c62-436c-ab79-2dae723252d7"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>BESTLABS</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S82.116F</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20160914134936394</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-09-14</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160914134936394</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-09-14</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEBFDP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMETUCCZ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>123456789A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCT</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1063473072</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>1000</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWOClient" searchProperties="true" id="faea701c-bf6f-433c-ae80-3f6ab36eceaa"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="4c59f67a-d166-462a-bf27-0aacb4fb3391"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWOClient-SendRequest" id="786c66a3-77e4-47ff-b657-5c8c503db9c0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWOClient-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="36ff0d6a-e8e2-4451-a4be-9b5605e09564"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
<!--               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>-->
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="be2dad3b-9e13-4f84-9bc1-7d243263b811"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="774aad33-ad8f-423e-af72-3f3d4e4d2463"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="6aaf4791-8666-450d-a0dd-150c4c8746fe"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWOClient-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERKSUUG20170327125401935</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-03-27</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170327125401935</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEQKLTQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMECRJTR</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A541208595</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1215930367</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T22.161</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-03-27</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithInvalidTest" searchProperties="true" id="dc3c5c29-030f-4bbd-8ba7-a25af81ab50f"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="4b6815a5-8fa1-4826-8e49-45e74ca6a9ec"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = "INVTEST"//daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithInvalidTest-SendRequest" id="89d4c2c7-b99d-467b-b702-4cd057e5a0b8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithInvalidTest-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="6eb0bcbb-863e-4231-ad79-6fa4f0525de3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
<!--                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="348f10cc-5415-442c-867c-8d5a3e2eb78c"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="168ce307-52c7-4247-a4fd-778d4bc6f9d3"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="e5dd3aa9-7b76-4c83-ab3f-abc22ded7508"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithInvalidTest-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTEROPKHH20170327153521111</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-03-27</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170327153521111</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEFEFUL</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEJWXHV</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A359150392</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>INVTEST</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S92.226P</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-03-27</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithESRDCLNErr" searchProperties="true" id="3190951a-38d2-4da9-9998-5a7954c81c86"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="ef6d295a-e514-42ea-8ee8-174fac945002"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId =  daoManagerAccnWS.getClnAbbrevFromCLNByClnAccntTyp("DIALYSIS", dbEnv)//daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithESRDCLNErr-SendRequest" id="e1e4e184-0e90-42ea-9419-49b0951f183f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithESRDCLNErr-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="22ab6867-ccb5-4c3b-8503-502b488afdc5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="fb3cdf77-4e70-40f1-9639-766412493c70"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="fe12fa68-a723-4bb6-b6d2-930dc57973e4"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="bf9a1903-140b-4db4-ab62-d04fd9516588"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithESRDCLNErr-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTEROBYJY20170328120447292</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-03-28</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>DW4</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170328120447292</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEGDIZL</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEYTSUB</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A483297538</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1548332539</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>N47.6</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-03-28</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithINVPROFErr" searchProperties="true" id="7990629f-ef1c-4c3c-8f0d-7ce4c208fe32"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="43ff8591-ecb5-40f5-91b6-4abf26dbcd48"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithINVPROF-SendRequest" id="4454d4be-c457-4b7f-be07-367072ba3885"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithINVPROF-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="a3a08c4c-23bc-4f6b-b74d-63be6cb95326"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
                  <!--Optional:-->
                  <acc:ProfileId>9262</acc:ProfileId>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="ce37c037-5f0e-4e1d-8b76-e73fdc78bd30"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="775acb47-e622-4dce-a1c8-f2bb85789138"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="5c5de05c-dfea-42d4-8e91-e0216d353b56"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithINVPROF-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERAJUAT20170329162150778</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-03-29</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170329162150778</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEQUIHS</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEWHYTE</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A695791241</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1114922606</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S93.411A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-03-29</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithINVFACErr" searchProperties="true" id="4882f34e-94b7-46f6-b679-872ed5ff4d41"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="bc71c89f-dcb8-4061-a962-cd6a905793eb"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = "NONEXISTINGPOS"//daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithINVFACErr-SendRequest" id="22678453-8684-47d3-89bc-181e692128f8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithINVFACErr-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="b13dd5b3-5a72-43e1-b932-ac58e3264cfa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
<!--               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>-->
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>

               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="a1d6c64d-756c-4235-a07e-6a738d496ec1"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a263fbca-6a36-4cfd-b468-8674233ac4c3"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="a72c9ab5-9ed2-48ae-bf85-e12024e7233b"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithINVFACErr-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERGPDGP20180328112252263</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-03-28</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180328112252263</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEPEBDH</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEGUXGI</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A607192432</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>NONEXISTINGPOS</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>V31.9XXA</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-03-28</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithPYRGRPEXCLErr" searchProperties="true" id="cea95111-99a2-4d1b-afd0-f998eeeddb69"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="36452901-4508-4a9d-b377-6572750c34b0"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = "1316944119" // has record in  PYR_GRP_PHYS_EXCL and no exp_dt //daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithPYRGRPEXCLErr-SendRequest" id="a18279df-4bae-4f25-b90f-e2c26cb08dee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithPYRGRPEXCLErr-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="9054e561-5d31-4dea-98c8-0dfed8782fe1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="24703a9d-ff9f-497b-8d11-fb71fc9134a3"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="9ac1886e-0c19-4d58-bae9-afcc53d6e8ed"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="1803673f-efab-46f6-8dc9-0972164a4526"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithPYRGRPEXCLErr-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERDWYDP20170331161726378</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-03-31</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170331161726378</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEWOMJD</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMELBFHN</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A785193621</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1316944119</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S72.002J</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-03-31</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithINVPAYErr" searchProperties="true" id="d6702659-2230-44e5-98e4-02ed84f8c0bf"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccession-TestDataSetup" id="c0de4d2a-9d60-434c-bd4e-f899b995f1a8"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithINVPYRErr-SendRequest" id="0e71f06e-1d50-48b5-b4ab-b48de954a24a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithINVPYRErr-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="24c0e283-aa43-4ff7-a65c-d72a26979d4d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>NONEXISTINGPYR</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="5474afc7-2ae7-4a44-b44e-58e060701d83"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8365b396-3ae7-4eef-94cf-c8a842804078"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="25a96690-0363-4566-8561-3a7e0f9a30cd"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithINVPYRErr-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERAVMRL20170403165113469</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-04-03</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170403165113469</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEZAEEQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEHTISJ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A812768975</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1215930367</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>V91.32XS</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-04-03</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccessionWithUNKPYR" searchProperties="true" id="f3874ece-f688-4a42-97ef-258271c06419"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccessionWithUNKPYR-TestDataSetup" id="c674a23f-c1d0-4abc-99d9-d77ad07b9bbd"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    def pyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId(daoManagerXifinRpm.getSysSettingsDataValueBySettingId(84, dbEnv).toString(), dbEnv)//'UNK'//daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)

    //Disable and delete the pyr field requirement
    daoManagerAccnWS.setBDiagReqBSpcCDReqByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionWithUNKPYR-SendRequest" id="f7364e43-0efc-4849-9a8f-e717a40d57b8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionWithUNKPYR-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bf830168-4b9a-4a6a-8c0e-d33a0b7279a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
<!--                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
-->
                  <acc:InsuredRelationship>18</acc:InsuredRelationship>
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="a5900b8b-e520-4d55-9125-e54c9bdab505"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="2f4fca4a-6379-4c53-b6e8-77ab6ae358ba"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateNewAccessionWithUNKPYR-VerifyNewlyCreatedAccnInDB" id="c44ade57-e7e2-4173-817a-167afe68896c"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateNewAccessionWithUNKPYR was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateNewAccessionWithUNKPYR was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateNewAccessionWithUNKPYR was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateNewAccessionWithUNKPYR was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionWithUNKPYR-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateNewAccessionWithUNKPYR failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value>QATESTERZXFDX20170421124012961</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-04-21</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>100</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170421124012961</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEUUIBU</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMELFEOS</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A130213846</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1942273776</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>POS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>M08.96</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>UNK</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-04-21</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI" searchProperties="true" id="bc39555a-cbf9-41d0-8a76-6e86c8712abd"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-TestDataSetup" id="eb1b8649-d93a-46c3-be82-b95b4d33006a"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI" id="618b5294-8ea8-4f8d-bee7-94d91d00cdac"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="214c6ee1-1c2f-4fce-94f3-aeec633c745d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e75f4a9d-e004-40aa-96cd-d34ca23a5b74"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="aaacdf20-b97e-4e06-a212-727b0436e858"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="1f217dd3-0b29-4ff9-9999-c28ef449fb56"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-SystemSetupUI" id="771d84e8-b742-44f4-a187-e1fb594c860e"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.mbasys.mars.persistance.AccnStatusMap;
    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    AccessionDao accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
    log.info "Wait for an accession to be out of Q_FR_PENDING"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_FR_PENDING, 1000*10*60)
    log.info "Wait for an accession to be priced"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId, AccnStatusMap.Q_PRICE, 1000*10*60)
    DaoManagerXifinRpm daoManagerXifinRpm= new DaoManagerXifinRpm(configuration.getRpmDatabase())
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, null)

    //Verify that the accn status = 21 (Priced)

    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-SystemSetupUI due to the accn was not priced"

</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S66.491S</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170711161120497</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-07-11</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170711161120497</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-07-11</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEUKGXP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMECQRCJ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" searchProperties="true" id="768120a4-30da-424c-ac9a-5d2d2ce65d12"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-TestDataSetup" id="26c94934-7f21-4ee2-b7e4-b148445cc6f7"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    //def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    //Get ClientId value
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def existClnAbbrev = daoManagerAccnWS.getClnAbbrev(dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    //def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" id="b57ffd23-6334-4f35-a245-149f8d4e97c4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="d8e4777a-ae1a-44f2-be32-3c10e3c48964"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="bdd55aab-1493-4d4c-a8a8-d7fe8ef595b1"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>ESPHYS</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T61.93</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170502174023647</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-05-02</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170502174023647</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-05-02</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMELDGGZ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMELCJOE</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>54511</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1548332539</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>2100</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewFinalReportedAETNAPartyPyrAccnWithNewEPI" searchProperties="true" id="669be36d-e3b0-42c4-a960-4ce2642cdef3"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="d1c3cf98-685a-4256-80b4-2c295f069a6d"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="9a9d7767-9c0c-4b97-8c3c-1c4fc7a02054"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>AETNA</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="99d74db2-5228-4efa-8499-9edf6f257557"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T23.451</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170717220514718</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-07-17</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170717220514718</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-07-17</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMERFRKQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPGXOO</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewPricedAETNAPyrAccn" searchProperties="true" id="30ef1a04-158a-43f2-a53d-282d59194552"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-TestDataSetup" id="bf4bc222-0cfa-4409-97f8-d4febaa34479"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI" id="79047c06-7c70-48ea-9566-8bf483c19fc4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="214c6ee1-1c2f-4fce-94f3-aeec633c745d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>AETNA</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e75f4a9d-e004-40aa-96cd-d34ca23a5b74"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="aaacdf20-b97e-4e06-a212-727b0436e858"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="cb020212-418c-4457-a175-4383c342914b"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-SystemSetupUI" id="2a42d250-dea5-47e6-b368-8a5acb6c074e"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.mbasys.mars.persistance.AccnStatusMap;
    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    AccessionDao accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
    log.info "Wait for an accession to be out of Q_FR_PENDING"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_FR_PENDING, 1000*10*60)
    log.info "Wait for an accession to be priced"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId, AccnStatusMap.Q_PRICE, 1000*10*60)
    DaoManagerXifinRpm daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
       //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:Accession WS-CreateAccession-CreateNewPricedPtPyrAccnWithNewEPI-SystemSetupUI due to the accn was not priced"

</script></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>Z89.42</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170718102433812</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-07-18</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170718102433812</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-07-18</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMETIUOG</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEZLFHB</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr" searchProperties="true" id="34434f23-cbf9-4689-9076-b3badebb8c4f"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-TestDataSetup" id="d943d050-5831-403f-8f28-6f3b995fee09"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*


    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "BSEAST"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //Generate random insuredFName, insuredLName
    def insuredFName = "INSUREDFNAME" + randomCharacter.getRandomAlphaString(5)
    def insuredLName = "INSUREDLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "insuredFName = " + insuredFName
    log.info "insuredLName = " + insuredLName

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    //testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    testRunner.testCase.setPropertyValue ("Relshp", "01") //01: Spouse
    log.info "Relshp = " + "01"

    //Set insuredFName and insuredLName TestCase-level values
    testRunner.testCase.setPropertyValue ("insuredFName", insuredFName)
    log.info "insuredFName = " + insuredFName
    testRunner.testCase.setPropertyValue ("insuredLName", insuredLName)
    log.info "insuredLName = " + insuredLName
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr" id="240623c7-b333-4e65-b316-6d2e40d3ed6c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>123456789</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>8587945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->

               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>${#TestCase#insuredFName}</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>${#TestCase#insuredLName}</typ:LastName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>INSUREDADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>92111</typ:ZIP>
                  </acc:Address>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB" id="93a3ccbf-126e-4543-bd71-3f1105771278"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithNODIAGErr-PyrSetup" id="f5091d97-6ead-44c3-a5ca-b44434b4ca3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T22.729A</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180627161835280</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-06-27</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180627161835280</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-06-27</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEKTGSV</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMENQQTF</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BSEAST</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>01</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>insuredFName</con:name><con:value>INSUREDFNAMEVADBY</con:value></con:property><con:property><con:name>insuredLName</con:name><con:value>INSUREDLNAMEHWOSS</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-EPAutoMatch-CreateMatchedPriced3rdPartyPyrAccnsWithSUBIDError" searchProperties="true" id="7217da2c-bff9-4cf2-bf50-e9faf47a5390"><con:settings/><con:testStep type="groovy" name="Step1:CreateNew3rdPartyPyrAccnWithSSNSubsId-TestDataSetup" id="32babf32-ec14-45d6-837c-1f76a210dc44"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*;
    import com.xifin.qa.dao.rpm.*;

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    PayorDao payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYRWithWellEXAMPayorId(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def procId = "82947"
    def existAccnDiagCd = payorDao.getLimCovAcceptableDiagCdByProcCdAndPyr(procId,144152)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y = nowCal.get(YEAR)-30
    def m = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    currentDateTime = timeStamp.getTimeStamp()
    testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="request" name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest" id="e882d7b2-4f65-482b-9595-f89bea9c544b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB" id="6ec0254c-5994-4764-9009-0f181cf24722"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep>

    <con:testStep type="groovy" name="Step5:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-TestDataSetup" id="ad11fe36-6ad2-43e8-9a95-bb5e8cbc5041"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;

    import com.xifin.qa.config.*;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    randomCharacter = new RandomCharacter()
    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())

    def receiptId = randomCharacter.getRandomNumericString(10)

    testRunner.testCase.setPropertyValue ("receiptId", receiptId)
    log.info "receiptId = " + receiptId

    def accnInfoList = []
    accnInfoList = daoManagerPlatform.getAccnInfoFromACCNByAccnId(newAccnId, dbEnv)
    def dueAmt = accnInfoList[25]
    testRunner.testCase.setPropertyValue ("dueAmt", dueAmt)
    log.info "dueAmt = " + dueAmt






</script></con:config></con:testStep><con:testStep type="request" name="Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest" id="c507d573-e187-4817-8bad-bc436aa460ea"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>patientPaymentSoap11</con:interface><con:operation>CashPayment</con:operation><con:request name="Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="ca879ee4-efe5-482b-8d3d-0085a7564904"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:CashPaymentRequest>
         <msg:MessageHeader>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:CashPayment>
               <pat:AccessionId>${#TestCase#newAccnID}</pat:AccessionId>
               <!--Optional:-->
               <pat:ReceiptId>${#TestCase#receiptId}</pat:ReceiptId>
               <pat:PaymentAmount>${#TestCase#dueAmt}</pat:PaymentAmount>
               <!--Optional:-->
               <pat:Comment>Automated Smoke Test</pat:Comment>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
            </pat:CashPayment>
         </pat:Payload>
      </pat:CashPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="df14ebda-5075-40bd-bbd9-610a3d606316"/><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/CashPaymentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step7:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-VerifyPmtOnAccn" id="72491ef1-68d0-4522-b558-a7578e2fcad1"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import java.text.*;

    //===Get dbEnv Project-level property value===
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //===Get epSummaryListInDB===
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptPmtListInDB = []
    def newAccnId = testRunner.testCase.getPropertyValue ("newAccnID")

    ptPmtListInDB = daoManagerAccnWS.getPtPmtByAccnIdAndPyrIdAndPmtSeqIdAndPmtTyp(newAccnId, '4', '1','1', dbEnv) // PmtTyp = 1 (Cash Pmt)

    NumberFormat formatter = NumberFormat.getCurrencyInstance();
    ptPmtListInDB[1] = formatter.format(Float.valueOf(ptPmtListInDB[1])).toString().replace('$', '').trim();

    //===Debug info===
    log.info "ptPmtListInDB:" + ptPmtListInDB.size
    for (int i=0; i&lt;ptPmtListInDB.size; i++)
    {
    log.info ptPmtListInDB[i]
    }

    //*****************
    //===Create groovyUtils and XmlHolder for response===
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest#Response" )

    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns4"] = "http://www.xifin.com/schema/patientPayment"

    def ptPmtListInResponse = []

    //===Get epSummaryListInResponse===
    //Loop through the nodes in response message and add the nodes values into a List===
    for( item in holder.getNodeValues( "//ns4:ReceiptId" ))
    {
    ptPmtListInResponse.add(item)

    }

    for( item in holder.getNodeValues( "//ns4:PaymentAmount" ))
    {
    ptPmtListInResponse.add(item)

    }

    //===Debug info===
    log.info "ptPmtListInResponse:" + ptPmtListInResponse.size
    for (int i=0; i&lt;ptPmtListInResponse.size; i++)
    {
    log.info ptPmtListInResponse[i]
    }


    //===Compare the two lists===
    listUtil = new ListUtil()
    def comparePtPmtResult = listUtil.compareLists(ptPmtListInDB, ptPmtListInResponse)
    log.info "comparePtPmtResult = " + comparePtPmtResult
    assert comparePtPmtResult == true: "Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest failed!"

</script></con:config></con:testStep><con:testStep type="groovy" name="Step8:CreateNew3rdPartyPyrAccnWithSSNSubsId-ErrCdPyrReq-TestDataSetup" id="5e27a03a-9a64-42e5-8843-d249d2c18387"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())

    //Set err_cd.B_AUTO_MTCH=1, B_MTCH_CMP=1 for err code = 'SUBID'
    String errCd = daoManagerXifinRpm.getErrCdFromERRCDByErrCdAbbrevErrGrp("SUBID", "Unbillable", dbEnv)
    def count = daoManagerPlatform.setValuesFromTable("err_cd", "B_AUTO_MTCH=1, B_MTCH_CMP=1", "PK_ERR_CD = " + errCd, dbEnv)
    log.info "errCdCount = " + count

    //
    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev
    cout = daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsFldCount = " + count
    cout = daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsCount = " + count

    def pyrId = daoManagerPlatform.getPyrInfoFromPYRByPyrAbbrev(pyrAbbrev, dbEnv).get(0)
    //Add payor requirement into PYR_REQMNTS
    count = daoManagerPlatform.setPyrReqmnsFromPYRREQMNTSByPyrIdAndEffDtAndFldIdAndPatternAndErrMsg(Integer.valueOf(pyrId), "01 jan 2002", 4, ".*", "Subs id is required", "01 jan 2002", dbEnv);
    log.info "pyrReqmntsCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS table"
    //Add payor requirement subs id field into PYR_REQMNTS_FLD
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 1, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 2, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 3, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 4, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"


</script></con:config></con:testStep><con:testStep type="request" name="Step9:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" id="9424758c-bf72-411d-88a8-f0077fbf5b27"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step9:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#CopiedAccnId}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <!--<acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>-->
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB" id="62faf51b-91ca-4b09-82b0-c1a33b9e3e62"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#CopiedAccnId}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step9:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep>
    <con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>4255740566</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>788654637</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1578566626</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEDSAPZ</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEXRPCS</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-02-28</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180228153859163</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-02-28</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180228153859163</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>2.5</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S82.55XP</con:value></con:property><con:property><con:name>CopiedAccnId</con:name><con:value>QATESTERC20180228153904556</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-EPAutoMatch-CreateMatchedPricedPtPyrAccns" searchProperties="true" id="68a6cfd3-0692-4770-9a3e-7618fd41bc34"><con:settings/><con:testStep type="groovy" name="Step1:CreateNewPtPyrAccnWithSSNSubsId-TestDataSetup" id="d60d25f3-8741-4b32-97f0-836ccacc4fdb"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "P"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    currentDateTime = timeStamp.getTimeStamp()
    testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="request" name="Step2:CreateNewPtPyrAccnWithSSNSubsId-SendRequest" id="f1bbf68c-98dc-4ae1-a109-18d6676f46db"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:CreateNewPtPyrAccnWithSSNSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:CreateNewPtPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB" id="63ccdbe7-1ac3-4785-b916-c725b62fbfca"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:CreateNewPtPyrAccnWithSSNSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:CreateNewPtPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:CreateNewPtPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn)" id="1ff4dc9d-2022-43ef-a2f3-cb7799ca3872"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*

    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def eType1 = context.expand('${#Project#eType1}')
    log.info "eType1 = " + eType1

    def eType2 = context.expand('${#Project#eType2}')
    log.info "eType2 = " + eType2

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv

    def engConfigDB = context.expand('${#Project#engConfigDB}')
    log.info "engConfigDB = " + engConfigDB

    def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')
    log.info "hasLoggedIn = " + hasLoggedIn


    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    sysCall = new SystemCall()

    //Detect OS: windows or unix
    //def retval = sysCall.setShellCmd("mvn test -DtestSuite=priceAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")
    def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/priceAnAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DeType1=${eType1} -DeType2=${eType2} -DxapEnv=${xapEnv} -DengConfigDB=${engConfigDB} -DhasLoggedIn=${hasLoggedIn} -Dendpoint")
    log.info "retval = " + retval

    //Verify process completed successfully
    assert retval == 0 : "Step4:CreateNewPtPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn) Failed"

    //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:CreateNewPtPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn) due to the accn was not priced"

</script></con:config></con:testStep><con:testStep type="groovy" name="Step5:CreateNewPtPyrAccnWithSSNSubsId-CashPayment-TestDataSetup" id="d1fa425c-c4dd-4fa8-a378-9456299e4b81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;

    import com.xifin.qa.config.*;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    randomCharacter = new RandomCharacter()
    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())

    def receiptId = randomCharacter.getRandomNumericString(10)

    testRunner.testCase.setPropertyValue ("receiptId", receiptId)
    log.info "receiptId = " + receiptId

    def accnInfoList = []
    accnInfoList = daoManagerPlatform.getAccnInfoFromACCNByAccnId(newAccnId, dbEnv)
    def dueAmt = accnInfoList[25]
    testRunner.testCase.setPropertyValue ("dueAmt", dueAmt)
    log.info "dueAmt = " + dueAmt






</script></con:config></con:testStep><con:testStep type="request" name="Step6:CreateNewPtPyrAccnWithSSNSubsId-CashPayment-SendRequest" id="fe196a78-d20b-4e95-a115-3bb3e435be06"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>patientPaymentSoap11</con:interface><con:operation>CashPayment</con:operation><con:request name="Step6:CreateNewPtPyrAccnWithSSNSubsId-CashPayment-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="ca879ee4-efe5-482b-8d3d-0085a7564904"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:pat="http://www.xifin.com/schema/patientPayment" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <pat:CashPaymentRequest>
         <msg:MessageHeader>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <pat:Payload>
            <pat:CashPayment>
               <pat:AccessionId>${#TestCase#newAccnID}</pat:AccessionId>
               <!--Optional:-->
               <pat:ReceiptId>${#TestCase#receiptId}</pat:ReceiptId>
               <pat:PaymentAmount>${#TestCase#dueAmt}</pat:PaymentAmount>
               <!--Optional:-->
               <pat:Comment>Automated Smoke Test</pat:Comment>
               <!--Optional:-->
               <pat:PrintOnPatientStatement>false</pat:PrintOnPatientStatement>
            </pat:CashPayment>
         </pat:Payload>
      </pat:CashPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="df14ebda-5075-40bd-bbd9-610a3d606316"/><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/patientPayment/patientPayment/CashPaymentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step7:CreateNewPtPyrAccnWithSSNSubsId-CashPayment-VerifyPmtOnAccn" id="16e62f4b-916b-47e5-8980-2023f180f013"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    //===Get dbEnv Project-level property value===
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //===Get epSummaryListInDB===
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptPmtListInDB = []
    def newAccnId = testRunner.testCase.getPropertyValue ("newAccnID")

    ptPmtListInDB = daoManagerAccnWS.getPtPmtByAccnIdAndPyrIdAndPmtSeqIdAndPmtTyp(newAccnId, '4', '1','1', dbEnv) // PmtTyp = 1 (Cash Pmt)
    /*
    //===Debug info===
    log.info "ptPmtListInDB:" + ptPmtListInDB.size
    for (int i=0; i&lt;ptPmtListInDB.size; i++)
    {
    log.info ptPmtListInDB[i]
    }
    */
    //*****************
    //===Create groovyUtils and XmlHolder for response===
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest#Response" )

    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns4"] = "http://www.xifin.com/schema/patientPayment"

    def ptPmtListInResponse = []

    //===Get epSummaryListInResponse===
    //Loop through the nodes in response message and add the nodes values into a List===
    for( item in holder.getNodeValues( "//ns4:ReceiptId" ))
    {
    ptPmtListInResponse.add(item)

    }

    for( item in holder.getNodeValues( "//ns4:PaymentAmount" ))
    {
    ptPmtListInResponse.add(item)

    }
    /*
    //===Debug info===
    log.info "ptPmtListInResponse:" + ptPmtListInResponse.size
    for (int i=0; i&lt;ptPmtListInResponse.size; i++)
    {
    log.info ptPmtListInResponse[i]
    }
    */

    //===Compare the two lists===
    listUtil = new ListUtil()
    def comparePtPmtResult = listUtil.compareLists(ptPmtListInDB, ptPmtListInResponse)
    log.info "comparePtPmtResult = " + comparePtPmtResult
    assert comparePtPmtResult == true: "Step6:CreateNew3rdPartyPyrAccnWithSSNSubsId-CashPayment-SendRequest failed!"

</script></con:config></con:testStep><con:testStep type="groovy" name="Step8:CreateNewPtPyrAccnWithSSNSubsId-ErrCdPyrReq-TestDataSetup" id="6b216bf0-c5b1-4ced-84f5-afe9e8f47c93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())

    //Set err_cd.B_AUTO_MTCH=1, B_MTCH_CMP=1 for err code = 'ADDRESS'
    String errCd = daoManagerXifinRpm.getErrCdFromERRCDByErrCdAbbrevErrGrp("ADDRESS", "Unbillable", dbEnv)
    def count = daoManagerPlatform.setValuesFromTable("err_cd", "B_AUTO_MTCH=1, B_MTCH_CMP=1", "PK_ERR_CD = " + errCd, dbEnv)
    log.info "errCdCount = " + count


    def pyrAbbrev = "P"//context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev
    cout = daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsFldCount = " + count
    cout = daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsCount = " + count

    def pyrId = daoManagerPlatform.getPyrInfoFromPYRByPyrAbbrev(pyrAbbrev, dbEnv).get(0)
    //Add payor requirement into PYR_REQMNTS
    count = daoManagerPlatform.setPyrReqmnsFromPYRREQMNTSByPyrIdAndEffDtAndFldIdAndPatternAndErrMsg(Integer.valueOf(pyrId), "01 jan 2002", -1, ".*", "ADDRESS HAS GENERATED RETURN MAIL", "01 jan 2002", dbEnv);
    log.info "pyrReqmntsCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS table"
    //Add payor requirement subs id field into PYR_REQMNTS_FLD
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", -1, 1, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", -1, 2, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", -1, 3, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", -1, 4, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"



</script></con:config></con:testStep><con:testStep type="request" name="Step9:CopyTheNewPtPyrAccnWithSSNSubsId-SendRequest" id="d794ec92-a453-4cdc-ae0a-e126d3430ef7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step9:CopyTheNewPtPyrAccnWithSSNSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#CopiedAccnId}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTBADADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTBADADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step10:CopyTheNewPtPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB" id="aa989356-16de-44f7-83c9-3c7c68c5779c"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#CopiedAccnId}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step9:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step10:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step11:CopyTheNewPtPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn)" id="19210e8b-8e4e-4747-8345-5396db464f41"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*

    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#CopiedAccnId}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def eType1 = context.expand('${#Project#eType1}')
    log.info "eType1 = " + eType1

    def eType2 = context.expand('${#Project#eType2}')
    log.info "eType2 = " + eType2

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv

    def engConfigDB = context.expand('${#Project#engConfigDB}')
    log.info "engConfigDB = " + engConfigDB

    def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')
    log.info "hasLoggedIn = " + hasLoggedIn


    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    sysCall = new SystemCall()

    //Detect OS: windows or unix
    //def retval = sysCall.setShellCmd("mvn test -DtestSuite=priceAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")
    def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/priceAnAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DeType1=${eType1} -DeType2=${eType2} -DxapEnv=${xapEnv} -DengConfigDB=${engConfigDB} -DhasLoggedIn=${hasLoggedIn} -Dendpoint")
    log.info "retval = " + retval

    //Verify process completed successfully
    assert retval == 0 : "Step11:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SystemSetupUI(PriceAccn) Failed"

    //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step11:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SystemSetupUI(PriceAccn) due to the accn was not priced"

</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>ESPHYS</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S12.650B</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20171218122526749</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-12-18</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20171218122526749</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-12-18</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEDDIGA</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPCRCV</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>54511</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>2100</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>123456789</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>8967515377</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>48.25</con:value></con:property><con:property><con:name>CopiedAccnId</con:name><con:value>QATESTERC2017121812252838</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-EPAutoMatch-CreateMatchedPriced3rdPartyPyrAccns" searchProperties="true" id="5f79babc-6bde-4155-b81f-6774162e007d"><con:settings/><con:testStep type="groovy" name="Step1:CreateNew3rdPartyPyrAccnWithSSNSubsId-TestDataSetup" id="1040a57d-1035-4e71-8ae9-198feef0bf65"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    currentDateTime = timeStamp.getTimeStamp()
    testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="request" name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest" id="05fc48e2-b831-41ed-8b36-5e86f4f8ca5b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB" id="542e1df5-13b6-45f7-9959-b029680980f7"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:CreateNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:CreateNew3rdPartyPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn)" id="cabc44ff-682e-4595-80fb-18db0fb97fa1"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*

    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def eType1 = context.expand('${#Project#eType1}')
    log.info "eType1 = " + eType1

    def eType2 = context.expand('${#Project#eType2}')
    log.info "eType2 = " + eType2

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv

    def engConfigDB = context.expand('${#Project#engConfigDB}')
    log.info "engConfigDB = " + engConfigDB

    def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')
    log.info "hasLoggedIn = " + hasLoggedIn


    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    sysCall = new SystemCall()

    //Detect OS: windows or unix
    //def retval = sysCall.setShellCmd("mvn test -DtestSuite=priceAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")
    def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/priceAnAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DeType1=${eType1} -DeType2=${eType2} -DxapEnv=${xapEnv} -DengConfigDB=${engConfigDB} -DhasLoggedIn=${hasLoggedIn} -Dendpoint")
    log.info "retval = " + retval

    //Verify process completed successfully
    assert retval == 0 : "Step4:CreateNew3rdPartyPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn) Failed"

    //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:CreateNew3rdPartyPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn) due to the accn was not priced"

</script></con:config></con:testStep><con:testStep type="request" name="Step5:CopyTheNew3rdPartyPyrAccnWithSSSubsId-SendRequest" id="a9cf517f-03d9-4271-9ac7-d92b1df170fe"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step5:CopyTheNew3rdPartyPyrAccnWithSSSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#CopiedAccnId}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB" id="120a3184-0a77-4f0e-8498-3e599f2cdc6e"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#CopiedAccnId}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step5:CopyTheNew3rdPartyPyrAccnWithSSSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step6:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step7:CopyTheNew3rdPartyPyrAccnWithSSNSubsId-SystemSetupUI(PriceAccn)" id="f7e54576-f00b-4078-a15d-f03d0c1cc6f0"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*

    import com.xifin.qa.config.*;
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    def newAccnId = context.expand('${#TestCase#CopiedAccnId}')
    log.info "newAccnId = " + newAccnId

    //def Env = context.expand('${#Project#Env}')
    def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")
    log.info "Env = " + Env

    def OrgAlias = context.expand('${#Project#OrgAlias}')
    log.info "OrgAlias = " + OrgAlias

    def eType1 = context.expand('${#Project#eType1}')
    log.info "eType1 = " + eType1

    def eType2 = context.expand('${#Project#eType2}')
    log.info "eType2 = " + eType2

    def xapEnv = context.expand('${#Project#xapEnv}')
    log.info "xapEnv = " + xapEnv

    def engConfigDB = context.expand('${#Project#engConfigDB}')
    log.info "engConfigDB = " + engConfigDB

    def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')
    log.info "hasLoggedIn = " + hasLoggedIn


    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    sysCall = new SystemCall()

    //Detect OS: windows or unix
    //def retval = sysCall.setShellCmd("mvn test -DtestSuite=priceAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")
    def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/priceAnAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DeType1=${eType1} -DeType2=${eType2} -DxapEnv=${xapEnv} -DengConfigDB=${engConfigDB} -DhasLoggedIn=${hasLoggedIn} -Dendpoint")
    log.info "retval = " + retval

    //Verify process completed successfully
    assert retval == 0 : "Step11:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SystemSetupUI(PriceAccn) Failed"

    //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step11:CopyTheNew3rdPartyPyrAccnWithSSNNoSubsId-SystemSetupUI(PriceAccn) due to the accn was not priced"

</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>ESPHYS</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>M71.50</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20171218152515570</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-12-18</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20171218152515570</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-12-18</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEBUYZ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEFFBSN</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>54511</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BSIN</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1578566626</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>2100</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>123456789</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>4479247801</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>48.25</con:value></con:property><con:property><con:name>CopiedAccnId</con:name><con:value>QATESTERC20171218152516863</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewPriced3rdPartyPyrAccnWithNewEPI" searchProperties="true" id="f7378fea-6e43-4748-a878-1bacccb05b13"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="94b552fc-6ab9-4bfa-b7c1-7129f370b0af"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="b719e2a0-3208-4cd5-b6bf-a3ca7d01d5fc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="5167fbf8-71c1-4abd-b60a-400e4f6b5454"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI" id="d70cd233-f9e7-4066-8c8f-73f0805a8640"><con:settings/><con:config><script>import com.rpm.tests.*;
    import com.xifin.utils.*
    import com.xifin.mars.dao.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.mbasys.mars.persistance.AccnStatusMap;
    import com.xifin.qa.config.*;

    //Get dbEnv Project-level property value
    <!--def dbEnv = null-->
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    <!--log.info "dbEnv = " + dbEnv-->

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info "newAccnId = " + newAccnId

    <!--//def Env = context.expand('${#Project#Env}')-->
    <!--def Env = testRunner.testCase.testSuite.project.getPropertyValue ("Env")-->
    <!--log.info "Env = " + Env-->

    <!--def OrgAlias = context.expand('${#Project#OrgAlias}')-->
    <!--log.info "OrgAlias = " + OrgAlias-->

    <!--def eType1 = context.expand('${#Project#eType1}')-->
    <!--log.info "eType1 = " + eType1-->

    <!--def eType2 = context.expand('${#Project#eType2}')-->
    <!--log.info "eType2 = " + eType2-->

    <!--def xapEnv = context.expand('${#Project#xapEnv}')-->
    <!--log.info "xapEnv = " + xapEnv-->

    <!--def engConfigDB = context.expand('${#Project#engConfigDB}')-->
    <!--log.info "engConfigDB = " + engConfigDB-->

    <!--def hasLoggedIn = context.expand('${#Project#hasLoggedIn}')-->
    <!--log.info "hasLoggedIn = " + hasLoggedIn-->
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    AccessionDao accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
    log.info "Wait for an accession to be out of Q_FR_PENDING"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_FR_PENDING, 1000*10*60)
    log.info "Wait for an accession to be out of Q_ELIG"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId,AccnStatusMap.Q_ELIG, 1000*10*60)
    log.info "Wait for an accession to be priced"
    accessionDao.waitForAccnToBeOutOfQueue(newAccnId, AccnStatusMap.Q_PRICE, 1000*10*60)
    <!--def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)-->
    <!--&lt;!&ndash;def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, dbEnv)&ndash;&gt;-->
    <!--log.info "accnStatusId = " + accnStatusId-->
    <!--assert accnStatusId == 21 : "Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI due to the accn was not priced"-->
    <!--&lt;!&ndash;Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);&ndash;&gt;-->
    DaoManagerXifinRpm daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    <!--sysCall = new SystemCall()-->

    <!--//Detect OS: windows or unix-->
    <!--//def retval = sysCall.setShellCmd("mvn test -DtestSuite=priceAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -Dendpoint")-->
    <!--def retval = sysCall.setShellCmd("mvn test -DtestSuite=mars/priceAnAccn -DaccnId=${newAccnId} -Denv=${Env} -DtestDb=${dbEnv} -DorgAlias=${OrgAlias} -DeType1=${eType1} -DeType2=${eType2} -DxapEnv=${xapEnv} -DengConfigDB=${engConfigDB} -DhasLoggedIn=${hasLoggedIn} -Dendpoint")-->
    <!--log.info "retval = " + retval-->

    <!--//Verify process completed successfully-->
    <!--assert retval == 0 : "Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI Failed"-->

    //Verify that the accn status = 21 (Priced)
    def accnStatusId = daoManagerXifinRpm.getStatusIdByAccnId(newAccnId, null)
    log.info "accnStatusId = " + accnStatusId
    assert accnStatusId == 21 : "Step4:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-SystemSetupUI due to the accn was not priced"

</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>100</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>C84.94</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170904201447184</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-09-04</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170904201447184</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-09-04</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEEZYP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEUVLVL</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A123456789</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BSIN</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1205878451</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-PricingEngine-CreateNewFinalReportedPtPyrAccnWithNewEPISingleTest" searchProperties="true" id="da0cc5f2-4ba4-4bc5-9524-d8ddc14422dd"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-TestDataSetup" id="7d9dd3af-253d-40ef-a408-d43f60b5e149"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*

    //======== Get values ========
    def dbEnv = testRunner.testCase.testSuite.project.getPropertyValue("dbEnv")
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = "34321"
    //Get ClientId value
    def existClnAbbrev = "100"
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def existTestAbbrev = "GLUCOSE"
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get Test POS
    def existTestPOS = "ACME"
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" id="42de2f6a-48c0-4a04-9d3d-04b99daa1620"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="19d6f43a-c8dd-49da-8045-aaee3fd4a690"><con:settings/><con:config>
    <script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "newAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEVKRQX</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEBNYFQ</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-02-12</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-02-12</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180212133845126</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>100</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-PricingEngine-CreateTwoNewFinalReportedPtPyrAccnWithTheSameEPISingleTest" searchProperties="true" id="b7341dd0-319c-47bf-8878-de22e1f235ab"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-TestDataSetup" id="c1502a9b-b763-4a54-8a97-469c1050aa15"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())


    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = "34321"
    //Get ClientId value
    def existClnAbbrev = "100"
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def existTestAbbrev = "GLUCOSE"
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get Test POS
    def existTestPOS = "ACME"
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" id="f7ad55c4-7e08-4728-9c26-37b03372ed79"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="d8e4777a-ae1a-44f2-be32-3c10e3c48964"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="5ada8ced-a38e-493b-95a5-a37ead627c3d"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPISingleTest-TestDataSetup" id="5c07dde8-85b5-4fe2-86b9-9f7104333aa4"><con:settings/><con:config><script>import com.xifin.utils.*;

    import com.xifin.qa.config.*;
    timeStamp = new TimeStamp()
    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //======== Set TestCase level property values ========
    //Set NewAccnID2 TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID2", "QATESTER" + currentDateTime)
    log.info "NewAccnID2 = " + "QATESTER" + currentDateTime

</script></con:config></con:testStep><con:testStep type="request" name="Step5:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPISingleTest" id="c82a61cd-5ba2-4a29-9958-6dc70de94d6b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step5:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPISingleTest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID2}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB" id="96c3103e-be5c-41ea-9f58-0e9756f8917b"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID2}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step5:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPISingleTest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step6:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithSameEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>100</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T17.420</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180214142328130</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-02-14</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180214142328130</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-02-14</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEMIKTE</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEBITDF</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1205878451</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>NewAccnID2</con:name><con:value>QATESTER20180214142335360</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-PricingEngine-CreateNewFinalReportedPtPyrAccnWithNewEPITwoSingleTests" searchProperties="true" id="bec657c7-6ad7-4412-9ce9-d7bffeb74c9e"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-TestDataSetup" id="391a0131-9a56-4984-95ea-a35dd8e2c451"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())


    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = "34321"
    //Get ClientId value
    def existClnAbbrev = "100"
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testAbbrev1 = "PAP"
    log.info "testAbbrev1 = " + testAbbrev1

    def testAbbrev2 = "300"
    log.info "testAbbrev2 = " + testAbbrev2

    //Get Test POS
    def existTestPOS = "ACME"
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev1", testAbbrev1)
    log.info "testAbbrev1 = " + testAbbrev1

    testRunner.testCase.setPropertyValue ("TestAbbrev2", testAbbrev2)
    log.info "testAbbrev2 = " + testAbbrev2

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" id="b4ad2d05-cf2a-4ad5-a597-329f307d07f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev1}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>2</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev2}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="d8e4777a-ae1a-44f2-be32-3c10e3c48964"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB" id="65da6e62-2b37-4dc7-882b-2fc861d90df2"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewFinalReportedPtPyrAccnWithNewEPI-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1548332539</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>P</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEABOKW</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEYIWDK</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-02-15</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180215140329394</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-02-15</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180215140329394</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S42.191D</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>100</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev1</con:name><con:value>PAP</con:value></con:property><con:property><con:name>TestAbbrev2</con:name><con:value>300</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-EPTimeLimit-CreatePriced3rdPartyPyrAccnsWithSUBIDError" searchProperties="true" id="0eb6fea9-85e3-4901-bad8-688a8759dc5f"><con:settings/><con:testStep type="groovy" name="Step1:CreateNew3rdPartyPyrAccnWithSSNSubsId-TestDataSetup" id="789a3980-e8e9-4519-87b7-dbe0f435d000"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    //currentDateTime = timeStamp.getTimeStamp()
    //testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    //log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="groovy" name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-ErrCdPyrReq-TestDataSetup" id="e43c7170-2817-4347-b9ec-746348711e33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())

    //Set err_cd.B_AUTO_MTCH=1, B_MTCH_CMP=1 for err code = 'SUBID'
    //String errCd = daoManagerXifinRpm.getErrCdFromERRCDByErrCdAbbrevErrGrp("SUBID", "Unbillable", dbEnv)
    //def count = daoManagerPlatform.setValuesFromTable("err_cd", "B_AUTO_MTCH=1, B_MTCH_CMP=1", "PK_ERR_CD = " + errCd, dbEnv)
    //log.info "errCdCount = " + count

    //
    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev
    def count = daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsFldCount = " + count
    cout = daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsCount = " + count

    def pyrId = daoManagerPlatform.getPyrInfoFromPYRByPyrAbbrev(pyrAbbrev, dbEnv).get(0)
    //Add payor requirement into PYR_REQMNTS
    count = daoManagerPlatform.setPyrReqmnsFromPYRREQMNTSByPyrIdAndEffDtAndFldIdAndPatternAndErrMsg(Integer.valueOf(pyrId), "01 jan 2002", 4, ".*", "Subs id is required", "01 jan 2002", dbEnv);
    log.info "pyrReqmntsCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS table"
    //Add payor requirement subs id field into PYR_REQMNTS_FLD
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 1, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 2, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 3, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 4, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"


</script></con:config></con:testStep><con:testStep type="request" name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" id="9da5fc54-41fc-4bdc-a4cc-91a8acf5692c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <!--<acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>-->
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB" id="6d18bb59-92ca-4b8a-b9ef-347c80b9dad4"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>M93.83</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>2.5</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180301135711854</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-03-01</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180301135711854</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-03-01</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMELHPGM</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEQFJRT</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1396711644</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>725773659</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>4255740566</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr" searchProperties="true" id="28f85e0d-6987-44bc-99e6-7ca5a2e6e875"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-TestDataSetup" id="2b88e5a1-cfd8-4b13-a83e-3e60c398a06b"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*;
    import com.mbasys.mars.ejb.entity.cln.Cln;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    def existClnAbbrev = "200"
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "MCCA"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //Generate random insuredFName, insuredLName
    def insuredFName = "INSUREDFNAME" + randomCharacter.getRandomAlphaString(5)
    def insuredLName = "INSUREDLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "insuredFName = " + insuredFName
    log.info "insuredLName = " + insuredLName

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    //testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    testRunner.testCase.setPropertyValue ("Relshp", "01") //01: Spouse
    log.info "Relshp = " + "01"

    //Set insuredFName and insuredLName TestCase-level values
    testRunner.testCase.setPropertyValue ("insuredFName", insuredFName)
    log.info "insuredFName = " + insuredFName
    testRunner.testCase.setPropertyValue ("insuredLName", insuredLName)
    log.info "insuredLName = " + insuredLName
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr" id="d2fcbc95-dd82-4ff6-9146-db70b248a7a3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>123456789</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <!--<typ:ZIP>32542</typ:ZIP>-->
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>8587945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>${#TestCase#insuredFName}</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>${#TestCase#insuredLName}</typ:LastName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>INSUREDADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>92111</typ:ZIP>
                  </acc:Address>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB" id="40a9a8fd-8336-47ef-9fce-1576af200e77"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-PyrSetup" id="6e8c0ba0-0174-47f7-954f-4bef1dbc752d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O41.8X34</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180529160620678</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-05-29</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180529160620678</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-05-29</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEBSVCX</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEQQORQ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>01</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>insuredFName</con:name><con:value>INSUREDFNAMEKOQZF</con:value></con:property><con:property><con:name>insuredLName</con:name><con:value>INSUREDLNAMENQUAG</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyAccnWithSUBIDError" searchProperties="true" id="4c9225bf-a61b-418a-8bd8-22c6c72a8ef7"><con:settings/><con:testStep type="groovy" name="Step1:CreateNew3rdPartyPyrAccnWithSSNSubsId-TestDataSetup" id="27f05304-c23d-4cca-bdee-1c121bb0ac70"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    import com.mbasys.mars.persistance.AccnStatusMap;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "BSFE"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    //currentDateTime = timeStamp.getTimeStamp()
    //testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    //log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="groovy" name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-ErrCdPyrReq-TestDataSetup" id="7adc8157-06ab-44b1-8bd8-827301dbff72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())

    //Set err_cd.B_AUTO_MTCH=1, B_MTCH_CMP=1 for err code = 'SUBID'
    //String errCd = daoManagerXifinRpm.getErrCdFromERRCDByErrCdAbbrevErrGrp("SUBID", "Unbillable", dbEnv)
    //def count = daoManagerPlatform.setValuesFromTable("err_cd", "B_AUTO_MTCH=1, B_MTCH_CMP=1", "PK_ERR_CD = " + errCd, dbEnv)
    //log.info "errCdCount = " + count

    //
    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev
    def count = daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsFldCount = " + count
    cout = daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsCount = " + count

    def pyrId = daoManagerPlatform.getPyrInfoFromPYRByPyrAbbrev(pyrAbbrev, dbEnv).get(0)
    //Add payor requirement into PYR_REQMNTS
    count = daoManagerPlatform.setPyrReqmnsFromPYRREQMNTSByPyrIdAndEffDtAndFldIdAndPatternAndErrMsg(Integer.valueOf(pyrId), "01 jan 2002", 4, ".*", "Subs id is required", "01 jan 2002", dbEnv);
    log.info "pyrReqmntsCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS table"
    //Add payor requirement subs id field into PYR_REQMNTS_FLD
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 1, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 2, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 3, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 4, 4, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"


</script></con:config></con:testStep><con:testStep type="request" name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" id="4369f082-4d05-499d-8d07-fcbcf338f72c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>92111</typ:ZIP>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>6197945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <!--<acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>-->
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB" id="4ff17155-d155-4fd9-b401-94d47687f967"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step5:CreateNew3rdPartyPyrAccnWithSSNSubsId-PyrSetup-TestDataSetup" id="a4f71f67-eda5-495d-bec0-49df98147e0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>H80.23</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>2.5</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180529160637761</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-05-29</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180529160637761</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-05-29</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEJNPER</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEUMOWP</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>BSFE</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1215930367</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>731174157</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>4255740566</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyAccnWithAUTHErr" searchProperties="true" id="4557bd66-7db8-46d6-9ae1-54dab4ddfb82"><con:settings/><con:testStep type="groovy" name="Step1:CreateNew3rdPartyPyrAccnWithSSNSubsId-TestDataSetup" id="587e91dd-9042-4e1e-9e16-38949f9f6096"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "MCUGS"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev

    //set pt SSN TestCase-level value
    String ptSsn="7"+randomCharacter.getNonZeroRandomNumericString(8);
    //testRunner.testCase.setPropertyValue ("PtSSN", "123456789");
    testRunner.testCase.setPropertyValue ("PtSSN", ptSsn);
    log.info "PtSSN = " + ptSsn

    //Set CopiedAccnId TestCase-level value
    //currentDateTime = timeStamp.getTimeStamp()
    //testRunner.testCase.setPropertyValue ("CopiedAccnId", "QATESTERC" + currentDateTime)
    //log.info "CopiedAccnId = " + "QATESTERC" + currentDateTime

</script></con:config></con:testStep><con:testStep type="groovy" name="Step2:CreateNew3rdPartyPyrAccnWithSSNSubsId-ErrCdPyrReq-TestDataSetup" id="0788b886-855e-4e00-9e9e-31767842749f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())

    //Set err_cd.B_AUTO_MTCH=1, B_MTCH_CMP=1 for err code = 'SUBID'
    //String errCd = daoManagerXifinRpm.getErrCdFromERRCDByErrCdAbbrevErrGrp("SUBID", "Unbillable", dbEnv)
    //def count = daoManagerPlatform.setValuesFromTable("err_cd", "B_AUTO_MTCH=1, B_MTCH_CMP=1", "PK_ERR_CD = " + errCd, dbEnv)
    //log.info "errCdCount = " + count

    //
    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev
    def count = daoManagerAccnWS.deletePyrReqmntsFldByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsFldCount = " + count
    cout = daoManagerAccnWS.deletePyrReqmntsByPyrAbrrev(pyrAbbrev, dbEnv)
    log.info "pyrReqmntsCount = " + count

    def pyrId = daoManagerPlatform.getPyrInfoFromPYRByPyrAbbrev(pyrAbbrev, dbEnv).get(0)
    //Add payor requirement into PYR_REQMNTS
    count = daoManagerPlatform.setPyrReqmnsFromPYRREQMNTSByPyrIdAndEffDtAndFldIdAndPatternAndErrMsg(Integer.valueOf(pyrId), "01 jan 2002", 17, ".*", "Enter the authorization number for the service", "01 jan 2002", dbEnv);
    log.info "pyrReqmntsCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS table"
    //Add payor requirement subs id field into PYR_REQMNTS_FLD
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 17, 1, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 17, 2, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 17, 3, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"
    count = daoManagerPlatform.setPyrReqmnsFldFromPYRREQMNTSFLDByPyrIdAndEffDtAndFldIdAndScrnIdAndReqId(Integer.valueOf(pyrId), "01 jan 2002", 17, 4, 3, dbEnv);
    log.info "pyrReqmntsFldCount = " + count
    assert count>0 : "The record is not added to PYR_REQMNTS_FLD table"

</script></con:config></con:testStep><con:testStep type="request" name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" id="f4cd97e7-4918-4dbd-a9cb-05114c626a02"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="497b5ee3-9494-4764-9276-32341043939a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>${#TestCase#PtSSN}</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>92111</typ:ZIP>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>6197945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e07a17-5963-4320-8c78-9578c8c5053a"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="8391e6da-0276-4158-972a-703a4ccf7f3f"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB" id="4896dfcd-b6ff-468e-994b-34b5edb69b91"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step3:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step4:CreateNew3rdPartyPyrAccnWithSSNNoSubsId-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step5:CreateNew3rdPartyPyrAccnWithSSNSubsId-PyrSetup-TestDataSetup" id="58212432-b6c3-419b-b0a4-3e6535f2cbf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S66.516</con:value></con:property><con:property><con:name>dueAmt</con:name><con:value>2.5</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180529155700913</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-05-29</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180529155700913</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-05-29</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEAWMPK</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEOICBP</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1114922606</con:value></con:property><con:property><con:name>PtSSN</con:name><con:value>774983762</con:value></con:property><con:property><con:name>receiptId</con:name><con:value>4255740566</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccnWithClientBilledPayorC" searchProperties="true" id="8d653339-8721-43b5-b3bd-18bf6775ccb8"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="3a2c9ab2-6e48-430d-a12b-2d0f51f204d5"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    payorDao=new PayorDaoImpl(configuration.getRpmDatabase())
    
    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = "174869"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    //def existPyrAbbrev = existPyrInfoList[0]
    def existPyrAbbrev = 'C'
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    if(!payorDao.getPyrLcAccptDiagCdByPyrId(payorDao.getPyrByPyrAbbrv(existPyrAbbrev).getPyrId())==null)
    existAccnDiagCd = payorDao.getPyrLcAccptDiagCdByPyrId(payorDao.getPyrByPyrAbbrv(existPyrAbbrev).getPyrId()).getDiagCdStrtRng()

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="798dc5bc-2d49-42f4-ab40-c02d2673609c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
<!--                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="9797d0a5-908b-4a52-91f3-15c289237178"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>BESTLABS</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S82.116F</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20160914134936394</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-09-14</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160914134936394</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-09-14</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEBFDP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMETUCCZ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>123456789A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCT</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1063473072</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>1000</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewFinalReportedPartyPyrSuspAccnWithNewEPI" searchProperties="true" id="f02cd11f-fbf0-4892-999f-50125675b80e"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="51e4e886-cc9e-4b80-962b-e150f93b9707"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    //def dbEnv = null
   // def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    //log.info "dbEnv = " + dbEnv

   // Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);

//helloeddb
    //Get dbEnv Project-level property value
    def dbEnv = testRunner.testCase.testSuite.project.getPropertyValue ("dbEnv")
    Configuration configuration = ConfigurationLoader.loadConfiguration(testRunner.testCase.testSuite.project.getPropertyValue("orgalias"))
    log.info "dbEnv = " + dbEnv
    
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrWithPricingSusp(dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "DDB existPyrAbbrev = " + existPyrAbbrev
    log.info "DDB existSubsId = " + existSubsId
    log.info "DDB existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="7874257f-220a-4a44-bc48-6611416b985f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="fdb3cfe0-e73e-482e-b8be-ddcacedf4f7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;    

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId
//DDBTEST
    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T23.451</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170717220514718</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-07-17</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170717220514718</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-07-17</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMERFRKQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPGXOO</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateNewAccnForAttachmentStatement" searchProperties="true" id="2d2d752f-fbf4-41b1-bced-435662a3ff50"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="0594c4f3-445e-43f6-803b-0f1c310772bc"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "Q" + currentDateTime)
    log.info "NewAccnID = " + "Q" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="80eff306-fe76-4aa1-8ee7-b73e65a34a33"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
<!--                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>AETNA</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="4ac4dab0-c5fc-418a-892f-0faac3d0cb41"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>T23.451</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20170717220514718</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2017-07-17</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20170717220514718</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1987-07-17</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMERFRKQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPGXOO</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1447222641</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr_EPFAX" searchProperties="true" id="d08dd520-e76d-427e-9f9e-e608d3b29c91"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-TestDataSetup" id="5396afc1-5aaf-4483-a1f5-91fd47342d09"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*;
    import com.mbasys.mars.ejb.entity.cln.Cln;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    //def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnId = "146040"
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    //def existClnAbbrev = "200"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "MCCA"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //Generate random insuredFName, insuredLName
    def insuredFName = "INSUREDFNAME" + randomCharacter.getRandomAlphaString(5)
    def insuredLName = "INSUREDLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "insuredFName = " + insuredFName
    log.info "insuredLName = " + insuredLName

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    //testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    testRunner.testCase.setPropertyValue ("Relshp", "01") //01: Spouse
    log.info "Relshp = " + "01"

    //Set insuredFName and insuredLName TestCase-level values
    testRunner.testCase.setPropertyValue ("insuredFName", insuredFName)
    log.info "insuredFName = " + insuredFName
    testRunner.testCase.setPropertyValue ("insuredLName", insuredLName)
    log.info "insuredLName = " + insuredLName
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr" id="82adc6c2-6a58-402e-83d2-06fb7a6aada4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>123456789</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <!--<typ:ZIP>32542</typ:ZIP>-->
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>8587945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>${#TestCase#insuredFName}</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>${#TestCase#insuredLName}</typ:LastName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>INSUREDADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>92111</typ:ZIP>
                  </acc:Address>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB" id="a070276a-88fa-4aec-b799-0aacece31ba4"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-PyrSetup" id="3143a468-a323-4679-9f77-f5c936da73f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>900</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O41.8X34</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180529160620678</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-05-29</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180529160620678</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-05-29</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEBSVCX</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEQQORQ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>01</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>insuredFName</con:name><con:value>INSUREDFNAMEKOQZF</con:value></con:property><con:property><con:name>insuredLName</con:name><con:value>INSUREDLNAMENQUAG</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-CreateNewAccnWith3rdPartyPayor" searchProperties="true" id="75ff01bd-b180-4b9d-954e-f1ab625ba02d"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-TestDataSetup" id="4006a1c4-0ec4-42f7-867a-7dc930e84314"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    payorDao=new PayorDaoImpl(configuration.getRpmDatabase())
    
    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    if(!payorDao.getPyrLcAccptDiagCdByPyrId(payorDao.getPyrByPyrAbbrv(existPyrAbbrev).getPyrId())==null)
    existAccnDiagCd = payorDao.getPyrLcAccptDiagCdByPyrId(payorDao.getPyrByPyrAbbrv(existPyrAbbrev).getPyrId()).getDiagCdStrtRng()

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    log.info "Relshp = " + existRelshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" id="450cd19a-3ad8-4c99-9819-7a441074510d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
<!--                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB" id="31f08cd0-d72b-4fe8-9409-95121cb19ca0"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-CreateNewPricedAccnWith3rdPartyPayor-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>BESTLABS</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>S82.116F</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20160914134936394</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2016-09-14</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20160914134936394</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1986-09-14</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEBFDP</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMETUCCZ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>123456789A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCT</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1063473072</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>1000</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateNewFinalReported3rdPartyPyrAccnWithOverrideError" searchProperties="true" id="e421970a-b86a-44b2-8c7d-d4e13ab93913"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewFinalReported3rdPartyPyrAccn-TestDataSetup" id="025786f7-3dbf-4d8a-a43c-ff2d8bab08aa"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.mars.dao.*;
    import static java.util.Calendar.*;
    import com.mbasys.mars.ejb.entity.cln.Cln;
    import com.xifin.qa.dao.rpm.ClientDao;
    import com.xifin.qa.dao.rpm.ClientDaoImpl;

    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    timeStamp = new TimeStamp()
    randomCharacter = new RandomCharacter()
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())

    //Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    //def existClnId = existAccnIdClnIdList[1]
    //def existClnId = "34343"
    def existClnId = "146040"
    ClientDao clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    //def existClnAbbrev = "200"
    def existClnAbbrev = daoManagerXifinRpm.getClientAbbrevIdByClientId(existClnId, dbEnv)
    log.info "existClnAbbrev = " + existClnAbbrev

    //Get timeStamp value
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Generate random ptEPI
    def newPtEPI = "EPI" + currentDateTime
    log.info "newPtEPI = " + newPtEPI

    //Generate random ptFName, ptLName
    def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "newPtFName = " + newPtFName
    log.info "newPtLName = " + newPtLName

    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
    def existPyrAbbrev = "MCCA"//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = daoManagerAccnWS.getTestAbbrevFromTESTByTestId(existTestId, dbEnv)
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

    //Get Accn Diagnosis Code
    //def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCodeByAccnIdUserDiagOrder(existAccnId, 1, dbEnv)
    def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
    log.info "existAccnDiagCd = " + existAccnDiagCd

    //Generate random insuredFName, insuredLName
    def insuredFName = "INSUREDFNAME" + randomCharacter.getRandomAlphaString(5)
    def insuredLName = "INSUREDLNAME" + randomCharacter.getRandomAlphaString(5)
    log.info "insuredFName = " + insuredFName
    log.info "insuredLName = " + insuredLName

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + currentDateTime

    //Set new DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClnAbbrev", existClnAbbrev)
    log.info "ClnAbbrev = " + existClnAbbrev

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", newPtEPI)
    log.info "NewEPI = " + newPtEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
    log.info "NewPtFName = " + newPtFName
    testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
    log.info "NewPtLName = " + newPtLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", existSubsId)
    log.info "NewSubsId = " + existSubsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", existPhysNPI)
    log.info "PhysNPI = " + existPhysNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", existTestAbbrev)
    log.info "TestAbbrev = " + existTestAbbrev

    //set accn POS TestCase-level value
    testRunner.testCase.setPropertyValue ("AccnPOS", existAccnPOS)
    log.info "AccnPOS = " + existAccnPOS

    //set test POS TestCase-level value
    testRunner.testCase.setPropertyValue ("TestPOS", existTestPOS)
    log.info "TestPOS = " + existTestPOS

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", existAccnDiagCd)
    log.info "DiagCD = " + existAccnDiagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", existPyrAbbrev)
    log.info "PayorAbbrev = " + existPyrAbbrev

    //set RelshpType TestCase-level value
    //testRunner.testCase.setPropertyValue ("Relshp", existRelshpAbbrev)
    testRunner.testCase.setPropertyValue ("Relshp", "01") //01: Spouse
    log.info "Relshp = " + "01"

    //Set insuredFName and insuredLName TestCase-level values
    testRunner.testCase.setPropertyValue ("insuredFName", insuredFName)
    log.info "insuredFName = " + insuredFName
    testRunner.testCase.setPropertyValue ("insuredLName", insuredLName)
    log.info "insuredLName = " + insuredLName
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewFinalReported3rdPartyPyrAccn" id="0677a30f-1ced-4711-9bd4-0f28b257bf2d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewFinalReported3rdPartyPyrAccn" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="7a8e9503-626e-4e56-b48c-d8a91e870c08"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--type: SSNType-->
                     <typ:SSN>123456789</typ:SSN>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:City>SAN DIEGO</typ:City>
                        <!--Optional:-->
                        <!--anonymous type-->
                        <typ:State>CA</typ:State>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                     <!--Optional:-->
                     <!--type: PhoneNumberType-->
                     <typ:HomePhone>8587945858</typ:HomePhone>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#AccnPOS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
                  <acc:InsuredName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:FirstName>${#TestCase#insuredFName}</typ:FirstName>
                     <!--Optional:-->
                     <!--type: NameIdType-->
                     <typ:LastName>${#TestCase#insuredLName}</typ:LastName>
                  </acc:InsuredName>
                  <!--Optional:-->
                  <acc:Address>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:AddressLine1>INSUREDADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <!--anonymous type-->
                     <typ:ZIP>92111</typ:ZIP>
                  </acc:Address>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="2162a338-3dfd-42ee-8291-ee2d6cbf78d2"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="b7c031dc-7109-4697-821d-07210224e49d"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateNewFinalReported3rdPartyPyrAccn-VerifyNewlyCreatedAccnInDB" id="35de4209-4b9a-4c28-a572-2fa94adc9a94"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Step3:Accession WS-EPOutsideAgencyEngine-CreateNewFinalReported3rdPartyPyrAccnWithPtZipErr-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:testStep type="groovy" name="Step4:Accession WS-CreateNewFinalReported3rdPartyPyrAccn-PyrSetup" id="e59eb8dd-bd13-45b6-8ad9-9795c8f6c2fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
    import com.xifin.utils.*;
    import com.xifin.platform.dao.*;
    import com.xifin.mars.dao.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;

    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    daoManagerPlatform = new DaoManagerPlatform(configuration.getRpmDatabase())
    daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())


    def pyrAbbrev = context.expand('${#TestCase#PayorAbbrev}')
    log.info "pyrAbbrev = " + pyrAbbrev

    def accnId = context.expand('${#TestCase#NewAccnID}')
    log.info "AccnID = " + accnId

    def accnTestInfo = []
    accnTestInfo = daoManagerAccnWS.getNonProfAccnTestInfoFromACCNTESTByAccnId(accnId, dbEnv)
    def procCd = accnTestInfo[0]
    testRunner.testCase.setPropertyValue ("ProcCD", procCd)
    log.info "ProcCd = " + procCd


    //Remove all the Payor LC Proc Cd
    def NumOfRows = daoManagerAccnWS.deletePyrLCProcCdFromPYRLCPROCCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 1= " + NumOfRows

    //Remove all the Payor LC Diag Cd
    NumOfRows = daoManagerAccnWS.deletePyrLCDiagCdFromPYRLCACCPTDIAGCDByPyrAbrrevProcCd(pyrAbbrev, procCd, dbEnv)
    //log.info "NumOfRows 2= " + NumOfRows



</script></con:config></con:testStep><con:testStep type="request" name="AccessionWs-UpdateAccession-AddOverrideError" id="b2727aa3-f37c-4228-8608-74ea14f9524d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>AddOverrideError</con:operation><con:request name="AccessionWs-UpdateAccession-AddOverrideError" id="ee95a196-472b-42f4-9f13-85159223d1b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:AddOverrideErrorRequest>
         <msg:MessageHeader>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
            <acc:PayorId>MCCA</acc:PayorId>
            <acc:OverrideReasonCode>EPFAXCLIENTACT</acc:OverrideReasonCode>
         </acc:Payload>
      </acc:AddOverrideErrorRequest>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="SOAP Response" id="145ea8cd-2889-49f6-934e-751c9cf02bd0"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>CLNAUTO49133810</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O41.8X34</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20180529160620678</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2018-05-29</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180529160620678</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1988-05-29</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEBSVCX</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEQQORQ</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>585785842A</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCCA</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1487646444</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>CH1VFRNT</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>insuredFName</con:name><con:value>INSUREDFNAMEKOQZF</con:value></con:property><con:property><con:name>insuredLName</con:name><con:value>INSUREDLNAMENQUAG</con:value></con:property><con:property><con:name>ProcCD</con:name><con:value>71010</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession" searchProperties="true" id="a0d194b4-48da-4e53-a727-f40aaf9ddc8e"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession-TestDataSetup" id="60b317a7-2aef-4a49-abef-3d3a22c6a174"><con:settings/><con:config><script>	import com.xifin.utils.*;
	import com.xifin.accnws.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.mars.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.qa.dao.rpm.*;
	import static java.util.Calendar.*
	
	//======== Get Configuration ========
	def dbEnv = null
	def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
	log.info "orgAlias="+orgAlias
	
	Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

	//Load Daos
	accnDao = new AccessionDaoImpl(configuration.getRpmDatabase())
	clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
	testDao = new TestDaoImpl(configuration.getRpmDatabase())
	patientDao = new PatientDaoImpl(configuration.getRpmDatabase())
	payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
	daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
	daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
	
	timeStamp = new TimeStamp()
	randomCharacter = new RandomCharacter()
	
	//Get timeStamp value
	def currentDateTime = timeStamp.getTimeStamp()
	
	//Get currentdate value
	def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")
	
	//generate new pt DOB
	def nowCal = Calendar.instance
	def y  = nowCal.get(YEAR)-30
	def m  = nowCal.get(MONTH)
	def d = nowCal.get(DATE)
	nowCal.set(y,m,d)
	
	//======== Get values ========

	def existAccnIdClnIdList = []
     existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
     def existAccnId = existAccnIdClnIdList[0]
	
	// Data for new Accn info
	def newAccnId = "QATESTER" + currentDateTime
	
	//Data for Client Info
	def cln = clientDao.getClnByXrefTyp(300) // Article 28 clients
	testRunner.testCase.setPropertyValue ("clnId", cln.getClnId().toString())
	
	def clnAbbrev = cln.getClnAbbrev();
	log.info "clnAbbrevhhhhh="+clnAbbrev

	def newPtEPI = "EPI" + currentDateTime

	def patientType = "Inpatient"
	def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtDOB = String.format('%tF', nowCal)
	def addressLine1 = "PTADDR1" + newAccnId
	def addressLine2 = "PTADDR1" + newAccnId
	
	//Data for Physicians
	def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
	
	//Data for Test Info 
	def accnTransactionType = "D"

	def pyr = payorDao.getPyrByxrefTyp(400) // Article 28 payor
	
	def testAbbrevProfile = testRunner.testCase.testSuite.project.getPropertyValue("profileTest")
	def testAbbrevSingle = testRunner.testCase.testSuite.project.getPropertyValue("singleTest")
	log.info "testAbbrevProfile = " + testAbbrevProfile
	log.info "testAbbrevSingle = " + testAbbrevSingle
	
	def testPlaceOfService = "ACME"
	def labMessagesCode = "SPLIT"
	
	//Data for  PscLocationId
	def existClnId = "34321"
	def AccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
	
	//Data for InsuranceInfo
	def existPyrInfoList = []
	existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)

	def payorAbbrev = pyr.getPyrAbbrv()
	
     def newSubsId = existPyrInfoList[1]
     def relshp = existPyrInfoList[2]
	
	//======== Set TestCase level property values ========
	//Set NewAccnID
	testRunner.testCase.setPropertyValue ("NewAccnID", newAccnId)
	log.info "NewAccnID = " + newAccnId
	
	testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
	log.info "NewDOS = " + currentDate
	
	//Set Cln
	testRunner.testCase.setPropertyValue ("ClnAbbrev", clnAbbrev)
	log.info "ClnAbbrev = " + clnAbbrev
	
	//Set Patient info
	testRunner.testCase.setPropertyValue ("PatientId", newPtEPI)
	log.info "PatientId = " + newPtEPI
	
	testRunner.testCase.setPropertyValue ("PatientType", patientType)
	log.info "PatientType = " + patientType
	
	testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
	log.info "NewPtFName = " + newPtFName
	
	testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
	log.info "NewPtLName = " + newPtLName
	
	testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
	log.info "NewPtDOB = " + newPtDOB
	
	testRunner.testCase.setPropertyValue ("AddressLine1", addressLine1)
	log.info "AddressLine1 = " + addressLine1
	
	testRunner.testCase.setPropertyValue ("AddressLine2", addressLine2)
	log.info "AddressLine2 = " + addressLine2
	
	//Set FinalReportedDate
	testRunner.testCase.setPropertyValue ("FinalReportedDate", currentDate)
	log.info "FinalReportedDate = " + currentDate
	
	//Set Physicians
	testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
	log.info "PhysNPI = " + physNPI
	
	//Set Test
	testRunner.testCase.setPropertyValue ("AccnTransactionType", accnTransactionType)
	log.info "AccnTransactionType = " + accnTransactionType
	
	testRunner.testCase.setPropertyValue ("testAbbrevProfile", testAbbrevProfile)
	log.info "testAbbrevProfile = " + testAbbrevProfile

	testRunner.testCase.setPropertyValue ("testAbbrevSingle", testAbbrevSingle)
	log.info "testAbbrevSingle = " + testAbbrevSingle
	
	testRunner.testCase.setPropertyValue ("TestPOS", testPlaceOfService)
	log.info "TestPOS = " + testPlaceOfService
	
	testRunner.testCase.setPropertyValue ("TestFRD", currentDate)
	log.info "TestFRD = " + currentDate
	
	testRunner.testCase.setPropertyValue ("TestMSGCode", labMessagesCode)
	log.info "TestMSGCode = " + labMessagesCode
	
	//Set DiagnosisCodes
	def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
	testRunner.testCase.setPropertyValue ("AccnDiagCD", "V72")
	
	//Set Location
	testRunner.testCase.setPropertyValue ("AccnPOS", AccnPOS)
	log.info "AccnPOS = " + AccnPOS
	
	//Set Insurance
	testRunner.testCase.setPropertyValue ("PayorAbbrev", payorAbbrev)
	log.info "PayorAbbrev = " + payorAbbrev
	
	testRunner.testCase.setPropertyValue ("NewSubsId", newSubsId)
	log.info "NewSubsId = " + newSubsId
	
	testRunner.testCase.setPropertyValue ("Relshp", relshp)
	log.info "Relshp = " + relshp</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession" id="2819694a-da1c-43aa-95e2-2e6293d680b6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#testAbbrevProfile}</acc:TestId>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>${#TestCase#TestMSGCode}</acc:Code>
                  </acc:LabMessages>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#TestFRD}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>   
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>true</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession-VerifyNewlyCreatedAccnInDB" id="aa68a7c0-1002-49b7-9bee-782e74608052"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "NewAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForBRSplitAccession failed"


    </script></con:config></con:testStep><con:testStep type="request" name="Step5:Accession WS-UpdateAccession-SplitAccession-UpdateAccessionForBRSplitAccession" id="67eb2035-5379-4c85-8222-909c47d5e820"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>UpdateAccession</con:operation><con:request name="Step5:Accession WS-UpdateAccession-SplitAccession-UpdateAccessionForBRSplitAccession" wssPasswordType="PasswordDigest" id="740bf9ec-64a6-429e-ba65-9e45e3356202"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:UpdateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:UpdateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
			   
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                   <acc:TestSequenceNumber>2</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#testAbbrevSingle}</acc:TestId>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <acc:Note>single ordered CRHPC seq 1</acc:Note>
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <acc:Units>1</acc:Units>
                  <acc:AuthorizationNumber>Single ordered test</acc:AuthorizationNumber>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>true</acc:CheckClientBillingRules>
            </acc:UpdateAccession>
         </acc:Payload>
      </acc:UpdateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="XPath Match" id="1bdae35f-233f-4b52-9734-c65eccc0b0bd" name="VerifyStatusCode"><con:configuration><path>declare namespace ns2='http://www.xifin.com/schema/msgHeader';
declare namespace ns3='http://www.xifin.com/schema/types';
declare namespace ns4='http://www.xifin.com/schema/accession';

//ns4:Payload[1]/ns4:Status[1]/ns3:StatusCode[1]/text()</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d4f32c5f-a59e-49eb-ab94-056c699c7ab6" name="VerifyStatusMessage"><con:configuration><path>declare namespace ns2='http://www.xifin.com/schema/msgHeader';
declare namespace ns3='http://www.xifin.com/schema/types';
declare namespace ns4='http://www.xifin.com/schema/accession';

//ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CREAT</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>1614510620</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MDNC</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A932472063</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEDCGIK</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEWBPKO</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1993-06-12</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-06-12</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230612130545777</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>EYF4HHMVP3QT0EJ</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>EPI20230612130545777</con:value></con:property><con:property><con:name>PatientType</con:name><con:value>Inpatient</con:value></con:property><con:property><con:name>AddressLine1</con:name><con:value>PTADDR1QATESTER20230612130545777</con:value></con:property><con:property><con:name>AddressLine2</con:name><con:value>PTADDR1QATESTER20230612130545777</con:value></con:property><con:property><con:name>FinalReportedDate</con:name><con:value>2023-06-12</con:value></con:property><con:property><con:name>AccnTransactionType</con:name><con:value>D</con:value></con:property><con:property><con:name>TestFRD</con:name><con:value>2023-06-12</con:value></con:property><con:property><con:name>TestMSGCode</con:name><con:value>SPLIT</con:value></con:property><con:property><con:name>AccnDiagCD</con:name><con:value>V72</con:value></con:property><con:property><con:name>testAbbrevProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>testAbbrevSingle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession" searchProperties="true" id="48ee548e-f1da-46ab-9204-96b4cbdb0c44"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-TestDataSetup" id="c9240aab-f12e-474d-9bd2-2fb8dcf308ab"><con:settings/><con:config><script>import com.xifin.utils.*;
import com.xifin.accnws.dao.*;
import com.xifin.qa.config.*;
import com.xifin.mars.dao.*;
import com.xifin.qa.config.*;
import com.xifin.qa.dao.rpm.*;
import static java.util.Calendar.*

//======== Get values ========
System.setProperty("soapui.log4j.config","/src/test/resources/log4j.xml");
def dbEnv = testRunner.testCase.testSuite.project.getPropertyValue("dbEnv")
def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")

log.info "orgAlias=" + orgAlias
Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
timeStamp = new TimeStamp()
randomCharacter = new RandomCharacter()
daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
testDao = new TestDaoImpl(configuration.getRpmDatabase())
accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
facDao = new FacilityDaoImpl(configuration.getRpmDatabase())
procedureCodeDao = new ProcedureCodeDaoImpl(configuration.getRpmDatabase())
    
//Get Diagnosis Code
def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
//set DiagCD TestCase-level value
testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
log.info "DiagCD = " + diagCd

//Get ClientId value which has cln bill ref lab
def cln = clientDao.getClnHasClnBillRefLab().get(0)
def clnAbbrev = cln.getClnAbbrev();
log.info "clnAbbrev = " + clnAbbrev

//Get timeStamp value
def currentDateTime = timeStamp.getTimeStamp()

//Get currentdate value
def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

//Generate random ptEPI
def newPtEPI = "EPI" + currentDateTime
log.info "newPtEPI = " + newPtEPI

//Generate random ptFName, ptLName
def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
log.info "newPtFName = " + newPtFName
log.info "newPtLName = " + newPtLName

//Get existing primary pyr abbrev and subsId and relationship abbrev

def pyr = payorDao.getPyrHasPyrGrpNotInClnAndPt()
testRunner.testCase.setPropertyValue("payorId", pyr.getPyrId().toString())
def subsId = randomCharacter.getRandomAlphaNumericString(10)
def relshpAbbrev = "child"
log.info "pyrAbbrev = " + pyr.getPyrAbbrv()
log.info "subsId = " + subsId
log.info "relshpAbbrev = " + relshpAbbrev

def testAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("testCodeID")

//def testFac = testDao.getListTestIdHasReferLabAndSingleTest().get(0);
//def testAbbrev = testDao.getTestByTestId(testFac.getTestId()).getTestAbbrev();
//def testAbbrev = "ABC3"
log.info "testAbbrev = " + testAbbrev

//Get Test POS
//def facAbbrev = facDao.getFacByFacId(testFac.getFacId()).getAbbrv();
//def facAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("TestPOS")
def facAbbrev = "ACME"
log.info "existTestPOS = " + facAbbrev

//Get Ordering Physician NPI
def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
log.info "existPhysNPI = " + existPhysNPI

//def newPtDOB = "1975-09-10"
//generate new pt DOB
def nowCal = Calendar.instance
def y = nowCal.get(YEAR) - 30
def m = nowCal.get(MONTH)
def d = nowCal.get(DATE)
nowCal.set(y, m, d)
newPtDOB = String.format('%tF', nowCal)
testRunner.testCase.setPropertyValue("NewPtDOB", newPtDOB)
log.info "NewPtDOB = " + newPtDOB

//======== Set TestCase level property values ========
//Set NewAccnID TestCase-level value
testRunner.testCase.setPropertyValue("NewAccnID", "QATESTER" + currentDateTime)
log.info "NewAccnID = " + "QATESTER" + currentDateTime

//Set new DOS TestCase-level value
testRunner.testCase.setPropertyValue("NewDOS", currentDate)
log.info "NewDOS = " + currentDate

//Set ClientId TestCase-level value
testRunner.testCase.setPropertyValue("ClnAbbrev", clnAbbrev)
log.info "ClnAbbrev = " + clnAbbrev

//Set EPI TestCase-level value
testRunner.testCase.setPropertyValue("NewEPI", newPtEPI)
log.info "NewEPI = " + newPtEPI

//Set NewPtFName and NewPtLName TestCase-level values
testRunner.testCase.setPropertyValue("NewPtFName", newPtFName)
log.info "NewPtFName = " + newPtFName
testRunner.testCase.setPropertyValue("NewPtLName", newPtLName)
log.info "NewPtLName = " + newPtLName

//Set NewSubsId TestCase-level value
testRunner.testCase.setPropertyValue("NewSubsId", subsId)
log.info "NewSubsId = " + subsId

//Set PhysNPI TestCase-level value
testRunner.testCase.setPropertyValue("PhysNPI", existPhysNPI)
log.info "PhysNPI = " + existPhysNPI

//Set TestAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("TestAbbrev", testAbbrev)
log.info "TestAbbrev = " + testAbbrev

//set test POS TestCase-level value
testRunner.testCase.setPropertyValue("TestPOS", facAbbrev)
log.info "TestPOS = " + facAbbrev

//set PayorAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("PayorAbbrev", pyr.getPyrAbbrv())
log.info "PayorAbbrev = " + pyr.getPyrAbbrv()

//set RelshpType TestCase-level value
testRunner.testCase.setPropertyValue("Relshp", relshpAbbrev)
log.info "Relshp = " + relshpAbbrev
</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession" id="cf2a1940-51e0-4538-b3d5-5411132b7695"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
                  	<acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               <!--Optional:-->
               <!--Zero or more repetitions:-->
               </acc:AccessionLevelDiagnosisCodes>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>other</acc:InsuredRelationship>
		        <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>M</typ:MiddleName>
                  </acc:InsuredName>
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>ADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>ADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>NEW YORK</typ:City>
                     <!--Optional:-->
                     <typ:State>NY</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>10013</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>US</typ:CountryCode>
                  </acc:Address>
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB" id="32a9e6b7-7173-463b-9704-fae374bf1c06"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "newAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession-VerifyNewlyCreatedAccnInDB failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>NewPtDOB</con:name><con:value>1993-05-30</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230530151038185</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-05-30</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>DW9</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20230530151038185</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEIKZZF</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEAOEEB</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>LPKQ823E06</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>5428037357</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>152</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>LABCORP</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCTX</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>child</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession" searchProperties="true" id="39d01d79-ad90-4027-8235-cb5357a8bd91"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-TestDataSetup" id="a7e3f8c4-fc35-488d-8ff8-7e5a962e9c28"><con:settings/><con:config><script>import com.xifin.utils.*;
import com.xifin.accnws.dao.*;
import com.xifin.qa.config.*;
import com.xifin.mars.dao.*;
import com.xifin.qa.config.*;
import com.xifin.qa.dao.rpm.*;
import static java.util.Calendar.*

//======== Get values ========
System.setProperty("soapui.log4j.config","/src/test/resources/log4j.xml");
def dbEnv = testRunner.testCase.testSuite.project.getPropertyValue("dbEnv")
def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
log.info "orgAlias=" + orgAlias
Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
timeStamp = new TimeStamp()
randomCharacter = new RandomCharacter()
daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
testDao = new TestDaoImpl(configuration.getRpmDatabase())
accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
facDao = new FacilityDaoImpl(configuration.getRpmDatabase())
physicianDao = new PhysicianDaoImpl(configuration.getRpmDatabase())

//Get ClientId value which has cln bill ref lab
//def clnAbbrev = clientDao.getClnHasHospitalClnTyp().get(0).getClnAbbrev();
//def clnAbbrev = 'CLNAUTO49133810'
def clnAbbrev = '1234'
log.info "clnAbbrev = " + clnAbbrev

//Get timeStamp value
def currentDateTime = timeStamp.getTimeStamp()

//Get currentdate value
def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

//Generate random ptEPI
def newPtEPI = "EPI" + currentDateTime
log.info "newPtEPI = " + newPtEPI

//Generate random ptFName, ptLName
def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
log.info "newPtFName = " + newPtFName
log.info "newPtLName = " + newPtLName

//Get existing primary pyr abbrev and subsId and relationship abbrev

def pyrAbbrev = payorDao.getPyrFlaggedToBilClnHospitalPtDiag().getPyrAbbrv();
def subsId = randomCharacter.getRandomAlphaNumericString(10)
def relshpAbbrev = "other"
log.info "pyrAbbrev = " + pyrAbbrev
log.info "subsId = " + subsId
log.info "relshpAbbrev = " + relshpAbbrev

def testAbbrev = testDao.getTestHasDiagnosticLabAndNotProfessionalProcCd().get(0).getTestAbbrev();
log.info "testAbbrev = " + testAbbrev

//Get Test POS
def facAbbrev = "ACME"
log.info "existTestPOS = " + facAbbrev

//Get Ordering Physician NPI
//def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
def existPhysNPI = physicianDao.getPhysByNpiAndUpinIsNotNullAndNotInPhysStateLic().getNpiId().toString()
log.info "existPhysNPI = " + existPhysNPI

//def newPtDOB = "1975-09-10"
//generate new pt DOB
def nowCal = Calendar.instance
def y = nowCal.get(YEAR) - 30
def m = nowCal.get(MONTH)
def d = nowCal.get(DATE)
nowCal.set(y, m, d)
newPtDOB = String.format('%tF', nowCal)
testRunner.testCase.setPropertyValue("NewPtDOB", newPtDOB)
log.info "NewPtDOB = " + newPtDOB

//======== Set TestCase level property values ========
//Set NewAccnID TestCase-level value
testRunner.testCase.setPropertyValue("NewAccnID", "QATESTER" + currentDateTime)
log.info "NewAccnID = " + "QATESTER" + currentDateTime

//Set new DOS TestCase-level value
testRunner.testCase.setPropertyValue("NewDOS", currentDate)
log.info "NewDOS = " + currentDate

//Set ClientId TestCase-level value
testRunner.testCase.setPropertyValue("ClnAbbrev", clnAbbrev)
log.info "ClnAbbrev = " + clnAbbrev

//Set EPI TestCase-level value
testRunner.testCase.setPropertyValue("NewEPI", newPtEPI)
log.info "NewEPI = " + newPtEPI

//Set NewPtFName and NewPtLName TestCase-level values
testRunner.testCase.setPropertyValue("NewPtFName", newPtFName)
log.info "NewPtFName = " + newPtFName
testRunner.testCase.setPropertyValue("NewPtLName", newPtLName)
log.info "NewPtLName = " + newPtLName

//Set NewSubsId TestCase-level value
testRunner.testCase.setPropertyValue("NewSubsId", subsId)
log.info "NewSubsId = " + subsId

//Set PhysNPI TestCase-level value
testRunner.testCase.setPropertyValue("PhysNPI", existPhysNPI)
log.info "PhysNPI = " + existPhysNPI

//Set TestAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("TestAbbrev", testAbbrev)
log.info "TestAbbrev = " + testAbbrev

//set test POS TestCase-level value
testRunner.testCase.setPropertyValue("TestPOS", facAbbrev)
log.info "TestPOS = " + facAbbrev

//set PayorAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("PayorAbbrev", pyrAbbrev)
log.info "PayorAbbrev = " + pyrAbbrev

//set RelshpType TestCase-level value
//def relshpAbbrev1 = "other"
testRunner.testCase.setPropertyValue("Relshp", relshpAbbrev)
log.info "Relshp = " + relshpAbbrev</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession" id="a7670370-fa9c-49fd-b536-7c6d1255ad4a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>Inpatient</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>V72</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
		        <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>M</typ:MiddleName>
                  </acc:InsuredName>
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>ADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>ADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>NEW YORK</typ:City>
                     <!--Optional:-->
                     <typ:State>NY</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>10013</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>US</typ:CountryCode>
                  </acc:Address>
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB" id="79f33b55-a134-4317-82d5-306b329cc8bd"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "newAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
//        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
//        log.info ("ptFNameInDB = " + ptFNameInDB)
//        //Get Pt's fName from TestCase level property - NewPtFName
//        def newPtFName = context.expand('${#TestCase#NewPtFName}')
//
//        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
//        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
//        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB failed"
//
//        //======== Verify pt's lName by accn id ========
//        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
//        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
//        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
//        log.info ("ptLNameInDB = " + ptLNameInDB)
//        //Get Pt's lName from TestCase level property - NewPtLName
//        def newPtLName = context.expand('${#TestCase#NewPtLName}')
//
//        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
//        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
//        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB failed"
//
//        //======== Verify pt's DOB and accn's DOS by accn id ========
//        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
//        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
//        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
//        log.info ("ptDOBInDB = " + ptDOBInDB)
//        //Get Pt's DOB from TestCase level property - NewPtDOB
//        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
//        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
//        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
//        log.info ("dosInDB = " + dosInDB)
//        //Get accn's DOS from TestCase level property - NewDOS
//        def dos = context.expand('${#TestCase#NewDOS}')
//
//        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
//        //Expected Result: ptDOBInDB == #TestCase#NewDOS
//        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB failed"
//
//        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
//        //Expected Result: dosInDB == #TestCase#NewDOS
//        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXCSplitAccession-VerifyNewlyCreatedAccnInDB failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>NewPtDOB</con:name><con:value>1993-05-30</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER2023053016035879</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-05-30</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI2023053016035879</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEMKDYW</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPOSHA</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>4U96A3DA1U</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>9658478554</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>TAX</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCNC</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>child</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession" searchProperties="true" id="3802be32-b549-41a5-9243-cc9067b7ef3b"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession-TestDataSetup" id="3c7e02d3-5456-4cea-aec4-3dd5da4745da"><con:settings/><con:config><script>	import com.xifin.utils.*;
	import com.xifin.accnws.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.mars.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.qa.dao.rpm.*;
	import static java.util.Calendar.*
	
	//======== Get Configuration ========
	def dbEnv = null
	def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
	log.info "orgAlias="+orgAlias
	
	Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

	//Load Daos
	accnDao = new AccessionDaoImpl(configuration.getRpmDatabase())
	clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
	testDao = new TestDaoImpl(configuration.getRpmDatabase())
	daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
	daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
	facilityDao = new FacilityDaoImpl(configuration.getRpmDatabase())
	timeStamp = new TimeStamp()
	randomCharacter = new RandomCharacter()
	
	//Get timeStamp value
	def currentDateTime = timeStamp.getTimeStamp()
	
	//Get currentdate value
	def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")
	
	//generate new pt DOB
	def nowCal = Calendar.instance
	def y  = nowCal.get(YEAR)-30
	def m  = nowCal.get(MONTH)
	def d = nowCal.get(DATE)
	nowCal.set(y,m,d)
	
	//======== Get values ========

	def existAccnIdClnIdList = []
     existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
     def existAccnId = existAccnIdClnIdList[0]
	
	// Data for new Accn info
	def newAccnId = "QATESTER" + currentDateTime
	
	//Data for Client Info
	def cln = clientDao.getClnHaveBilStaIdInSystemStateSetting().get(0);
	
	def clnAbbrev = cln.getClnAbbrev();
	log.info "clnAbbrev="+clnAbbrev
	
	//Data for Patient Info
	def patientId = "EPI" + currentDateTime
	def patientType = "Non-patient"
	def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtDOB = String.format('%tF', nowCal)
	def addressLine1 = "PTADDR1" + newAccnId
	def addressLine2 = "PTADDR1" + newAccnId
	
	//Data for Physicians
	def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
	
	//Data for Test Info 
	def accnTransactionType = "D"
	def testAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("testCodeID")
	log.info "testAbbrev = " + testAbbrev
//	def testPlaceOfService = facilityDao.getFacsByFacTypId(5).get(0).getAbbrv();
	def testPlaceOfService = 'ACME'
	def labMessagesCode = "SPLIT"
	
	//Data for  PscLocationId
	def existClnId = "34321"
	def AccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
	
	//Data for InsuranceInfo
	def existPyrInfoList = []
	existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)

	def payorAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("3", dbEnv);//existPyrInfoList[0]
     def newSubsId = existPyrInfoList[1]
     def relshp = existPyrInfoList[2]
	
	//======== Set TestCase level property values ========
	//Set NewAccnID
	testRunner.testCase.setPropertyValue ("NewAccnID", newAccnId)
	log.info "NewAccnID = " + newAccnId
	
	testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
	log.info "NewDOS = " + currentDate
	
	//Set Cln
	testRunner.testCase.setPropertyValue ("ClnAbbrev", clnAbbrev)
	log.info "ClnAbbrev = " + clnAbbrev
	
	//Set Patient info
	testRunner.testCase.setPropertyValue ("PatientId", patientId)
	log.info "PatientId = " + patientId
	
	testRunner.testCase.setPropertyValue ("PatientType", patientType)
	log.info "PatientType = " + patientType
	
	testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
	log.info "NewPtFName = " + newPtFName
	
	testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
	log.info "NewPtLName = " + newPtLName
	
	testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
	log.info "NewPtDOB = " + newPtDOB
	
	testRunner.testCase.setPropertyValue ("AddressLine1", addressLine1)
	log.info "AddressLine1 = " + addressLine1
	
	testRunner.testCase.setPropertyValue ("AddressLine2", addressLine2)
	log.info "AddressLine2 = " + addressLine2
	
	//Set FinalReportedDate
	testRunner.testCase.setPropertyValue ("FinalReportedDate", currentDate)
	log.info "FinalReportedDate = " + currentDate
	
	//Set Physicians
	testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
	log.info "PhysNPI = " + physNPI
	
	//Set Test
	testRunner.testCase.setPropertyValue ("AccnTransactionType", accnTransactionType)
	log.info "AccnTransactionType = " + accnTransactionType
	
	testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
	log.info "TestAbbrev = " + testAbbrev
	
	testRunner.testCase.setPropertyValue ("TestPOS", testPlaceOfService)
	log.info "TestPOS = " + testPlaceOfService
	
	testRunner.testCase.setPropertyValue ("TestFRD", currentDate)
	log.info "TestFRD = " + currentDate
	
	testRunner.testCase.setPropertyValue ("TestMSGCode", labMessagesCode)
	log.info "TestMSGCode = " + labMessagesCode
	
	//Set DiagnosisCodes
	def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
	testRunner.testCase.setPropertyValue ("AccnDiagCD", "V72")
	
	//Set Location
	testRunner.testCase.setPropertyValue ("AccnPOS", AccnPOS)
	log.info "AccnPOS = " + AccnPOS
	
	//Set Insurance
	testRunner.testCase.setPropertyValue ("PayorAbbrev", payorAbbrev)
	log.info "PayorAbbrev = " + payorAbbrev
	
	testRunner.testCase.setPropertyValue ("NewSubsId", newSubsId)
	log.info "NewSubsId = " + newSubsId
	
	testRunner.testCase.setPropertyValue ("Relshp", relshp)
	log.info "Relshp = " + relshp</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession" id="8626232a-b615-452d-bb66-913dd913ed48"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
			   
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>${#TestCase#TestMSGCode}</acc:Code>
                  </acc:LabMessages>

                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#TestFRD}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession-VerifyNewlyCreatedAccnInDB" id="4708906e-ee19-4d0b-8ed8-484669e9ae1e"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "NewAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDBSplitAccession failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>4701586511</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>C</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A932472063</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEXDVEM</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEEUMRX</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1993-05-31</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-05-31</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230531134054823</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>DW4</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>EPI20230531134054823</con:value></con:property><con:property><con:name>PatientType</con:name><con:value>Non-patient</con:value></con:property><con:property><con:name>AddressLine1</con:name><con:value>PTADDR1QATESTER20230531134054823</con:value></con:property><con:property><con:name>AddressLine2</con:name><con:value>PTADDR1QATESTER20230531134054823</con:value></con:property><con:property><con:name>FinalReportedDate</con:name><con:value>2023-05-31</con:value></con:property><con:property><con:name>AccnTransactionType</con:name><con:value>D</con:value></con:property><con:property><con:name>TestFRD</con:name><con:value>2023-05-31</con:value></con:property><con:property><con:name>TestMSGCode</con:name><con:value>SPLIT</con:value></con:property><con:property><con:name>AccnDiagCD</con:name><con:value>V72</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession" searchProperties="true" id="311ba476-82b4-4cbc-b845-9ebafd2a6b1e"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession-TestDataSetup" id="3e2a68f3-a323-41ab-a9f6-6ce66f5142a2"><con:settings/><con:config><script>	import com.xifin.utils.*;
	import com.xifin.accnws.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.mars.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.qa.dao.rpm.*;
	import static java.util.Calendar.*
	
	//======== Get Configuration ========
	def dbEnv = null
	def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
	log.info "orgAlias="+orgAlias
	
	Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

	//Load Daos
	accnDao = new AccessionDaoImpl(configuration.getRpmDatabase())
	clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
	testDao = new TestDaoImpl(configuration.getRpmDatabase())
	patientDao = new PatientDaoImpl(configuration.getRpmDatabase())
	payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
	daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
	daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
	
	timeStamp = new TimeStamp()
	randomCharacter = new RandomCharacter()
	
	//Get timeStamp value
	def currentDateTime = timeStamp.getTimeStamp()
	
	//Get currentdate value
	def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")
	
	//generate new pt DOB
	def nowCal = Calendar.instance
	def y  = nowCal.get(YEAR)-30
	def m  = nowCal.get(MONTH)
	def d = nowCal.get(DATE)
	nowCal.set(y,m,d)
	
	//======== Get values ========

	def existAccnIdClnIdList = []
     existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
     def existAccnId = existAccnIdClnIdList[0]
	
	// Data for new Accn info
	def newAccnId = "QATESTER" + currentDateTime
	
	//Data for Client Info
	def cln = clientDao.getClnHasDialysisTyp()
	
	def clnAbbrev = cln.getClnAbbrev();
	log.info "clnAbbrevhhhhh="+clnAbbrev


	def patient = patientDao.getPtHasDialysisTyp();
	//Data for Patient Info
	def patientId = patient.getEpi()
	def patientType = "Non-patient"
	def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtDOB = String.format('%tF', nowCal)
	def addressLine1 = "PTADDR1" + newAccnId
	def addressLine2 = "PTADDR1" + newAccnId
	
	//Data for Physicians
	def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
	
	//Data for Test Info 
	def accnTransactionType = "D"

	def pyrDialFreqControl = payorDao.getPyrDialFreqControlForXDSplitAccnTyp();
	
	def pyrId = pyrDialFreqControl.getPyrId()
	log.info "pyrId = " + pyrId
	def dialFreqControlId = pyrDialFreqControl.getDialFreqControlId()
	log.info "dialFreqControlId = " + dialFreqControlId
	
	
	def testHasProcCdsInDialFreqctrl = testDao.getTestHasProcCdsInDialFreqControlProc(dialFreqControlId)

	def testAbbrev = testHasProcCdsInDialFreqctrl.getTestAbbrev()
	log.info "testAbbrev = " + testAbbrev
	def testPlaceOfService = "ACME"
	def labMessagesCode = "SPLIT"
	
	//Data for  PscLocationId
	def existClnId = "34321"
	def AccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
	
	//Data for InsuranceInfo
	def existPyrInfoList = []
	existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)

	def pyr = payorDao.getPyrByPyrId(pyrId)
	def payorAbbrev = pyr.getPyrAbbrv()
	
     def newSubsId = existPyrInfoList[1]
     def relshp = existPyrInfoList[2]
	
	//======== Set TestCase level property values ========
	//Set NewAccnID
	testRunner.testCase.setPropertyValue ("NewAccnID", newAccnId)
	log.info "NewAccnID = " + newAccnId
	
	testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
	log.info "NewDOS = " + currentDate
	
	//Set Cln
	testRunner.testCase.setPropertyValue ("ClnAbbrev", clnAbbrev)
	log.info "ClnAbbrev = " + clnAbbrev
	
	//Set Patient info
	testRunner.testCase.setPropertyValue ("PatientId", patientId)
	log.info "PatientId = " + patientId
	
	testRunner.testCase.setPropertyValue ("PatientType", patientType)
	log.info "PatientType = " + patientType
	
	testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
	log.info "NewPtFName = " + newPtFName
	
	testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
	log.info "NewPtLName = " + newPtLName
	
	testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
	log.info "NewPtDOB = " + newPtDOB
	
	testRunner.testCase.setPropertyValue ("AddressLine1", addressLine1)
	log.info "AddressLine1 = " + addressLine1
	
	testRunner.testCase.setPropertyValue ("AddressLine2", addressLine2)
	log.info "AddressLine2 = " + addressLine2
	
	//Set FinalReportedDate
	testRunner.testCase.setPropertyValue ("FinalReportedDate", currentDate)
	log.info "FinalReportedDate = " + currentDate
	
	//Set Physicians
	testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
	log.info "PhysNPI = " + physNPI
	
	//Set Test
	testRunner.testCase.setPropertyValue ("AccnTransactionType", accnTransactionType)
	log.info "AccnTransactionType = " + accnTransactionType
	
	testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
	log.info "TestAbbrev = " + testAbbrev
	
	testRunner.testCase.setPropertyValue ("TestPOS", testPlaceOfService)
	log.info "TestPOS = " + testPlaceOfService
	
	testRunner.testCase.setPropertyValue ("TestFRD", currentDate)
	log.info "TestFRD = " + currentDate
	
	testRunner.testCase.setPropertyValue ("TestMSGCode", labMessagesCode)
	log.info "TestMSGCode = " + labMessagesCode
	
	//Set DiagnosisCodes
	def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
	testRunner.testCase.setPropertyValue ("AccnDiagCD", "V72")
	
	//Set Location
	testRunner.testCase.setPropertyValue ("AccnPOS", AccnPOS)
	log.info "AccnPOS = " + AccnPOS
	
	//Set Insurance
	testRunner.testCase.setPropertyValue ("PayorAbbrev", payorAbbrev)
	log.info "PayorAbbrev = " + payorAbbrev
	
	testRunner.testCase.setPropertyValue ("NewSubsId", newSubsId)
	log.info "NewSubsId = " + newSubsId
	
	testRunner.testCase.setPropertyValue ("Relshp", relshp)
	log.info "Relshp = " + relshp</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession" id="91238c86-08cf-4898-9b00-4ce285fa6152"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
			   
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>${#TestCase#TestMSGCode}</acc:Code>
                  </acc:LabMessages>

                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#TestFRD}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession-VerifyNewlyCreatedAccnInDB" id="718356d8-8411-434e-87a3-a2aaa073b27d"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "NewAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        //assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        //assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        //assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        //assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        //assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CREAT</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>7172335102</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MDTX</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A932472063</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPBWHG</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEJTPWR</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1993-06-06</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-06-06</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230606151514606</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>DW4</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>NLS4</con:value></con:property><con:property><con:name>PatientType</con:name><con:value>Non-patient</con:value></con:property><con:property><con:name>AddressLine1</con:name><con:value>PTADDR1QATESTER20230606151514606</con:value></con:property><con:property><con:name>AddressLine2</con:name><con:value>PTADDR1QATESTER20230606151514606</con:value></con:property><con:property><con:name>FinalReportedDate</con:name><con:value>2023-06-06</con:value></con:property><con:property><con:name>AccnTransactionType</con:name><con:value>D</con:value></con:property><con:property><con:name>TestFRD</con:name><con:value>2023-06-06</con:value></con:property><con:property><con:name>TestMSGCode</con:name><con:value>SPLIT</con:value></con:property><con:property><con:name>AccnDiagCD</con:name><con:value>V72</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession" searchProperties="true" id="cb7d3651-07e1-4699-85ad-252413e1c9bb"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-TestDataSetup" id="7c8ed7fa-30b6-4ade-83bc-30b08296ea40"><con:settings/><con:config><script>import com.xifin.utils.*;
import com.xifin.accnws.dao.*;
import com.xifin.qa.config.*;
import com.xifin.mars.dao.*;
import com.xifin.qa.config.*;
import com.xifin.qa.dao.rpm.*;
import static java.util.Calendar.*

//======== Get values ========
System.setProperty("soapui.log4j.config","/src/test/resources/log4j.xml");
def dbEnv = testRunner.testCase.testSuite.project.getPropertyValue("dbEnv")
def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
log.info "orgAlias=" + orgAlias
Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
timeStamp = new TimeStamp()
randomCharacter = new RandomCharacter()
daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
testDao = new TestDaoImpl(configuration.getRpmDatabase())
accessionDao = new AccessionDaoImpl(configuration.getRpmDatabase())
facDao = new FacilityDaoImpl(configuration.getRpmDatabase())

//Get ClientId value which has cln bill ref lab
def existClnAbbrev = clientDao.getClnHasNonFDATyp().get(0).getClnAbbrev();
//def existClnAbbrev = '250';
log.info "clnAbbrev = " + existClnAbbrev

//Get timeStamp value
def currentDateTime = timeStamp.getTimeStamp()

//Get currentdate value
def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

//Generate random ptEPI
def newPtEPI = "EPI" + currentDateTime
log.info "newPtEPI = " + newPtEPI

//Generate random ptFName, ptLName
def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
log.info "newPtFName = " + newPtFName
log.info "newPtLName = " + newPtLName

//Get existing primary pyr abbrev and subsId and relationship abbrev
def existPyrAbbrev = payorDao.getPyrHasPyrGrpNotInClnAndPtAndNonFDA().getPyrAbbrv();

//generate new pt DOB
def nowCal = Calendar.instance
def y = nowCal.get(YEAR) - 30
def m = nowCal.get(MONTH)
def d = nowCal.get(DATE)
nowCal.set(y, m, d)
newPtDOB = String.format('%tF', nowCal)
testRunner.testCase.setPropertyValue("NewPtDOB", newPtDOB)
log.info "NewPtDOB = " + newPtDOB

//Get an existing Priced 3rd payor accnId and clnId
    def existAccnIdClnIdList = []
    existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
    def existAccnId = existAccnIdClnIdList[0]
    //def existAccnId = "2013023822"
    log.info "existAccnId = " + existAccnId

    //Get existing cln id
    def existClnId = existAccnIdClnIdList[1]
  
    //Get existing primary pyr abbrev and subsId and relationship abbrev
    def existPyrInfoList = []
    existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)
//    def existPyrAbbrev = daoManagerXifinRpm.getPyrAbbrevFromPYRByPyrId("4", dbEnv);//existPyrInfoList[0]
    def existSubsId = existPyrInfoList[1]
    def existRelshpAbbrev = existPyrInfoList[2]
    log.info "existPyrAbbrev = " + existPyrAbbrev
    log.info "existSubsId = " + existSubsId
    log.info "existRelshpAbbrev = " + existRelshpAbbrev

    //Get Ordering Physician NPI
    def existPhysNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "existPhysNPI = " + existPhysNPI

    //Get Ordered Test Abbrev
    def testInfoList = []
    testInfoList = daoManagerAccnWS.getTestIdFacIdFromAccnTestByAccnId(existAccnId, dbEnv)
    def existTestId = testInfoList[0]
    def existTestAbbrev = testDao.getTestHasNonFDATyp().get(0).getTestAbbrev()
//	def existTestAbbrev = "BS"
    log.info "existTestAbbrev = " + existTestAbbrev

    //Get test POS from the component in case of profile
    def existTestFacId = testInfoList[1]
    log.info "existTestFacId = " + existTestFacId
    if (	existTestFacId == "0" ) {
    existTestFacId = daoManagerAccnWS.getFacIdFromACCNTESTByAccnIdProfId(existAccnId, existTestId, dbEnv)
    }
    //Get Test POS
//    def existTestPOS = daoManagerAccnWS.getFacAbbrevFromFACByFacId(existTestFacId, dbEnv)

	def existTestPOS = "ACME"
    log.info "existTestPOS = " + existTestPOS

    //Get Accn POS
    def existAccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
    log.info "existAccnPOS = " + existAccnPOS

   
//======== Set TestCase level property values ========
//Set NewAccnID TestCase-level value
testRunner.testCase.setPropertyValue("NewAccnID", "QATESTER" + currentDateTime)
log.info "NewAccnID = " + "QATESTER" + currentDateTime

//Set new DOS TestCase-level value
testRunner.testCase.setPropertyValue("NewDOS", currentDate)
log.info "NewDOS = " + currentDate

//Set ClientId TestCase-level value
testRunner.testCase.setPropertyValue("ClnAbbrev", existClnAbbrev)
log.info "ClnAbbrev = " + existClnAbbrev

//Set EPI TestCase-level value
testRunner.testCase.setPropertyValue("NewEPI", newPtEPI)
log.info "NewEPI = " + newPtEPI

//Set NewPtFName and NewPtLName TestCase-level values
testRunner.testCase.setPropertyValue("NewPtFName", newPtFName)
log.info "NewPtFName = " + newPtFName
testRunner.testCase.setPropertyValue("NewPtLName", newPtLName)
log.info "NewPtLName = " + newPtLName

//Set NewSubsId TestCase-level value
testRunner.testCase.setPropertyValue("NewSubsId", existSubsId)
log.info "NewSubsId = " + existSubsId

//Set PhysNPI TestCase-level value
testRunner.testCase.setPropertyValue("PhysNPI", existPhysNPI)
log.info "PhysNPI = " + existPhysNPI

//Set TestAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("TestAbbrev", existTestAbbrev)
log.info "TestAbbrev = " + existTestAbbrev

//set test POS TestCase-level value
testRunner.testCase.setPropertyValue("TestPOS", existTestPOS)
log.info "TestPOS = " + existTestPOS

//set PayorAbbrev TestCase-level value
testRunner.testCase.setPropertyValue("PayorAbbrev", existPyrAbbrev)
log.info "PayorAbbrev = " + existPyrAbbrev

//set RelshpType TestCase-level value
testRunner.testCase.setPropertyValue("Relshp", "self")
log.info "Relshp = " + "self"</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession" id="00707fc8-886d-403f-b30c-74cd1f65d80d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>V72</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
		        <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                     <!--Optional:-->
                     <typ:MiddleName>M</typ:MiddleName>
                  </acc:InsuredName>
                  <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>ADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>ADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:City>NEW YORK</typ:City>
                     <!--Optional:-->
                     <typ:State>NY</typ:State>
                     <!--Optional:-->
                     <typ:ZIP>10013</typ:ZIP>
                     <!--Optional:-->
                     <typ:CountryCode>US</typ:CountryCode>
                  </acc:Address>
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB" id="6b784b82-b90f-461d-a01b-866bd56c1297"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "newAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXFSplitAccession-VerifyNewlyCreatedAccnInDB failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>NewPtDOB</con:name><con:value>1993-06-01</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230601155222233</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-06-01</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>DW4</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20230601155222233</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEUWESS</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEJPOYA</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>W5JZMXF1YO</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>2671082297</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value>GLUCOSE</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCWA</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>child</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession" searchProperties="true" id="e9b592fb-58ce-4626-ac8f-423289704789"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession-TestDataSetup" id="2dd90d74-b5fa-4773-a46c-20707eefc1e0"><con:settings/><con:config><script>	import com.xifin.utils.*;
	import com.xifin.accnws.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.mars.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.qa.dao.rpm.*;
	import static java.util.Calendar.*
	
	//======== Get Configuration ========
	def dbEnv = null
	def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
	log.info "orgAlias="+orgAlias
	
	Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

	//Load Daos
	accnDao = new AccessionDaoImpl(configuration.getRpmDatabase())
	clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
	testDao = new TestDaoImpl(configuration.getRpmDatabase())
	patientDao = new PatientDaoImpl(configuration.getRpmDatabase())
	payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
	daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
	daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
	
	timeStamp = new TimeStamp()
	randomCharacter = new RandomCharacter()
	
	//Get timeStamp value
	def currentDateTime = timeStamp.getTimeStamp()
	
	//Get currentdate value
	def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")
	
	//generate new pt DOB
	def nowCal = Calendar.instance
	def y  = nowCal.get(YEAR)-30
	def m  = nowCal.get(MONTH)
	def d = nowCal.get(DATE)
	nowCal.set(y,m,d)
	
	//======== Get values ========

	def existAccnIdClnIdList = []
     existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
     def existAccnId = existAccnIdClnIdList[0]
	
	// Data for new Accn info
	def newAccnId = "QATESTER" + currentDateTime
	
	//Data for Client Info
	//def cln = clientDao.getClnHasDialysisTyp()
	def cln = clientDao.getClnHasHospitalClnTypAndArrOnFileSvcNo().get(0)
	
	def clnAbbrev = cln.getClnAbbrev();
	log.info "clnAbbrevhhhhh="+clnAbbrev

	def newPtEPI = "EPI" + currentDateTime

	def patientType = "Inpatient"
	def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtDOB = String.format('%tF', nowCal)
	def addressLine1 = "PTADDR1" + newAccnId
	def addressLine2 = "PTADDR1" + newAccnId
	
	//Data for Physicians
	def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
	
	//Data for Test Info 
	def accnTransactionType = "D"

	def pyrDialFreqControl = payorDao.getPyrDialFreqControlForXDSplitAccnTyp();
	
	def pyrId = pyrDialFreqControl.getPyrId()
	log.info "pyrId = " + pyrId
	def dialFreqControlId = pyrDialFreqControl.getDialFreqControlId()
	log.info "dialFreqControlId = " + dialFreqControlId
	
	
	def testHasProcCdsInDialFreqctrl = testDao.getTestHasProcCdsInDialFreqControlProc(dialFreqControlId)

	//def testAbbrev = testHasProcCdsInDialFreqctrl.getTestAbbrev()
	def testAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("testCodeID")
	
	log.info "testAbbrev = " + testAbbrev
	def testPlaceOfService = "ACME"
	def labMessagesCode = "SPLIT"
	
	//Data for  PscLocationId
	def existClnId = "34321"
	def AccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
	
	//Data for InsuranceInfo
	def existPyrInfoList = []
	existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)

	def pyr = payorDao.getPyrByMolecularProcAndBillTcSvcYes()

	
	def payorAbbrev = pyr.getPyrAbbrv()
	
     def newSubsId = existPyrInfoList[1]
     def relshp = existPyrInfoList[2]
	
	//======== Set TestCase level property values ========
	//Set NewAccnID
	testRunner.testCase.setPropertyValue ("NewAccnID", newAccnId)
	log.info "NewAccnID = " + newAccnId
	
	testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
	log.info "NewDOS = " + currentDate
	
	//Set Cln
	testRunner.testCase.setPropertyValue ("ClnAbbrev", clnAbbrev)
	log.info "ClnAbbrev = " + clnAbbrev
	
	//Set Patient info
	testRunner.testCase.setPropertyValue ("PatientId", newPtEPI)
	log.info "PatientId = " + newPtEPI
	
	testRunner.testCase.setPropertyValue ("PatientType", patientType)
	log.info "PatientType = " + patientType
	
	testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
	log.info "NewPtFName = " + newPtFName
	
	testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
	log.info "NewPtLName = " + newPtLName
	
	testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
	log.info "NewPtDOB = " + newPtDOB
	
	testRunner.testCase.setPropertyValue ("AddressLine1", addressLine1)
	log.info "AddressLine1 = " + addressLine1
	
	testRunner.testCase.setPropertyValue ("AddressLine2", addressLine2)
	log.info "AddressLine2 = " + addressLine2
	
	//Set FinalReportedDate
	testRunner.testCase.setPropertyValue ("FinalReportedDate", currentDate)
	log.info "FinalReportedDate = " + currentDate
	
	//Set Physicians
	testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
	log.info "PhysNPI = " + physNPI
	
	//Set Test
	testRunner.testCase.setPropertyValue ("AccnTransactionType", accnTransactionType)
	log.info "AccnTransactionType = " + accnTransactionType
	
	testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
	log.info "TestAbbrev = " + testAbbrev
	
	testRunner.testCase.setPropertyValue ("TestPOS", testPlaceOfService)
	log.info "TestPOS = " + testPlaceOfService
	
	testRunner.testCase.setPropertyValue ("TestFRD", currentDate)
	log.info "TestFRD = " + currentDate
	
	testRunner.testCase.setPropertyValue ("TestMSGCode", labMessagesCode)
	log.info "TestMSGCode = " + labMessagesCode
	
	//Set DiagnosisCodes
	def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
	testRunner.testCase.setPropertyValue ("AccnDiagCD", "V72")
	
	//Set Location
	testRunner.testCase.setPropertyValue ("AccnPOS", AccnPOS)
	log.info "AccnPOS = " + AccnPOS
	
	//Set Insurance
	testRunner.testCase.setPropertyValue ("PayorAbbrev", payorAbbrev)
	log.info "PayorAbbrev = " + payorAbbrev
	
	testRunner.testCase.setPropertyValue ("NewSubsId", newSubsId)
	log.info "NewSubsId = " + newSubsId
	
	testRunner.testCase.setPropertyValue ("Relshp", relshp)
	log.info "Relshp = " + relshp</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession" id="fd5c9a94-26a5-4a3e-be8e-80c82e5c9ece"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
			   
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                 <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
 				 <acc:Mod1>TC</acc:Mod1>
                     <!--Optional:-->
                  </acc:Modifiers>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>${#TestCase#TestMSGCode}</acc:Code>
                  </acc:LabMessages>

                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#TestFRD}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession-VerifyNewlyCreatedAccnInDB" id="c05c55bf-576a-432d-93b8-c58e5cab9e2a"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "NewAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>4415255676</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCRR</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A932472063</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPVFRM</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEJPUMA</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1993-06-08</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230608163157610</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>EPI20230608163157610</con:value></con:property><con:property><con:name>PatientType</con:name><con:value>Inpatient</con:value></con:property><con:property><con:name>AddressLine1</con:name><con:value>PTADDR1QATESTER20230608163157610</con:value></con:property><con:property><con:name>AddressLine2</con:name><con:value>PTADDR1QATESTER20230608163157610</con:value></con:property><con:property><con:name>FinalReportedDate</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>AccnTransactionType</con:name><con:value>D</con:value></con:property><con:property><con:name>TestFRD</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>TestMSGCode</con:name><con:value>SPLIT</con:value></con:property><con:property><con:name>AccnDiagCD</con:name><con:value>V72</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXMSplitAccession" searchProperties="true" id="ad221ab4-e4a1-451c-8cd9-78bf63df6f16"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccessionForXMSplitAccession-TestDataSetup" id="e9a04a46-bd87-46c1-8df2-cd920c5136fb"><con:settings/><con:config><script>import com.xifin.utils.*;
    import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import static java.util.Calendar.*
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)

    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = daoManagerAccnWS.getTestAbbrev(dbEnv)
    log.info "getTestAbbrev"

    //Get POS
    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
    def pyrAbbrev = daoManagerAccnWS.getPayorAbbrev(dbEnv)

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime)
    log.info "NewAccnID = " + "QATESTER" + randomCharacter.getRandomAlphaString(5) + currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    def clientId1 = "200"
    testRunner.testCase.setPropertyValue ("ClientId", clientId1)
    log.info "ClientId = " + clientId1

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    def subsId1 = "A826378131"
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId1)
    log.info "NewSubsId = " + subsId1

    //Set PhysNPI TestCase-level value
    def physNPI1 = "1923482347"
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI1)
    log.info "PhysNPI = " + physNPI1

    //Set TestAbbrev TestCase-level value
    def testAbbrev1 = "GLUCOSE"
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev1)
    log.info "TestAbbrev = " + testAbbrev1

    //set POS TestCase-level value
    def pos1 = "ACME"
    testRunner.testCase.setPropertyValue ("POS", pos1)
    log.info "POS = " + pos1

    //set DiagCD TestCase-level value
    def diagCd1 = "M76.42"
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd1)
    log.info "DiagCD = " + diagCd1

    //set PayorAbbrev TestCase-level value
    def pyrAbbrev1 = "P"
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev1)
    log.info "PayorAbbrev = " + pyrAbbrev1

    //disable and delete the pyr field requirements
    //daoManagerAccnWS.disablePyrFldReq(pyrAbbrev, dbEnv)
	

</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionForXMSplitAccession-SendRequest" id="55f8d285-1a3e-482e-bc3e-e7f901d3c86a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionForXMSplitAccession-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="0f1b53b7-3d83-44eb-b39d-a40df7cd6aa2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <acc:ClientBilled>true</acc:ClientBilled>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>

                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>

                  <acc:InsuredRelationship>18</acc:InsuredRelationship>

               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="569b8442-d4c1-4c63-83ff-14e9d9c83402"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="ba2310ed-b4a9-436b-9c2a-0d3daf61f83a"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="eab91636-c602-40fe-83c5-7a809bb81472"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionForXMSplitAccession-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">QATESTERCRIQF20230531172747805</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2023-05-31</con:value></con:property><con:property><con:name>ClientId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">300</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EPI20230531172747805</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PTFNAMEYUEWY</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PTLNAMEQRCDO</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A808124893</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4606360566</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PSA</con:value></con:property><con:property><con:name>POS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ZHD.IAN</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">P</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1993-05-31</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Success</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXPSplitAccession" searchProperties="true" id="513749f4-e399-4212-8a64-7e45a3a6c413"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateNewAccessionForXPSplitAccession-TestDataSetup" id="dbfe2c67-ab11-4be1-a34b-0e28c5414df7"><con:settings/><con:config><script>import com.xifin.utils.*;
import com.xifin.accnws.dao.*;
import com.xifin.qa.config.*;
import com.xifin.mars.dao.*;
import com.xifin.qa.config.*;
import com.xifin.qa.dao.rpm.*;
import static java.util.Calendar.*
    //======== Get values ========
    //Get dbEnv Project-level property value
    def dbEnv = null
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue ("OrgAlias")
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias);
    payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
    physicianDao = new PhysicianDaoImpl(configuration.getRpmDatabase())
    testDao = new TestDaoImpl(configuration.getRpmDatabase())
    clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
    log.info "dbEnv = " + dbEnv

    //Get timeStamp value
    timeStamp = new TimeStamp()
    def currentDateTime = timeStamp.getTimeStamp()

    //Get currentdate value
    def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")

    //Get ClientId value

    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
//    def clientId = daoManagerAccnWS.getClnAbbrev(dbEnv)
//    def clientId = clientDao.getClnHasNonFDATyp().get(0).getClnAbbrev();
    def clientId = '888'
    //Get random ptEPI
    def ptEPI = "EPI" + currentDateTime

    //Get random ptFName, ptLName and subsId
    randomCharacter = new RandomCharacter()
    def ptFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
    def ptLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
    def subsId = "A" + randomCharacter.getRandomNumericString(9)

    //Get Ordering Physician NPI
    def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
    log.info "getPhysicianNPI"

    //Get Ordered Test Abbrev
    def testAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("singleTest")
    log.info "getTestAbbrev"

    //Get POS
//    def pos = daoManagerAccnWS.getMainFacAbbrev(dbEnv)
    def pos = 'ACME'

    //Get Diagnosis Code
    def diagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)

    //Get Payor Abbrev
//    def pyrAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("PayorAbbrev")
	def pyrModSplitPyr = payorDao.getPyrModSplitPyrForCaliforniaHMO().get(1)
	def pyr = payorDao.getPyrByPyrId(pyrModSplitPyr.getPyrId())
	def pyrAbbrev = pyr.getPyrAbbrv()
	def mod1 = pyrModSplitPyr.getModId()
    //Get Modifier
//    def mod1 = payorDao.getPyrModSplitPyrByPyrAbbrev(pyrAbbrev).getModId()

    //======== Set TestCase level property values ========
    //Set NewAccnID TestCase-level value
    testRunner.testCase.setPropertyValue ("NewAccnID", "QATESTER" +  currentDateTime)
    log.info "NewAccnID = " + "QATESTER" +  currentDateTime

    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
    log.info "NewDOS = " + currentDate

    //def newPtDOB = "1975-09-10"
    //generate new pt DOB
    def nowCal = Calendar.instance
    def y  = nowCal.get(YEAR)-30
    def m  = nowCal.get(MONTH)
    def d = nowCal.get(DATE)
    nowCal.set(y,m,d)
    newPtDOB = String.format('%tF', nowCal)
    testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
    log.info "NewPtDOB = " + newPtDOB

    //Set ClientId TestCase-level value
    testRunner.testCase.setPropertyValue ("ClientId", clientId)
    log.info "ClientId = " + clientId

    //Set EPI TestCase-level value
    testRunner.testCase.setPropertyValue ("NewEPI", ptEPI)
    log.info "NewEPI = " + ptEPI

    //Set NewPtFName and NewPtLName TestCase-level values
    testRunner.testCase.setPropertyValue ("NewPtFName", ptFName)
    log.info "NewPtFName = " + ptFName
    testRunner.testCase.setPropertyValue ("NewPtLName", ptLName)
    log.info "NewPtLName = " + ptLName

    //Set NewSubsId TestCase-level value
    testRunner.testCase.setPropertyValue ("NewSubsId", subsId)
    log.info "NewSubsId = " + subsId

    //Set PhysNPI TestCase-level value
    testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
    log.info "PhysNPI = " + physNPI

    //Set TestAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
    log.info "TestAbbrev = " + testAbbrev

    //set POS TestCase-level value
    testRunner.testCase.setPropertyValue ("POS", pos)
    log.info "POS = " + pos

    //set DiagCD TestCase-level value
    testRunner.testCase.setPropertyValue ("DiagCD", diagCd)
    log.info "DiagCD = " + diagCd

    //set PayorAbbrev TestCase-level value
    testRunner.testCase.setPropertyValue ("PayorAbbrev", pyrAbbrev)
    log.info "PayorAbbrev = " + pyrAbbrev

    //set Modifier TestCase-level value
    testRunner.testCase.setPropertyValue ("Mod1", mod1)
    log.info "Mod1 = " + mod1</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateNewAccessionForXPSplitAccession-SendRequest" id="0f1b351c-82d6-4d8b-88e0-3abe38abf075"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateNewAccessionForXPSplitAccession-SendRequest" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="0f1b53b7-3d83-44eb-b39d-a40df7cd6aa2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClientId}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <!--<acc:PatientId>${#TestCase#NewEPI}</acc:PatientId>:-->
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#NewDOS}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                  <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
 				 <acc:Mod1>${#TestCase#Mod1}</acc:Mod1>
                     <!--Optional:-->
                  </acc:Modifiers>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#POS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#NewDOS}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#DiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
               <acc:PscLocationId>${#TestCase#POS}</acc:PscLocationId>
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <acc:InsuredRelationship>other</acc:InsuredRelationship>
                  <acc:InsuredName>
                     <!--Optional:-->
                     <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                     <!--Optional:-->
                     <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                  </acc:InsuredName>
			   <acc:Address>
                     <!--Optional:-->
                     <typ:AddressLine1>PTADDR1${#TestCase#NewAccnID}</typ:AddressLine1>
                     <!--Optional:-->
                     <typ:AddressLine2>PTADDR2${#TestCase#NewAccnID}</typ:AddressLine2>
                     <!--Optional:-->
                     <typ:ZIP>32542</typ:ZIP>
                  </acc:Address>
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="569b8442-d4c1-4c63-83ff-14e9d9c83402"/><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="ba2310ed-b4a9-436b-9c2a-0d3daf61f83a"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB" id="2cd74260-ca33-4849-9808-ea0278c03771"><con:settings/><con:config><script>import com.xifin.accnws.dao.*;
    import com.xifin.qa.config.*;
    import com.xifin.qa.dao.rpm.AccessionDao;
    import com.xifin.qa.dao.rpm.AccessionDaoImpl;
    def dbEnv = context.expand('${#Project#dbEnv}')
    def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
    log.info "orgAlias="+orgAlias
    Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)
    log.info dbEnv

    def newAccnId = context.expand('${#TestCase#NewAccnID}')
    log.info newAccnId

    //======== Verify pt's fName by accn id ========
    //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
    log.info ("ptFNameInDB = " + ptFNameInDB)
    //Get Pt's fName from TestCase level property - NewPtFName
    def newPtFName = context.expand('${#TestCase#NewPtFName}')

    //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
    //Expected Result: ptFNameInDB == #TestCase#NewPtFName
    assert ptFNameInDB == newPtFName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's lName by accn id ========
    //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
    log.info ("ptLNameInDB = " + ptLNameInDB)
    //Get Pt's lName from TestCase level property - NewPtLName
    def newPtLName = context.expand('${#TestCase#NewPtLName}')

    //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
    //Expected Result: ptLNameInDB == #TestCase#NewPtLName
    assert ptLNameInDB == newPtLName : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //======== Verify pt's DOB and accn's DOS by accn id ========
    //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
    daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
    def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
    log.info ("ptDOBInDB = " + ptDOBInDB)
    //Get Pt's DOB from TestCase level property - NewPtDOB
    def ptDOB = context.expand('${#TestCase#NewPtDOB}')
    //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
    def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
    log.info ("dosInDB = " + dosInDB)
    //Get accn's DOS from TestCase level property - NewDOS
    def dos = context.expand('${#TestCase#NewDOS}')

    //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
    //Expected Result: ptDOBInDB == #TestCase#NewDOS
    assert ptDOBInDB == ptDOB : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //Compare accn's DOS in db and the value in TestCase level property - NewDOS
    //Expected Result: dosInDB == #TestCase#NewDOS
    assert dosInDB == dos : "Accession WS-CreateAccession-CreateNewAccession was failed"

    //*****************
    //Set StatusMessage value
    //Create groovyUtils and XmlHolder for response
    def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
    def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateNewAccessionForXPSplitAccession-SendRequest#Response" )


    //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
    holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

    def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
    //Set DOS TestCase-level value
    testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
    log.info "StatusMessage = " + StatusMessage
    assert StatusMessage == "Success" : "Accession WS-CreateAccession-VerifyNewlyCreatedAccnInDB failed"


</script></con:config></con:testStep><con:properties><con:property><con:name>NewAccnID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A20601056420230601113945537</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2023-06-01</con:value></con:property><con:property><con:name>ClientId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">300</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EPI20230601113945537</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PTFNAMESOBHQ</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PTLNAMEQQYWW</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A745315070</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5976877287</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PSA</con:value></con:property><con:property><con:name>POS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACME</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ZHD.IAN</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MDNY</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1993-06-01</con:value></con:property><con:property><con:name>StatusMessage</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Success</con:value></con:property><con:property><con:name>Mod1</con:name><con:value>TC</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForCSplitAccession1" searchProperties="true" id="a0d370f7-776f-4860-ac46-de538a03e846"><con:settings/><con:testStep type="groovy" name="Step1:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession-TestDataSetup" id="8270bc46-0e19-451b-960d-aa999fa18966"><con:settings/><con:config><script>	import com.xifin.utils.*;
	import com.xifin.accnws.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.mars.dao.*;
	import com.xifin.qa.config.*;
	import com.xifin.qa.dao.rpm.*;
	import static java.util.Calendar.*
	
	//======== Get Configuration ========
	def dbEnv = null
	def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
	log.info "orgAlias="+orgAlias
	
	Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

	//Load Daos
	accnDao = new AccessionDaoImpl(configuration.getRpmDatabase())
	clientDao = new ClientDaoImpl(configuration.getRpmDatabase())
	testDao = new TestDaoImpl(configuration.getRpmDatabase())
	patientDao = new PatientDaoImpl(configuration.getRpmDatabase())
	payorDao = new PayorDaoImpl(configuration.getRpmDatabase())
	daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
	daoManagerXifinRpm = new DaoManagerXifinRpm(configuration.getRpmDatabase())
	
	timeStamp = new TimeStamp()
	randomCharacter = new RandomCharacter()
	
	//Get timeStamp value
	def currentDateTime = timeStamp.getTimeStamp()
	
	//Get currentdate value
	def currentDate = timeStamp.getCurrentDate("yyyy-MM-dd")
	
	//generate new pt DOB
	def nowCal = Calendar.instance
	def y  = nowCal.get(YEAR)-30
	def m  = nowCal.get(MONTH)
	def d = nowCal.get(DATE)
	nowCal.set(y,m,d)
	
	//======== Get values ========

	def existAccnIdClnIdList = []
     existAccnIdClnIdList = daoManagerAccnWS.getPricedThirdPartyAccnWOErrorFromACCNAndACCNPYR(dbEnv)
     def existAccnId = existAccnIdClnIdList[0]
	
	// Data for new Accn info
	def newAccnId = "QATESTER" + currentDateTime
	
	//Data for Client Info
	//def cln = clientDao.getClnHasDialysisTyp()
	def cln = clientDao.getClnHasClnBillRefLab().get(0)
	
	def clnAbbrev = cln.getClnAbbrev();
	log.info "clnAbbrevhhhhh="+clnAbbrev

	def newPtEPI = "EPI" + currentDateTime

	def patientType = "Inpatient"
	def newPtFName = "PTFNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtLName = "PTLNAME" + randomCharacter.getRandomAlphaString(5)
	def newPtDOB = String.format('%tF', nowCal)
	def addressLine1 = "PTADDR1" + newAccnId
	def addressLine2 = "PTADDR1" + newAccnId
	
	//Data for Physicians
	def physNPI = daoManagerAccnWS.getPhysicianNPI(dbEnv)
	
	//Data for Test Info 
	def accnTransactionType = "D"

	//def testAbbrev = testHasProcCdsInDialFreqctrl.getTestAbbrev()
	def testAbbrev = testRunner.testCase.testSuite.project.getPropertyValue("testCodeID")
	
	log.info "testAbbrev = " + testAbbrev
	def testPlaceOfService = "REFLAB"
	def labMessagesCode = "SPLIT"
	
	//Data for  PscLocationId
	def existClnId = "34321"
	def AccnPOS = daoManagerAccnWS.getPOSFromCLNFACByClnId(existClnId, dbEnv)
	
	//Data for InsuranceInfo
	def existPyrInfoList = []
	existPyrInfoList = daoManagerAccnWS.getPyrAbbrevSubsIdRelshpTypFromAccnPyrByAccnIdPyrPrio(existAccnId, "1", dbEnv)

	def pyr = payorDao.getPyrHasPyrGrpNotInClnAndPt()

	
	def payorAbbrev = pyr.getPyrAbbrv()
	
     def newSubsId = existPyrInfoList[1]
     def relshp = existPyrInfoList[2]
	
	//======== Set TestCase level property values ========
	//Set NewAccnID
	testRunner.testCase.setPropertyValue ("NewAccnID", newAccnId)
	log.info "NewAccnID = " + newAccnId
	
	testRunner.testCase.setPropertyValue ("NewDOS", currentDate)
	log.info "NewDOS = " + currentDate
	
	//Set Cln
	testRunner.testCase.setPropertyValue ("ClnAbbrev", clnAbbrev)
	log.info "ClnAbbrev = " + clnAbbrev
	
	//Set Patient info
	testRunner.testCase.setPropertyValue ("PatientId", newPtEPI)
	log.info "PatientId = " + newPtEPI
	
	testRunner.testCase.setPropertyValue ("PatientType", patientType)
	log.info "PatientType = " + patientType
	
	testRunner.testCase.setPropertyValue ("NewPtFName", newPtFName)
	log.info "NewPtFName = " + newPtFName
	
	testRunner.testCase.setPropertyValue ("NewPtLName", newPtLName)
	log.info "NewPtLName = " + newPtLName
	
	testRunner.testCase.setPropertyValue ("NewPtDOB", newPtDOB)
	log.info "NewPtDOB = " + newPtDOB
	
	testRunner.testCase.setPropertyValue ("AddressLine1", addressLine1)
	log.info "AddressLine1 = " + addressLine1
	
	testRunner.testCase.setPropertyValue ("AddressLine2", addressLine2)
	log.info "AddressLine2 = " + addressLine2
	
	//Set FinalReportedDate
	testRunner.testCase.setPropertyValue ("FinalReportedDate", currentDate)
	log.info "FinalReportedDate = " + currentDate
	
	//Set Physicians
	testRunner.testCase.setPropertyValue ("PhysNPI", physNPI)
	log.info "PhysNPI = " + physNPI
	
	//Set Test
	testRunner.testCase.setPropertyValue ("AccnTransactionType", accnTransactionType)
	log.info "AccnTransactionType = " + accnTransactionType
	
	testRunner.testCase.setPropertyValue ("TestAbbrev", testAbbrev)
	log.info "TestAbbrev = " + testAbbrev
	
	testRunner.testCase.setPropertyValue ("TestPOS", testPlaceOfService)
	log.info "TestPOS = " + testPlaceOfService
	
	testRunner.testCase.setPropertyValue ("TestFRD", currentDate)
	log.info "TestFRD = " + currentDate
	
	testRunner.testCase.setPropertyValue ("TestMSGCode", labMessagesCode)
	log.info "TestMSGCode = " + labMessagesCode
	
	//Set DiagnosisCodes
	def existAccnDiagCd = daoManagerAccnWS.getDiagnosisCode(dbEnv)
	testRunner.testCase.setPropertyValue ("AccnDiagCD", "V72")
	
	//Set Location
	testRunner.testCase.setPropertyValue ("AccnPOS", AccnPOS)
	log.info "AccnPOS = " + AccnPOS
	
	//Set Insurance
	testRunner.testCase.setPropertyValue ("PayorAbbrev", payorAbbrev)
	log.info "PayorAbbrev = " + payorAbbrev
	
	testRunner.testCase.setPropertyValue ("NewSubsId", newSubsId)
	log.info "NewSubsId = " + newSubsId
	
	testRunner.testCase.setPropertyValue ("Relshp", relshp)
	log.info "Relshp = " + relshp</script></con:config></con:testStep><con:testStep type="request" name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession" id="0e1c2129-8f7e-4429-8adc-6afad1e2e7ed"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>accessionSoap11</con:interface><con:operation>CreateAccession</con:operation><con:request name="Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordDigest" id="bbbfeab3-9d24-491d-a93e-63f095e5b878"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:acc="http://www.xifin.com/schema/accession" xmlns:msg="http://www.xifin.com/schema/msgHeader" xmlns:typ="http://www.xifin.com/schema/types">
   <soapenv:Header/>
   <soapenv:Body>
      <acc:CreateAccessionRequest>
         <msg:MessageHeader>
            <!--Optional:-->
            <msg:SequenceNumber>1111</msg:SequenceNumber>
            <msg:UserId>${#Project#UserId}</msg:UserId>
            <!--Optional:-->
            <msg:OrgAlias>${#Project#OrgAlias}</msg:OrgAlias>
         </msg:MessageHeader>
         <acc:Payload>
            <acc:CreateAccession>
               <acc:AccessionId>${#TestCase#NewAccnID}</acc:AccessionId>
               <acc:IgnoreErrors>true</acc:IgnoreErrors>
               <acc:DateOfService>${#TestCase#NewDOS}</acc:DateOfService>
               <!--Optional:-->
               <acc:ClientId>${#TestCase#ClnAbbrev}</acc:ClientId>
               <!--Optional:-->
               <acc:PatientInfo>
                  <acc:PatientId>${#TestCase#PatientId}</acc:PatientId>
			   
                  <!--Optional:-->
                  <acc:Person>
                     <typ:Name>
                        <!--Optional:-->
                        <typ:FirstName>${#TestCase#NewPtFName}</typ:FirstName>
                        <!--Optional:-->
                        <typ:LastName>${#TestCase#NewPtLName}</typ:LastName>
                        <!--Optional:-->
                        <typ:MiddleName>M</typ:MiddleName>
                     </typ:Name>
                     <!--Optional:-->
                     <typ:DateOfBirth>${#TestCase#NewPtDOB}</typ:DateOfBirth>
                     <!--Optional:-->
                     <typ:Gender>MALE</typ:Gender>
                     <!--Optional:-->
                     <typ:Address>
                        <!--Optional:-->
                        <typ:AddressLine1>${#TestCase#AddressLine1}</typ:AddressLine1>
                        <!--Optional:-->
                        <typ:AddressLine2>${#TestCase#AddressLine2}</typ:AddressLine2>
                        <!--Optional:-->
                        <typ:ZIP>32542</typ:ZIP>
                     </typ:Address>
                  </acc:Person>
                  <acc:PatientType>${#TestCase#PatientType}</acc:PatientType>
               </acc:PatientInfo>
               <!--Optional:-->
               <acc:FinalReportedDate>${#TestCase#FinalReportedDate}</acc:FinalReportedDate>
               <!--Optional:-->
               <acc:Physicians>
                  <!--Optional:-->
                  <acc:Ordering>
                     <!--Optional:-->
                     <acc:NPI>${#TestCase#PhysNPI}</acc:NPI>
                  </acc:Ordering>
               </acc:Physicians>
               <!--Zero or more repetitions:-->
               <acc:OrderedTests>
                  <acc:TestSequenceNumber>1</acc:TestSequenceNumber>
                  <acc:TransactionType>D</acc:TransactionType>
                  <acc:TestId>${#TestCase#TestAbbrev}</acc:TestId>
                 <!--Optional:-->
                  <acc:Modifiers>
                     <!--Optional:-->
 				 <acc:Mod1>TC</acc:Mod1>
                     <!--Optional:-->
                  </acc:Modifiers>
                  <acc:ClientBilled>false</acc:ClientBilled>
                  <!--Zero or more repetitions:-->
                  <acc:LabMessages>
                     <acc:Code>${#TestCase#TestMSGCode}</acc:Code>
                  </acc:LabMessages>

                  <!--Optional:-->
                  <acc:PlaceOfService>${#TestCase#TestPOS}</acc:PlaceOfService>
                  <!--Optional:-->
                  <acc:FinalReportDate>${#TestCase#TestFRD}</acc:FinalReportDate>
                  <!--Optional:-->
                  <acc:Units>1</acc:Units>
               </acc:OrderedTests>
               <!--Zero or more repetitions:-->
               <acc:AccessionLevelDiagnosisCodes>
                  <!--Optional:-->
                  <acc:DiagnosisCode>${#TestCase#AccnDiagCD}</acc:DiagnosisCode>
               </acc:AccessionLevelDiagnosisCodes>
               <!--Optional:-->
   
               <!--Zero or more repetitions:-->
               <acc:InsuranceInfo>
                  <acc:PayorPriority>1</acc:PayorPriority>
                  <acc:PayorId>${#TestCase#PayorAbbrev}</acc:PayorId>
                  <!--Optional:-->
                  <acc:SubscriberId>${#TestCase#NewSubsId}</acc:SubscriberId>
                  <!--Optional:-->
                  <acc:InsuredRelationship>${#TestCase#Relshp}</acc:InsuredRelationship>
                  <!--Optional:-->
               </acc:InsuranceInfo>
               <!--Optional:-->
               <acc:CheckClientBillingRules>false</acc:CheckClientBillingRules>
            </acc:CreateAccession>
         </acc:Payload>
      </acc:CreateAccessionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" name="ValidateCreateNewAccnStatus" id="a8d3dbc1-6bc7-4321-a5d0-cce61177f8fa"><con:configuration><path>declare namespace ns4='http://www.xifin.com/schema/accession';
    declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
    declare namespace ns3='http://www.xifin.com/schema/types';
    declare namespace ns2='http://www.xifin.com/schema/msgHeader';


    //ns4:Payload[1]/ns4:Status[1]/ns3:StatusMessage[1]/text()</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#Project#Username}</con:username><con:password>${#Project#Password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.xifin.com/schema/accession/accession/CreateAccessionRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession-VerifyNewlyCreatedAccnInDB" id="44d92728-7a35-45c6-862a-7b62f14bae52"><con:settings/><con:config><script>
        import com.xifin.accnws.dao.*;
        import com.xifin.qa.config.*;
        import com.xifin.qa.config.*;

        def dbEnv = null
        log.info dbEnv

        def newAccnId = context.expand('${#TestCase#NewAccnID}')
        log.info "NewAccnID="+newAccnId

        def orgAlias = testRunner.testCase.testSuite.project.getPropertyValue("orgalias")
        log.info "orgAlias="+orgAlias
        Configuration configuration = ConfigurationLoader.loadConfiguration(orgAlias)

        //======== Verify pt's fName by accn id ========
        //Get the Pt's fName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptFNameInDB = daoManagerAccnWS.getFnameByAccnId(newAccnId, dbEnv)
        log.info ("ptFNameInDB = " + ptFNameInDB)
        //Get Pt's fName from TestCase level property - NewPtFName
        def newPtFName = context.expand('${#TestCase#NewPtFName}')

        //Compare the Pt's fName in db and the value in TestCase level property - NewPtFName
        //Expected Result: ptFNameInDB == #TestCase#NewPtFName
        assert ptFNameInDB == newPtFName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's lName by accn id ========
        //Get the Pt's lName in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptLNameInDB = daoManagerAccnWS.getLnameByAccnId(newAccnId, dbEnv)
        log.info ("ptLNameInDB = " + ptLNameInDB)
        //Get Pt's lName from TestCase level property - NewPtLName
        def newPtLName = context.expand('${#TestCase#NewPtLName}')

        //Compare the Pt's lName in db and the value in TestCase level property - NewPtLName
        //Expected Result: ptLNameInDB == #TestCase#NewPtLName
        assert ptLNameInDB == newPtLName : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXDSplitAccession failed"

        //======== Verify pt's DOB and accn's DOS by accn id ========
        //Get the Pt's DOB in db by referencing TestCase level properlty - NewAccnID
        daoManagerAccnWS = new DaoManagerAccnWS(configuration.getRpmDatabase())
        def ptDOBInDB = daoManagerAccnWS.getDobByAccnId(newAccnId, dbEnv)
        log.info ("ptDOBInDB = " + ptDOBInDB)
        //Get Pt's DOB from TestCase level property - NewPtDOB
        def ptDOB = context.expand('${#TestCase#NewPtDOB}')
        //Get accn's DOS in db by referencing TestCase level properlty - NewAccnID
        def dosInDB = daoManagerAccnWS.getDOSByAccnId(newAccnId, dbEnv)
        log.info ("dosInDB = " + dosInDB)
        //Get accn's DOS from TestCase level property - NewDOS
        def dos = context.expand('${#TestCase#NewDOS}')

        //Compare the Pt's DOB in db and the value in TestCase level property - NewDOS
        //Expected Result: ptDOBInDB == #TestCase#NewDOS
        assert ptDOBInDB == ptDOB : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"

        //Compare accn's DOS in db and the value in TestCase level property - NewDOS
        //Expected Result: dosInDB == #TestCase#NewDOS
        assert dosInDB == dos : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"

        //*****************
        //Set StatusMessage value
        //Create groovyUtils and XmlHolder for response
        def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
        def holder = groovyUtils.getXmlHolder( "Step2:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession#Response" )


        //If the desired content is namespace qualified (very likely for SOAP responses), you need to define the namespace first.
        holder.namespaces["ns3"] = "http://www.xifin.com/schema/types"

        def  StatusMessage = holder.getNodeValue( "//ns3:StatusMessage[1]/text()" )
        //Set DOS TestCase-level value
        testRunner.testCase.setPropertyValue ("StatusMessage", StatusMessage)
        log.info "StatusMessage = " + StatusMessage
        assert StatusMessage == "Success" : "Step3:Accession WS-CreateAccession-SplitAccession-CreateNewAccessionForXGSplitAccession failed"


    </script></con:config></con:testStep><con:properties><con:property><con:name>UpdatedPayorAbbrev</con:name><con:value>MCIL</con:value></con:property><con:property><con:name>TestPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>TestAbbrev</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StatusMessage</con:name><con:value>Success</con:value></con:property><con:property><con:name>Relshp</con:name><con:value>18</con:value></con:property><con:property><con:name>PhysNPI</con:name><con:value>4415255676</con:value></con:property><con:property><con:name>PayorAbbrev</con:name><con:value>MCRR</con:value></con:property><con:property><con:name>NewSubsId</con:name><con:value>A932472063</con:value></con:property><con:property><con:name>NewPtLName</con:name><con:value>PTLNAMEPVFRM</con:value></con:property><con:property><con:name>NewPtFName</con:name><con:value>PTFNAMEJPUMA</con:value></con:property><con:property><con:name>NewPtDOB</con:name><con:value>1993-06-08</con:value></con:property><con:property><con:name>NewEPI</con:name><con:value>EPI20180212133845126</con:value></con:property><con:property><con:name>NewDOS</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>NewAccnID</con:name><con:value>QATESTER20230608163157610</con:value></con:property><con:property><con:name>DiagCD</con:name><con:value>O36.20X2</con:value></con:property><con:property><con:name>ClnAbbrev</con:name><con:value>888</con:value></con:property><con:property><con:name>AccnPOS</con:name><con:value>ACME</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>EPI20230608163157610</con:value></con:property><con:property><con:name>PatientType</con:name><con:value>Inpatient</con:value></con:property><con:property><con:name>AddressLine1</con:name><con:value>PTADDR1QATESTER20230608163157610</con:value></con:property><con:property><con:name>AddressLine2</con:name><con:value>PTADDR1QATESTER20230608163157610</con:value></con:property><con:property><con:name>FinalReportedDate</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>AccnTransactionType</con:name><con:value>D</con:value></con:property><con:property><con:name>TestFRD</con:name><con:value>2023-06-08</con:value></con:property><con:property><con:name>TestMSGCode</con:name><con:value>SPLIT</con:value></con:property><con:property><con:name>AccnDiagCD</con:name><con:value>V72</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>DuplicateAccnId</con:name><con:value>ACCNWSSMOKETEST004</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>OrgAlias</con:name><con:value>qa08</con:value></con:property><con:property><con:name>UserId</con:name><con:value>qatester</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://www.xifinqa.com/prod/accessionv961/services</con:value></con:property><con:property><con:name>dbEnv</con:name><con:value>QA_ACME_TEST</con:value></con:property><con:property><con:name>Username</con:name><con:value>clndoc</con:value></con:property><con:property><con:name>Password</con:name><con:value>clndoc</con:value></con:property><con:property><con:name>Env</con:name><con:value>QA08</con:value></con:property><con:property><con:name>eType1</con:name><con:value>OePostingEngine</con:value></con:property><con:property><con:name>xapEnv</con:name><con:value>XAP</con:value></con:property><con:property><con:name>engConfigDB</con:name><con:value>SSO_APP_STAGING</con:value></con:property><con:property><con:name>hasLoggedIn</con:name><con:value>false</con:value></con:property><con:property><con:name>eType2</con:name><con:value>PricingEngine</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>